/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressProperty;
import com.konfigthis.client.model.AddressProperty1;
import com.konfigthis.client.model.AddressProperty4;
import com.konfigthis.client.model.AddressProperty5;
import com.konfigthis.client.model.AddressProperty6;
import com.konfigthis.client.model.BillingAddressProperty;
import com.konfigthis.client.model.BillingAddressProperty1;
import com.konfigthis.client.model.ECommerceCartLineItem;
import com.konfigthis.client.model.ECommerceCartLineItem1;
import com.konfigthis.client.model.ECommerceCustomerProperty;
import com.konfigthis.client.model.ECommerceCustomerProperty1;
import com.konfigthis.client.model.ECommerceCustomerProperty2;
import com.konfigthis.client.model.ECommerceCustomerProperty3;
import com.konfigthis.client.model.ECommerceOrderLineItem;
import com.konfigthis.client.model.ECommerceOrderLineItem1;
import com.konfigthis.client.model.ECommerceProductImage;
import com.konfigthis.client.model.ECommerceProductImage1;
import com.konfigthis.client.model.ECommerceProductVariant;
import com.konfigthis.client.model.ECommerceProductVariant1;
import com.konfigthis.client.model.EcommerceAddCartLineItem200Response;
import com.konfigthis.client.model.EcommerceAddCartLineItemRequest;
import com.konfigthis.client.model.EcommerceAddCartLineItemResponse;
import com.konfigthis.client.model.EcommerceAddCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceAddCartToStore200Response;
import com.konfigthis.client.model.EcommerceAddCartToStoreRequest;
import com.konfigthis.client.model.EcommerceAddCartToStoreResponse;
import com.konfigthis.client.model.EcommerceAddCartToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddCustomerToStore200Response;
import com.konfigthis.client.model.EcommerceAddCustomerToStoreRequest;
import com.konfigthis.client.model.EcommerceAddCustomerToStoreResponse;
import com.konfigthis.client.model.EcommerceAddCustomerToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomer200Response;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomerRequest;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomerResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomerdefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateProductVariant200Response;
import com.konfigthis.client.model.EcommerceAddOrUpdateProductVariantResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrderLineItem200Response;
import com.konfigthis.client.model.EcommerceAddOrderLineItemRequest;
import com.konfigthis.client.model.EcommerceAddOrderLineItemResponse;
import com.konfigthis.client.model.EcommerceAddOrderLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrderToStore200Response;
import com.konfigthis.client.model.EcommerceAddOrderToStoreRequest;
import com.konfigthis.client.model.EcommerceAddOrderToStoreResponse;
import com.konfigthis.client.model.EcommerceAddOrderToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddProductImage200Response;
import com.konfigthis.client.model.EcommerceAddProductImageRequest;
import com.konfigthis.client.model.EcommerceAddProductImageResponse;
import com.konfigthis.client.model.EcommerceAddProductImagedefaultResponse;
import com.konfigthis.client.model.EcommerceAddProductToStore200Response;
import com.konfigthis.client.model.EcommerceAddProductToStoreRequest;
import com.konfigthis.client.model.EcommerceAddProductToStoreResponse;
import com.konfigthis.client.model.EcommerceAddProductToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddProductVariant200Response;
import com.konfigthis.client.model.EcommerceAddProductVariantRequest;
import com.konfigthis.client.model.EcommerceAddProductVariantResponse;
import com.konfigthis.client.model.EcommerceAddProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceAddPromoCode200Response;
import com.konfigthis.client.model.EcommerceAddPromoCodeRequest;
import com.konfigthis.client.model.EcommerceAddPromoCodeResponse;
import com.konfigthis.client.model.EcommerceAddPromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceAddPromoRule200Response;
import com.konfigthis.client.model.EcommerceAddPromoRuleRequest;
import com.konfigthis.client.model.EcommerceAddPromoRuleResponse;
import com.konfigthis.client.model.EcommerceAddPromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccount200Response;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccountRequest;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccountResponse;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccountdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteCartLineItemResponse;
import com.konfigthis.client.model.EcommerceDeleteCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderLineResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderLinedefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteProductImageResponse;
import com.konfigthis.client.model.EcommerceDeleteProductImagedefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteProductResponse;
import com.konfigthis.client.model.EcommerceDeleteProductVariantResponse;
import com.konfigthis.client.model.EcommerceDeleteProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteProductdefaultResponse;
import com.konfigthis.client.model.EcommerceDeletePromoCodeResponse;
import com.konfigthis.client.model.EcommerceDeletePromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceDeletePromoRuleResponse;
import com.konfigthis.client.model.EcommerceDeletePromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteStoredefaultResponse;
import com.konfigthis.client.model.EcommerceGetCartInfo200Response;
import com.konfigthis.client.model.EcommerceGetCartInfoResponse;
import com.konfigthis.client.model.EcommerceGetCartInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetCartLineItem200Response;
import com.konfigthis.client.model.EcommerceGetCartLineItemResponse;
import com.konfigthis.client.model.EcommerceGetCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceGetCustomerInfo200Response;
import com.konfigthis.client.model.EcommerceGetCustomerInfoResponse;
import com.konfigthis.client.model.EcommerceGetCustomerInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetOrderLineItem200Response;
import com.konfigthis.client.model.EcommerceGetOrderLineItemResponse;
import com.konfigthis.client.model.EcommerceGetOrderLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceGetProductImageInfo200Response;
import com.konfigthis.client.model.EcommerceGetProductImageInfoResponse;
import com.konfigthis.client.model.EcommerceGetProductImageInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetProductImages200Response;
import com.konfigthis.client.model.EcommerceGetProductImagesResponse;
import com.konfigthis.client.model.EcommerceGetProductImagesdefaultResponse;
import com.konfigthis.client.model.EcommerceGetProductVariantInfo200Response;
import com.konfigthis.client.model.EcommerceGetProductVariantInfoResponse;
import com.konfigthis.client.model.EcommerceGetProductVariantInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetPromoCode200Response;
import com.konfigthis.client.model.EcommerceGetPromoCodeResponse;
import com.konfigthis.client.model.EcommerceGetPromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreCarts200Response;
import com.konfigthis.client.model.EcommerceGetStoreCartsResponse;
import com.konfigthis.client.model.EcommerceGetStoreCartsdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreCustomers200Response;
import com.konfigthis.client.model.EcommerceGetStoreCustomersResponse;
import com.konfigthis.client.model.EcommerceGetStoreCustomersdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreInfo200Response;
import com.konfigthis.client.model.EcommerceGetStoreInfoResponse;
import com.konfigthis.client.model.EcommerceGetStoreInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderInfo200Response;
import com.konfigthis.client.model.EcommerceGetStoreOrderInfoResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderLines200Response;
import com.konfigthis.client.model.EcommerceGetStoreOrderLinesResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderLinesdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreProductInfo200Response;
import com.konfigthis.client.model.EcommerceGetStoreProductInfoResponse;
import com.konfigthis.client.model.EcommerceGetStoreProductInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreProducts200Response;
import com.konfigthis.client.model.EcommerceGetStoreProductsResponse;
import com.konfigthis.client.model.EcommerceGetStoreProductsdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoCodes200Response;
import com.konfigthis.client.model.EcommerceGetStorePromoCodesResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoCodesdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRule200Response;
import com.konfigthis.client.model.EcommerceGetStorePromoRuleResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRules200Response;
import com.konfigthis.client.model.EcommerceGetStorePromoRulesResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRulesdefaultResponse;
import com.konfigthis.client.model.EcommerceListAccountOrders200Response;
import com.konfigthis.client.model.EcommerceListAccountOrdersResponse;
import com.konfigthis.client.model.EcommerceListAccountOrdersdefaultResponse;
import com.konfigthis.client.model.EcommerceListCartLines200Response;
import com.konfigthis.client.model.EcommerceListCartLinesResponse;
import com.konfigthis.client.model.EcommerceListCartLinesdefaultResponse;
import com.konfigthis.client.model.EcommerceListProductVariants200Response;
import com.konfigthis.client.model.EcommerceListProductVariantsResponse;
import com.konfigthis.client.model.EcommerceListProductVariantsdefaultResponse;
import com.konfigthis.client.model.EcommerceListStoreOrders200Response;
import com.konfigthis.client.model.EcommerceListStoreOrdersResponse;
import com.konfigthis.client.model.EcommerceListStoreOrdersdefaultResponse;
import com.konfigthis.client.model.EcommerceListStores200Response;
import com.konfigthis.client.model.EcommerceListStoresResponse;
import com.konfigthis.client.model.EcommerceListStoresdefaultResponse;
import com.konfigthis.client.model.EcommerceRemoveCartResponse;
import com.konfigthis.client.model.EcommerceRemoveCartdefaultResponse;
import com.konfigthis.client.model.EcommerceRemoveCustomerResponse;
import com.konfigthis.client.model.EcommerceRemoveCustomerdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateCartById200Response;
import com.konfigthis.client.model.EcommerceUpdateCartByIdRequest;
import com.konfigthis.client.model.EcommerceUpdateCartByIdResponse;
import com.konfigthis.client.model.EcommerceUpdateCartByIddefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateCartLineItem200Response;
import com.konfigthis.client.model.EcommerceUpdateCartLineItemRequest;
import com.konfigthis.client.model.EcommerceUpdateCartLineItemResponse;
import com.konfigthis.client.model.EcommerceUpdateCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateCustomer200Response;
import com.konfigthis.client.model.EcommerceUpdateCustomerRequest;
import com.konfigthis.client.model.EcommerceUpdateCustomerResponse;
import com.konfigthis.client.model.EcommerceUpdateCustomerdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateOrderLine200Response;
import com.konfigthis.client.model.EcommerceUpdateOrderLineRequest;
import com.konfigthis.client.model.EcommerceUpdateOrderLineResponse;
import com.konfigthis.client.model.EcommerceUpdateOrderLinedefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateProduct200Response;
import com.konfigthis.client.model.EcommerceUpdateProductImage200Response;
import com.konfigthis.client.model.EcommerceUpdateProductImageRequest;
import com.konfigthis.client.model.EcommerceUpdateProductImageResponse;
import com.konfigthis.client.model.EcommerceUpdateProductImagedefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateProductRequest;
import com.konfigthis.client.model.EcommerceUpdateProductResponse;
import com.konfigthis.client.model.EcommerceUpdateProductVariant200Response;
import com.konfigthis.client.model.EcommerceUpdateProductVariantRequest;
import com.konfigthis.client.model.EcommerceUpdateProductVariantResponse;
import com.konfigthis.client.model.EcommerceUpdateProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateProductdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoCode200Response;
import com.konfigthis.client.model.EcommerceUpdatePromoCodeRequest;
import com.konfigthis.client.model.EcommerceUpdatePromoCodeResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoRule200Response;
import com.konfigthis.client.model.EcommerceUpdatePromoRuleRequest;
import com.konfigthis.client.model.EcommerceUpdatePromoRuleResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrder200Response;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrderRequest;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrderResponse;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrderdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateStore200Response;
import com.konfigthis.client.model.EcommerceUpdateStoreRequest;
import com.konfigthis.client.model.EcommerceUpdateStoreResponse;
import com.konfigthis.client.model.EcommerceUpdateStoredefaultResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OutreachProperty;
import com.konfigthis.client.model.OutreachProperty1;
import com.konfigthis.client.model.PromosPropertyInner;
import com.konfigthis.client.model.ShippingAddressProperty;
import com.konfigthis.client.model.ShippingAddressProperty1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EcommerceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EcommerceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EcommerceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCartLineItemCall(String storeId, String cartId, EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddCartLineItemRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}/lines"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCartLineItemValidateBeforeCall(String storeId, String cartId, EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addCartLineItem(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling addCartLineItem(Async)");
        }

        // verify the required parameter 'ecommerceAddCartLineItemRequest' is set
        if (ecommerceAddCartLineItemRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddCartLineItemRequest' when calling addCartLineItem(Async)");
        }

        return addCartLineItemCall(storeId, cartId, ecommerceAddCartLineItemRequest, _callback);

    }


    private ApiResponse<EcommerceAddCartLineItemResponse> addCartLineItemWithHttpInfo(String storeId, String cartId, EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addCartLineItemValidateBeforeCall(storeId, cartId, ecommerceAddCartLineItemRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddCartLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCartLineItemAsync(String storeId, String cartId, EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest, final ApiCallback<EcommerceAddCartLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCartLineItemValidateBeforeCall(storeId, cartId, ecommerceAddCartLineItemRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddCartLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCartLineItemRequestBuilder {
        private final String id;
        private final String productId;
        private final String productVariantId;
        private final Integer quantity;
        private final Double price;
        private final String storeId;
        private final String cartId;

        private AddCartLineItemRequestBuilder(String id, String productId, String productVariantId, Integer quantity, double price, String storeId, String cartId) {
            this.id = id;
            this.productId = productId;
            this.productVariantId = productVariantId;
            this.quantity = quantity;
            this.price = price;
            this.storeId = storeId;
            this.cartId = cartId;
        }

        /**
         * Build call for addCartLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest = buildBodyParams();
            return addCartLineItemCall(storeId, cartId, ecommerceAddCartLineItemRequest, _callback);
        }

        private EcommerceAddCartLineItemRequest buildBodyParams() {
            EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest = new EcommerceAddCartLineItemRequest();
            ecommerceAddCartLineItemRequest.id(this.id);
            ecommerceAddCartLineItemRequest.productId(this.productId);
            ecommerceAddCartLineItemRequest.productVariantId(this.productVariantId);
            ecommerceAddCartLineItemRequest.quantity(this.quantity);
            ecommerceAddCartLineItemRequest.price(this.price);
            return ecommerceAddCartLineItemRequest;
        }

        /**
         * Execute addCartLineItem request
         * @return EcommerceAddCartLineItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddCartLineItemResponse execute() throws ApiException {
            EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest = buildBodyParams();
            ApiResponse<EcommerceAddCartLineItemResponse> localVarResp = addCartLineItemWithHttpInfo(storeId, cartId, ecommerceAddCartLineItemRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCartLineItem request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddCartLineItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddCartLineItemResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest = buildBodyParams();
            return addCartLineItemWithHttpInfo(storeId, cartId, ecommerceAddCartLineItemRequest);
        }

        /**
         * Execute addCartLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddCartLineItemResponse> _callback) throws ApiException {
            EcommerceAddCartLineItemRequest ecommerceAddCartLineItemRequest = buildBodyParams();
            return addCartLineItemAsync(storeId, cartId, ecommerceAddCartLineItemRequest, _callback);
        }
    }

    /**
     * Add cart line item
     * Add a new line item to an existing cart.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @param ecommerceAddCartLineItemRequest  (required)
     * @return AddCartLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddCartLineItemRequestBuilder addCartLineItem(String id, String productId, String productVariantId, Integer quantity, double price, String storeId, String cartId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (productVariantId == null) throw new IllegalArgumentException("\"productVariantId\" is required but got null");
            

        if (quantity == null) throw new IllegalArgumentException("\"quantity\" is required but got null");
        
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        return new AddCartLineItemRequestBuilder(id, productId, productVariantId, quantity, price, storeId, cartId);
    }
    private okhttp3.Call addCartToStoreCall(String storeId, EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddCartToStoreRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCartToStoreValidateBeforeCall(String storeId, EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addCartToStore(Async)");
        }

        // verify the required parameter 'ecommerceAddCartToStoreRequest' is set
        if (ecommerceAddCartToStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddCartToStoreRequest' when calling addCartToStore(Async)");
        }

        return addCartToStoreCall(storeId, ecommerceAddCartToStoreRequest, _callback);

    }


    private ApiResponse<EcommerceAddCartToStoreResponse> addCartToStoreWithHttpInfo(String storeId, EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = addCartToStoreValidateBeforeCall(storeId, ecommerceAddCartToStoreRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddCartToStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCartToStoreAsync(String storeId, EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest, final ApiCallback<EcommerceAddCartToStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCartToStoreValidateBeforeCall(storeId, ecommerceAddCartToStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddCartToStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCartToStoreRequestBuilder {
        private final String id;
        private final ECommerceCustomerProperty customer;
        private final String currencyCode;
        private final Double orderTotal;
        private final List<ECommerceCartLineItem> lines;
        private final String storeId;
        private String campaignId;
        private String checkoutUrl;
        private Double taxTotal;

        private AddCartToStoreRequestBuilder(String id, ECommerceCustomerProperty customer, String currencyCode, double orderTotal, List<ECommerceCartLineItem> lines, String storeId) {
            this.id = id;
            this.customer = customer;
            this.currencyCode = currencyCode;
            this.orderTotal = orderTotal;
            this.lines = lines;
            this.storeId = storeId;
        }

        /**
         * Set campaignId
         * @param campaignId A string that uniquely identifies the campaign for a cart. (optional)
         * @return AddCartToStoreRequestBuilder
         */
        public AddCartToStoreRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set checkoutUrl
         * @param checkoutUrl The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. (optional)
         * @return AddCartToStoreRequestBuilder
         */
        public AddCartToStoreRequestBuilder checkoutUrl(String checkoutUrl) {
            this.checkoutUrl = checkoutUrl;
            return this;
        }
        
        /**
         * Set taxTotal
         * @param taxTotal The total tax for the cart. (optional)
         * @return AddCartToStoreRequestBuilder
         */
        public AddCartToStoreRequestBuilder taxTotal(Double taxTotal) {
            this.taxTotal = taxTotal;
            return this;
        }
        
        /**
         * Build call for addCartToStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest = buildBodyParams();
            return addCartToStoreCall(storeId, ecommerceAddCartToStoreRequest, _callback);
        }

        private EcommerceAddCartToStoreRequest buildBodyParams() {
            EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest = new EcommerceAddCartToStoreRequest();
            ecommerceAddCartToStoreRequest.id(this.id);
            ecommerceAddCartToStoreRequest.customer(this.customer);
            ecommerceAddCartToStoreRequest.campaignId(this.campaignId);
            ecommerceAddCartToStoreRequest.checkoutUrl(this.checkoutUrl);
            ecommerceAddCartToStoreRequest.currencyCode(this.currencyCode);
            ecommerceAddCartToStoreRequest.orderTotal(this.orderTotal);
            ecommerceAddCartToStoreRequest.taxTotal(this.taxTotal);
            ecommerceAddCartToStoreRequest.lines(this.lines);
            return ecommerceAddCartToStoreRequest;
        }

        /**
         * Execute addCartToStore request
         * @return EcommerceAddCartToStoreResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddCartToStoreResponse execute() throws ApiException {
            EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest = buildBodyParams();
            ApiResponse<EcommerceAddCartToStoreResponse> localVarResp = addCartToStoreWithHttpInfo(storeId, ecommerceAddCartToStoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCartToStore request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddCartToStoreResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddCartToStoreResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest = buildBodyParams();
            return addCartToStoreWithHttpInfo(storeId, ecommerceAddCartToStoreRequest);
        }

        /**
         * Execute addCartToStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddCartToStoreResponse> _callback) throws ApiException {
            EcommerceAddCartToStoreRequest ecommerceAddCartToStoreRequest = buildBodyParams();
            return addCartToStoreAsync(storeId, ecommerceAddCartToStoreRequest, _callback);
        }
    }

    /**
     * Add cart
     * Add a new cart to a store.
     * @param storeId The store id. (required)
     * @param ecommerceAddCartToStoreRequest  (required)
     * @return AddCartToStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddCartToStoreRequestBuilder addCartToStore(String id, ECommerceCustomerProperty customer, String currencyCode, double orderTotal, List<ECommerceCartLineItem> lines, String storeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (customer == null) throw new IllegalArgumentException("\"customer\" is required but got null");
        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        
        if (lines == null) throw new IllegalArgumentException("\"lines\" is required but got null");
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new AddCartToStoreRequestBuilder(id, customer, currencyCode, orderTotal, lines, storeId);
    }
    private okhttp3.Call addCustomerToStoreCall(String storeId, EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddCustomerToStoreRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/customers"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomerToStoreValidateBeforeCall(String storeId, EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addCustomerToStore(Async)");
        }

        // verify the required parameter 'ecommerceAddCustomerToStoreRequest' is set
        if (ecommerceAddCustomerToStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddCustomerToStoreRequest' when calling addCustomerToStore(Async)");
        }

        return addCustomerToStoreCall(storeId, ecommerceAddCustomerToStoreRequest, _callback);

    }


    private ApiResponse<EcommerceAddCustomerToStoreResponse> addCustomerToStoreWithHttpInfo(String storeId, EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = addCustomerToStoreValidateBeforeCall(storeId, ecommerceAddCustomerToStoreRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddCustomerToStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCustomerToStoreAsync(String storeId, EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest, final ApiCallback<EcommerceAddCustomerToStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomerToStoreValidateBeforeCall(storeId, ecommerceAddCustomerToStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddCustomerToStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCustomerToStoreRequestBuilder {
        private final String id;
        private final String emailAddress;
        private final Boolean optInStatus;
        private final String storeId;
        private String company;
        private String firstName;
        private String lastName;
        private AddressProperty4 address;

        private AddCustomerToStoreRequestBuilder(String id, String emailAddress, Boolean optInStatus, String storeId) {
            this.id = id;
            this.emailAddress = emailAddress;
            this.optInStatus = optInStatus;
            this.storeId = storeId;
        }

        /**
         * Set company
         * @param company The customer&#39;s company. (optional)
         * @return AddCustomerToStoreRequestBuilder
         */
        public AddCustomerToStoreRequestBuilder company(String company) {
            this.company = company;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The customer&#39;s first name. (optional)
         * @return AddCustomerToStoreRequestBuilder
         */
        public AddCustomerToStoreRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The customer&#39;s last name. (optional)
         * @return AddCustomerToStoreRequestBuilder
         */
        public AddCustomerToStoreRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return AddCustomerToStoreRequestBuilder
         */
        public AddCustomerToStoreRequestBuilder address(AddressProperty4 address) {
            this.address = address;
            return this;
        }
        
        /**
         * Build call for addCustomerToStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest = buildBodyParams();
            return addCustomerToStoreCall(storeId, ecommerceAddCustomerToStoreRequest, _callback);
        }

        private EcommerceAddCustomerToStoreRequest buildBodyParams() {
            EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest = new EcommerceAddCustomerToStoreRequest();
            ecommerceAddCustomerToStoreRequest.id(this.id);
            ecommerceAddCustomerToStoreRequest.emailAddress(this.emailAddress);
            ecommerceAddCustomerToStoreRequest.optInStatus(this.optInStatus);
            ecommerceAddCustomerToStoreRequest.company(this.company);
            ecommerceAddCustomerToStoreRequest.firstName(this.firstName);
            ecommerceAddCustomerToStoreRequest.lastName(this.lastName);
            ecommerceAddCustomerToStoreRequest.address(this.address);
            return ecommerceAddCustomerToStoreRequest;
        }

        /**
         * Execute addCustomerToStore request
         * @return EcommerceAddCustomerToStoreResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddCustomerToStoreResponse execute() throws ApiException {
            EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest = buildBodyParams();
            ApiResponse<EcommerceAddCustomerToStoreResponse> localVarResp = addCustomerToStoreWithHttpInfo(storeId, ecommerceAddCustomerToStoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCustomerToStore request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddCustomerToStoreResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddCustomerToStoreResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest = buildBodyParams();
            return addCustomerToStoreWithHttpInfo(storeId, ecommerceAddCustomerToStoreRequest);
        }

        /**
         * Execute addCustomerToStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddCustomerToStoreResponse> _callback) throws ApiException {
            EcommerceAddCustomerToStoreRequest ecommerceAddCustomerToStoreRequest = buildBodyParams();
            return addCustomerToStoreAsync(storeId, ecommerceAddCustomerToStoreRequest, _callback);
        }
    }

    /**
     * Add customer
     * Add a new customer to a store.
     * @param storeId The store id. (required)
     * @param ecommerceAddCustomerToStoreRequest  (required)
     * @return AddCustomerToStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomerToStoreRequestBuilder addCustomerToStore(String id, String emailAddress, Boolean optInStatus, String storeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (optInStatus == null) throw new IllegalArgumentException("\"optInStatus\" is required but got null");
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new AddCustomerToStoreRequestBuilder(id, emailAddress, optInStatus, storeId);
    }
    private okhttp3.Call addOrUpdateCustomerCall(String storeId, String customerId, EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddOrUpdateCustomerRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/customers/{customer_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateCustomerValidateBeforeCall(String storeId, String customerId, EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addOrUpdateCustomer(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling addOrUpdateCustomer(Async)");
        }

        // verify the required parameter 'ecommerceAddOrUpdateCustomerRequest' is set
        if (ecommerceAddOrUpdateCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddOrUpdateCustomerRequest' when calling addOrUpdateCustomer(Async)");
        }

        return addOrUpdateCustomerCall(storeId, customerId, ecommerceAddOrUpdateCustomerRequest, _callback);

    }


    private ApiResponse<EcommerceAddOrUpdateCustomerResponse> addOrUpdateCustomerWithHttpInfo(String storeId, String customerId, EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateCustomerValidateBeforeCall(storeId, customerId, ecommerceAddOrUpdateCustomerRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddOrUpdateCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrUpdateCustomerAsync(String storeId, String customerId, EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest, final ApiCallback<EcommerceAddOrUpdateCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateCustomerValidateBeforeCall(storeId, customerId, ecommerceAddOrUpdateCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddOrUpdateCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrUpdateCustomerRequestBuilder {
        private final String id;
        private final String emailAddress;
        private final Boolean optInStatus;
        private final String storeId;
        private final String customerId;
        private String company;
        private String firstName;
        private String lastName;
        private AddressProperty6 address;

        private AddOrUpdateCustomerRequestBuilder(String id, String emailAddress, Boolean optInStatus, String storeId, String customerId) {
            this.id = id;
            this.emailAddress = emailAddress;
            this.optInStatus = optInStatus;
            this.storeId = storeId;
            this.customerId = customerId;
        }

        /**
         * Set company
         * @param company The customer&#39;s company. (optional)
         * @return AddOrUpdateCustomerRequestBuilder
         */
        public AddOrUpdateCustomerRequestBuilder company(String company) {
            this.company = company;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The customer&#39;s first name. (optional)
         * @return AddOrUpdateCustomerRequestBuilder
         */
        public AddOrUpdateCustomerRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The customer&#39;s last name. (optional)
         * @return AddOrUpdateCustomerRequestBuilder
         */
        public AddOrUpdateCustomerRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return AddOrUpdateCustomerRequestBuilder
         */
        public AddOrUpdateCustomerRequestBuilder address(AddressProperty6 address) {
            this.address = address;
            return this;
        }
        
        /**
         * Build call for addOrUpdateCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest = buildBodyParams();
            return addOrUpdateCustomerCall(storeId, customerId, ecommerceAddOrUpdateCustomerRequest, _callback);
        }

        private EcommerceAddOrUpdateCustomerRequest buildBodyParams() {
            EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest = new EcommerceAddOrUpdateCustomerRequest();
            ecommerceAddOrUpdateCustomerRequest.id(this.id);
            ecommerceAddOrUpdateCustomerRequest.emailAddress(this.emailAddress);
            ecommerceAddOrUpdateCustomerRequest.optInStatus(this.optInStatus);
            ecommerceAddOrUpdateCustomerRequest.company(this.company);
            ecommerceAddOrUpdateCustomerRequest.firstName(this.firstName);
            ecommerceAddOrUpdateCustomerRequest.lastName(this.lastName);
            ecommerceAddOrUpdateCustomerRequest.address(this.address);
            return ecommerceAddOrUpdateCustomerRequest;
        }

        /**
         * Execute addOrUpdateCustomer request
         * @return EcommerceAddOrUpdateCustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddOrUpdateCustomerResponse execute() throws ApiException {
            EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest = buildBodyParams();
            ApiResponse<EcommerceAddOrUpdateCustomerResponse> localVarResp = addOrUpdateCustomerWithHttpInfo(storeId, customerId, ecommerceAddOrUpdateCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrUpdateCustomer request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddOrUpdateCustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddOrUpdateCustomerResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest = buildBodyParams();
            return addOrUpdateCustomerWithHttpInfo(storeId, customerId, ecommerceAddOrUpdateCustomerRequest);
        }

        /**
         * Execute addOrUpdateCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddOrUpdateCustomerResponse> _callback) throws ApiException {
            EcommerceAddOrUpdateCustomerRequest ecommerceAddOrUpdateCustomerRequest = buildBodyParams();
            return addOrUpdateCustomerAsync(storeId, customerId, ecommerceAddOrUpdateCustomerRequest, _callback);
        }
    }

    /**
     * Add or update customer
     * Add or update a customer.
     * @param storeId The store id. (required)
     * @param customerId The id for the customer of a store. (required)
     * @param ecommerceAddOrUpdateCustomerRequest  (required)
     * @return AddOrUpdateCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateCustomerRequestBuilder addOrUpdateCustomer(String id, String emailAddress, Boolean optInStatus, String storeId, String customerId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (optInStatus == null) throw new IllegalArgumentException("\"optInStatus\" is required but got null");
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new AddOrUpdateCustomerRequestBuilder(id, emailAddress, optInStatus, storeId, customerId);
    }
    private okhttp3.Call addOrUpdateProductVariantCall(String storeId, String productId, String variantId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddProductVariantRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateProductVariantValidateBeforeCall(String storeId, String productId, String variantId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addOrUpdateProductVariant(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling addOrUpdateProductVariant(Async)");
        }

        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling addOrUpdateProductVariant(Async)");
        }

        // verify the required parameter 'ecommerceAddProductVariantRequest' is set
        if (ecommerceAddProductVariantRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddProductVariantRequest' when calling addOrUpdateProductVariant(Async)");
        }

        return addOrUpdateProductVariantCall(storeId, productId, variantId, ecommerceAddProductVariantRequest, _callback);

    }


    private ApiResponse<EcommerceAddOrUpdateProductVariantResponse> addOrUpdateProductVariantWithHttpInfo(String storeId, String productId, String variantId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateProductVariantValidateBeforeCall(storeId, productId, variantId, ecommerceAddProductVariantRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddOrUpdateProductVariantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrUpdateProductVariantAsync(String storeId, String productId, String variantId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest, final ApiCallback<EcommerceAddOrUpdateProductVariantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateProductVariantValidateBeforeCall(storeId, productId, variantId, ecommerceAddProductVariantRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddOrUpdateProductVariantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrUpdateProductVariantRequestBuilder {
        private final String title;
        private final String id;
        private final String storeId;
        private final String productId;
        private final String variantId;
        private String url;
        private String sku;
        private Double price;
        private Integer inventoryQuantity;
        private String imageUrl;
        private String backorders;
        private String visibility;

        private AddOrUpdateProductVariantRequestBuilder(String title, String id, String storeId, String productId, String variantId) {
            this.title = title;
            this.id = id;
            this.storeId = storeId;
            this.productId = productId;
            this.variantId = variantId;
        }

        /**
         * Set url
         * @param url The URL for a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set sku
         * @param sku The stock keeping unit (SKU) of a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set inventoryQuantity
         * @param inventoryQuantity The inventory quantity of a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder inventoryQuantity(Integer inventoryQuantity) {
            this.inventoryQuantity = inventoryQuantity;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl The image URL for a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set backorders
         * @param backorders The backorders of a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder backorders(String backorders) {
            this.backorders = backorders;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The visibility of a product variant. (optional)
         * @return AddOrUpdateProductVariantRequestBuilder
         */
        public AddOrUpdateProductVariantRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for addOrUpdateProductVariant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            return addOrUpdateProductVariantCall(storeId, productId, variantId, ecommerceAddProductVariantRequest, _callback);
        }

        private EcommerceAddProductVariantRequest buildBodyParams() {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = new EcommerceAddProductVariantRequest();
            ecommerceAddProductVariantRequest.title(this.title);
            ecommerceAddProductVariantRequest.id(this.id);
            ecommerceAddProductVariantRequest.url(this.url);
            ecommerceAddProductVariantRequest.sku(this.sku);
            ecommerceAddProductVariantRequest.price(this.price);
            ecommerceAddProductVariantRequest.inventoryQuantity(this.inventoryQuantity);
            ecommerceAddProductVariantRequest.imageUrl(this.imageUrl);
            ecommerceAddProductVariantRequest.backorders(this.backorders);
            ecommerceAddProductVariantRequest.visibility(this.visibility);
            return ecommerceAddProductVariantRequest;
        }

        /**
         * Execute addOrUpdateProductVariant request
         * @return EcommerceAddOrUpdateProductVariantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddOrUpdateProductVariantResponse execute() throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            ApiResponse<EcommerceAddOrUpdateProductVariantResponse> localVarResp = addOrUpdateProductVariantWithHttpInfo(storeId, productId, variantId, ecommerceAddProductVariantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrUpdateProductVariant request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddOrUpdateProductVariantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddOrUpdateProductVariantResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            return addOrUpdateProductVariantWithHttpInfo(storeId, productId, variantId, ecommerceAddProductVariantRequest);
        }

        /**
         * Execute addOrUpdateProductVariant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddOrUpdateProductVariantResponse> _callback) throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            return addOrUpdateProductVariantAsync(storeId, productId, variantId, ecommerceAddProductVariantRequest, _callback);
        }
    }

    /**
     * Add or update product variant
     * Add or update a product variant.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param variantId The id for the product variant. (required)
     * @param ecommerceAddProductVariantRequest  (required)
     * @return AddOrUpdateProductVariantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateProductVariantRequestBuilder addOrUpdateProductVariant(String title, String id, String storeId, String productId, String variantId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (variantId == null) throw new IllegalArgumentException("\"variantId\" is required but got null");
            

        return new AddOrUpdateProductVariantRequestBuilder(title, id, storeId, productId, variantId);
    }
    private okhttp3.Call addOrderLineItemCall(String storeId, String orderId, EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddOrderLineItemRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}/lines"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrderLineItemValidateBeforeCall(String storeId, String orderId, EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addOrderLineItem(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling addOrderLineItem(Async)");
        }

        // verify the required parameter 'ecommerceAddOrderLineItemRequest' is set
        if (ecommerceAddOrderLineItemRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddOrderLineItemRequest' when calling addOrderLineItem(Async)");
        }

        return addOrderLineItemCall(storeId, orderId, ecommerceAddOrderLineItemRequest, _callback);

    }


    private ApiResponse<EcommerceAddOrderLineItemResponse> addOrderLineItemWithHttpInfo(String storeId, String orderId, EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addOrderLineItemValidateBeforeCall(storeId, orderId, ecommerceAddOrderLineItemRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddOrderLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrderLineItemAsync(String storeId, String orderId, EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest, final ApiCallback<EcommerceAddOrderLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrderLineItemValidateBeforeCall(storeId, orderId, ecommerceAddOrderLineItemRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddOrderLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrderLineItemRequestBuilder {
        private final String id;
        private final String productId;
        private final String productVariantId;
        private final Integer quantity;
        private final Double price;
        private final String storeId;
        private final String orderId;
        private Double discount;

        private AddOrderLineItemRequestBuilder(String id, String productId, String productVariantId, Integer quantity, double price, String storeId, String orderId) {
            this.id = id;
            this.productId = productId;
            this.productVariantId = productVariantId;
            this.quantity = quantity;
            this.price = price;
            this.storeId = storeId;
            this.orderId = orderId;
        }

        /**
         * Set discount
         * @param discount The total discount amount applied to this line item. (optional)
         * @return AddOrderLineItemRequestBuilder
         */
        public AddOrderLineItemRequestBuilder discount(Double discount) {
            this.discount = discount;
            return this;
        }
        
        /**
         * Build call for addOrderLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest = buildBodyParams();
            return addOrderLineItemCall(storeId, orderId, ecommerceAddOrderLineItemRequest, _callback);
        }

        private EcommerceAddOrderLineItemRequest buildBodyParams() {
            EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest = new EcommerceAddOrderLineItemRequest();
            ecommerceAddOrderLineItemRequest.id(this.id);
            ecommerceAddOrderLineItemRequest.productId(this.productId);
            ecommerceAddOrderLineItemRequest.productVariantId(this.productVariantId);
            ecommerceAddOrderLineItemRequest.quantity(this.quantity);
            ecommerceAddOrderLineItemRequest.price(this.price);
            ecommerceAddOrderLineItemRequest.discount(this.discount);
            return ecommerceAddOrderLineItemRequest;
        }

        /**
         * Execute addOrderLineItem request
         * @return EcommerceAddOrderLineItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddOrderLineItemResponse execute() throws ApiException {
            EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest = buildBodyParams();
            ApiResponse<EcommerceAddOrderLineItemResponse> localVarResp = addOrderLineItemWithHttpInfo(storeId, orderId, ecommerceAddOrderLineItemRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrderLineItem request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddOrderLineItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddOrderLineItemResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest = buildBodyParams();
            return addOrderLineItemWithHttpInfo(storeId, orderId, ecommerceAddOrderLineItemRequest);
        }

        /**
         * Execute addOrderLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddOrderLineItemResponse> _callback) throws ApiException {
            EcommerceAddOrderLineItemRequest ecommerceAddOrderLineItemRequest = buildBodyParams();
            return addOrderLineItemAsync(storeId, orderId, ecommerceAddOrderLineItemRequest, _callback);
        }
    }

    /**
     * Add order line item
     * Add a new line item to an existing order.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @param ecommerceAddOrderLineItemRequest  (required)
     * @return AddOrderLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddOrderLineItemRequestBuilder addOrderLineItem(String id, String productId, String productVariantId, Integer quantity, double price, String storeId, String orderId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (productVariantId == null) throw new IllegalArgumentException("\"productVariantId\" is required but got null");
            

        if (quantity == null) throw new IllegalArgumentException("\"quantity\" is required but got null");
        
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new AddOrderLineItemRequestBuilder(id, productId, productVariantId, quantity, price, storeId, orderId);
    }
    private okhttp3.Call addOrderToStoreCall(String storeId, EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddOrderToStoreRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrderToStoreValidateBeforeCall(String storeId, EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addOrderToStore(Async)");
        }

        // verify the required parameter 'ecommerceAddOrderToStoreRequest' is set
        if (ecommerceAddOrderToStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddOrderToStoreRequest' when calling addOrderToStore(Async)");
        }

        return addOrderToStoreCall(storeId, ecommerceAddOrderToStoreRequest, _callback);

    }


    private ApiResponse<EcommerceAddOrderToStoreResponse> addOrderToStoreWithHttpInfo(String storeId, EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = addOrderToStoreValidateBeforeCall(storeId, ecommerceAddOrderToStoreRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddOrderToStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrderToStoreAsync(String storeId, EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest, final ApiCallback<EcommerceAddOrderToStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrderToStoreValidateBeforeCall(storeId, ecommerceAddOrderToStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddOrderToStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrderToStoreRequestBuilder {
        private final String id;
        private final ECommerceCustomerProperty2 customer;
        private final String currencyCode;
        private final Double orderTotal;
        private final List<ECommerceOrderLineItem> lines;
        private final String storeId;
        private String campaignId;
        private String landingSite;
        private String financialStatus;
        private String fulfillmentStatus;
        private String orderUrl;
        private Double discountTotal;
        private Double taxTotal;
        private Double shippingTotal;
        private String trackingCode;
        private OffsetDateTime processedAtForeign;
        private OffsetDateTime cancelledAtForeign;
        private OffsetDateTime updatedAtForeign;
        private ShippingAddressProperty shippingAddress;
        private BillingAddressProperty billingAddress;
        private List<PromosPropertyInner> promos;
        private OutreachProperty outreach;
        private String trackingNumber;
        private String trackingCarrier;
        private String trackingUrl;

        private AddOrderToStoreRequestBuilder(String id, ECommerceCustomerProperty2 customer, String currencyCode, double orderTotal, List<ECommerceOrderLineItem> lines, String storeId) {
            this.id = id;
            this.customer = customer;
            this.currencyCode = currencyCode;
            this.orderTotal = orderTotal;
            this.lines = lines;
            this.storeId = storeId;
        }

        /**
         * Set campaignId
         * @param campaignId A string that uniquely identifies the campaign for an order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set landingSite
         * @param landingSite The URL for the page where the buyer landed when entering the shop. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder landingSite(String landingSite) {
            this.landingSite = landingSite;
            return this;
        }
        
        /**
         * Set financialStatus
         * @param financialStatus The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder financialStatus(String financialStatus) {
            this.financialStatus = financialStatus;
            return this;
        }
        
        /**
         * Set fulfillmentStatus
         * @param fulfillmentStatus The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder fulfillmentStatus(String fulfillmentStatus) {
            this.fulfillmentStatus = fulfillmentStatus;
            return this;
        }
        
        /**
         * Set orderUrl
         * @param orderUrl The URL for the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder orderUrl(String orderUrl) {
            this.orderUrl = orderUrl;
            return this;
        }
        
        /**
         * Set discountTotal
         * @param discountTotal The total amount of the discounts to be applied to the price of the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder discountTotal(Double discountTotal) {
            this.discountTotal = discountTotal;
            return this;
        }
        
        /**
         * Set taxTotal
         * @param taxTotal The tax total for the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder taxTotal(Double taxTotal) {
            this.taxTotal = taxTotal;
            return this;
        }
        
        /**
         * Set shippingTotal
         * @param shippingTotal The shipping total for the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder shippingTotal(Double shippingTotal) {
            this.shippingTotal = shippingTotal;
            return this;
        }
        
        /**
         * Set trackingCode
         * @param trackingCode The Mailchimp tracking code for the order. Uses the &#39;mc_tc&#39; parameter in E-Commerce tracking URLs. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder trackingCode(String trackingCode) {
            this.trackingCode = trackingCode;
            return this;
        }
        
        /**
         * Set processedAtForeign
         * @param processedAtForeign The date and time the order was processed in ISO 8601 format. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder processedAtForeign(OffsetDateTime processedAtForeign) {
            this.processedAtForeign = processedAtForeign;
            return this;
        }
        
        /**
         * Set cancelledAtForeign
         * @param cancelledAtForeign The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder cancelledAtForeign(OffsetDateTime cancelledAtForeign) {
            this.cancelledAtForeign = cancelledAtForeign;
            return this;
        }
        
        /**
         * Set updatedAtForeign
         * @param updatedAtForeign The date and time the order was updated in ISO 8601 format. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder updatedAtForeign(OffsetDateTime updatedAtForeign) {
            this.updatedAtForeign = updatedAtForeign;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder shippingAddress(ShippingAddressProperty shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder billingAddress(BillingAddressProperty billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set promos
         * @param promos The promo codes applied on the order (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder promos(List<PromosPropertyInner> promos) {
            this.promos = promos;
            return this;
        }
        
        /**
         * Set outreach
         * @param outreach  (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder outreach(OutreachProperty outreach) {
            this.outreach = outreach;
            return this;
        }
        
        /**
         * Set trackingNumber
         * @param trackingNumber The tracking number associated with the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder trackingNumber(String trackingNumber) {
            this.trackingNumber = trackingNumber;
            return this;
        }
        
        /**
         * Set trackingCarrier
         * @param trackingCarrier The tracking carrier associated with the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder trackingCarrier(String trackingCarrier) {
            this.trackingCarrier = trackingCarrier;
            return this;
        }
        
        /**
         * Set trackingUrl
         * @param trackingUrl The tracking URL associated with the order. (optional)
         * @return AddOrderToStoreRequestBuilder
         */
        public AddOrderToStoreRequestBuilder trackingUrl(String trackingUrl) {
            this.trackingUrl = trackingUrl;
            return this;
        }
        
        /**
         * Build call for addOrderToStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest = buildBodyParams();
            return addOrderToStoreCall(storeId, ecommerceAddOrderToStoreRequest, _callback);
        }

        private EcommerceAddOrderToStoreRequest buildBodyParams() {
            EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest = new EcommerceAddOrderToStoreRequest();
            ecommerceAddOrderToStoreRequest.id(this.id);
            ecommerceAddOrderToStoreRequest.customer(this.customer);
            ecommerceAddOrderToStoreRequest.campaignId(this.campaignId);
            ecommerceAddOrderToStoreRequest.landingSite(this.landingSite);
            ecommerceAddOrderToStoreRequest.financialStatus(this.financialStatus);
            ecommerceAddOrderToStoreRequest.fulfillmentStatus(this.fulfillmentStatus);
            ecommerceAddOrderToStoreRequest.currencyCode(this.currencyCode);
            ecommerceAddOrderToStoreRequest.orderTotal(this.orderTotal);
            ecommerceAddOrderToStoreRequest.orderUrl(this.orderUrl);
            ecommerceAddOrderToStoreRequest.discountTotal(this.discountTotal);
            ecommerceAddOrderToStoreRequest.taxTotal(this.taxTotal);
            ecommerceAddOrderToStoreRequest.shippingTotal(this.shippingTotal);
            if (this.trackingCode != null)
            ecommerceAddOrderToStoreRequest.trackingCode(EcommerceAddOrderToStoreRequest.TrackingCodeEnum.fromValue(this.trackingCode));
            ecommerceAddOrderToStoreRequest.processedAtForeign(this.processedAtForeign);
            ecommerceAddOrderToStoreRequest.cancelledAtForeign(this.cancelledAtForeign);
            ecommerceAddOrderToStoreRequest.updatedAtForeign(this.updatedAtForeign);
            ecommerceAddOrderToStoreRequest.shippingAddress(this.shippingAddress);
            ecommerceAddOrderToStoreRequest.billingAddress(this.billingAddress);
            ecommerceAddOrderToStoreRequest.promos(this.promos);
            ecommerceAddOrderToStoreRequest.lines(this.lines);
            ecommerceAddOrderToStoreRequest.outreach(this.outreach);
            ecommerceAddOrderToStoreRequest.trackingNumber(this.trackingNumber);
            ecommerceAddOrderToStoreRequest.trackingCarrier(this.trackingCarrier);
            ecommerceAddOrderToStoreRequest.trackingUrl(this.trackingUrl);
            return ecommerceAddOrderToStoreRequest;
        }

        /**
         * Execute addOrderToStore request
         * @return EcommerceAddOrderToStoreResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddOrderToStoreResponse execute() throws ApiException {
            EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest = buildBodyParams();
            ApiResponse<EcommerceAddOrderToStoreResponse> localVarResp = addOrderToStoreWithHttpInfo(storeId, ecommerceAddOrderToStoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrderToStore request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddOrderToStoreResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddOrderToStoreResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest = buildBodyParams();
            return addOrderToStoreWithHttpInfo(storeId, ecommerceAddOrderToStoreRequest);
        }

        /**
         * Execute addOrderToStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddOrderToStoreResponse> _callback) throws ApiException {
            EcommerceAddOrderToStoreRequest ecommerceAddOrderToStoreRequest = buildBodyParams();
            return addOrderToStoreAsync(storeId, ecommerceAddOrderToStoreRequest, _callback);
        }
    }

    /**
     * Add order
     * Add a new order to a store.
     * @param storeId The store id. (required)
     * @param ecommerceAddOrderToStoreRequest  (required)
     * @return AddOrderToStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddOrderToStoreRequestBuilder addOrderToStore(String id, ECommerceCustomerProperty2 customer, String currencyCode, double orderTotal, List<ECommerceOrderLineItem> lines, String storeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (customer == null) throw new IllegalArgumentException("\"customer\" is required but got null");
        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        
        if (lines == null) throw new IllegalArgumentException("\"lines\" is required but got null");
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new AddOrderToStoreRequestBuilder(id, customer, currencyCode, orderTotal, lines, storeId);
    }
    private okhttp3.Call addProductImageCall(String storeId, String productId, EcommerceAddProductImageRequest ecommerceAddProductImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddProductImageRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/images"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductImageValidateBeforeCall(String storeId, String productId, EcommerceAddProductImageRequest ecommerceAddProductImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addProductImage(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling addProductImage(Async)");
        }

        // verify the required parameter 'ecommerceAddProductImageRequest' is set
        if (ecommerceAddProductImageRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddProductImageRequest' when calling addProductImage(Async)");
        }

        return addProductImageCall(storeId, productId, ecommerceAddProductImageRequest, _callback);

    }


    private ApiResponse<EcommerceAddProductImageResponse> addProductImageWithHttpInfo(String storeId, String productId, EcommerceAddProductImageRequest ecommerceAddProductImageRequest) throws ApiException {
        okhttp3.Call localVarCall = addProductImageValidateBeforeCall(storeId, productId, ecommerceAddProductImageRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddProductImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addProductImageAsync(String storeId, String productId, EcommerceAddProductImageRequest ecommerceAddProductImageRequest, final ApiCallback<EcommerceAddProductImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductImageValidateBeforeCall(storeId, productId, ecommerceAddProductImageRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddProductImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddProductImageRequestBuilder {
        private final String id;
        private final String url;
        private final String storeId;
        private final String productId;
        private List<String> variantIds;

        private AddProductImageRequestBuilder(String id, String url, String storeId, String productId) {
            this.id = id;
            this.url = url;
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Set variantIds
         * @param variantIds The list of product variants using the image. (optional)
         * @return AddProductImageRequestBuilder
         */
        public AddProductImageRequestBuilder variantIds(List<String> variantIds) {
            this.variantIds = variantIds;
            return this;
        }
        
        /**
         * Build call for addProductImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddProductImageRequest ecommerceAddProductImageRequest = buildBodyParams();
            return addProductImageCall(storeId, productId, ecommerceAddProductImageRequest, _callback);
        }

        private EcommerceAddProductImageRequest buildBodyParams() {
            EcommerceAddProductImageRequest ecommerceAddProductImageRequest = new EcommerceAddProductImageRequest();
            ecommerceAddProductImageRequest.id(this.id);
            ecommerceAddProductImageRequest.url(this.url);
            ecommerceAddProductImageRequest.variantIds(this.variantIds);
            return ecommerceAddProductImageRequest;
        }

        /**
         * Execute addProductImage request
         * @return EcommerceAddProductImageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddProductImageResponse execute() throws ApiException {
            EcommerceAddProductImageRequest ecommerceAddProductImageRequest = buildBodyParams();
            ApiResponse<EcommerceAddProductImageResponse> localVarResp = addProductImageWithHttpInfo(storeId, productId, ecommerceAddProductImageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addProductImage request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddProductImageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddProductImageResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddProductImageRequest ecommerceAddProductImageRequest = buildBodyParams();
            return addProductImageWithHttpInfo(storeId, productId, ecommerceAddProductImageRequest);
        }

        /**
         * Execute addProductImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddProductImageResponse> _callback) throws ApiException {
            EcommerceAddProductImageRequest ecommerceAddProductImageRequest = buildBodyParams();
            return addProductImageAsync(storeId, productId, ecommerceAddProductImageRequest, _callback);
        }
    }

    /**
     * Add product image
     * Add a new image to the product.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param ecommerceAddProductImageRequest  (required)
     * @return AddProductImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddProductImageRequestBuilder addProductImage(String id, String url, String storeId, String productId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new AddProductImageRequestBuilder(id, url, storeId, productId);
    }
    private okhttp3.Call addProductToStoreCall(String storeId, EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddProductToStoreRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductToStoreValidateBeforeCall(String storeId, EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addProductToStore(Async)");
        }

        // verify the required parameter 'ecommerceAddProductToStoreRequest' is set
        if (ecommerceAddProductToStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddProductToStoreRequest' when calling addProductToStore(Async)");
        }

        return addProductToStoreCall(storeId, ecommerceAddProductToStoreRequest, _callback);

    }


    private ApiResponse<EcommerceAddProductToStoreResponse> addProductToStoreWithHttpInfo(String storeId, EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = addProductToStoreValidateBeforeCall(storeId, ecommerceAddProductToStoreRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddProductToStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addProductToStoreAsync(String storeId, EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest, final ApiCallback<EcommerceAddProductToStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductToStoreValidateBeforeCall(storeId, ecommerceAddProductToStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddProductToStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddProductToStoreRequestBuilder {
        private final String title;
        private final String id;
        private final List<ECommerceProductVariant> variants;
        private final String storeId;
        private String description;
        private String handle;
        private String url;
        private String type;
        private String vendor;
        private String imageUrl;
        private List<ECommerceProductImage> images;
        private OffsetDateTime publishedAtForeign;

        private AddProductToStoreRequestBuilder(String title, String id, List<ECommerceProductVariant> variants, String storeId) {
            this.title = title;
            this.id = id;
            this.variants = variants;
            this.storeId = storeId;
        }

        /**
         * Set description
         * @param description The description of a product. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set handle
         * @param handle The handle of a product. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL for a product. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of product. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set vendor
         * @param vendor The vendor for a product. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder vendor(String vendor) {
            this.vendor = vendor;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl The image URL for a product. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set images
         * @param images An array of the product&#39;s images. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder images(List<ECommerceProductImage> images) {
            this.images = images;
            return this;
        }
        
        /**
         * Set publishedAtForeign
         * @param publishedAtForeign The date and time the product was published. (optional)
         * @return AddProductToStoreRequestBuilder
         */
        public AddProductToStoreRequestBuilder publishedAtForeign(OffsetDateTime publishedAtForeign) {
            this.publishedAtForeign = publishedAtForeign;
            return this;
        }
        
        /**
         * Build call for addProductToStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest = buildBodyParams();
            return addProductToStoreCall(storeId, ecommerceAddProductToStoreRequest, _callback);
        }

        private EcommerceAddProductToStoreRequest buildBodyParams() {
            EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest = new EcommerceAddProductToStoreRequest();
            ecommerceAddProductToStoreRequest.title(this.title);
            ecommerceAddProductToStoreRequest.description(this.description);
            ecommerceAddProductToStoreRequest.id(this.id);
            ecommerceAddProductToStoreRequest.handle(this.handle);
            ecommerceAddProductToStoreRequest.url(this.url);
            ecommerceAddProductToStoreRequest.type(this.type);
            ecommerceAddProductToStoreRequest.vendor(this.vendor);
            ecommerceAddProductToStoreRequest.imageUrl(this.imageUrl);
            ecommerceAddProductToStoreRequest.variants(this.variants);
            ecommerceAddProductToStoreRequest.images(this.images);
            ecommerceAddProductToStoreRequest.publishedAtForeign(this.publishedAtForeign);
            return ecommerceAddProductToStoreRequest;
        }

        /**
         * Execute addProductToStore request
         * @return EcommerceAddProductToStoreResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddProductToStoreResponse execute() throws ApiException {
            EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest = buildBodyParams();
            ApiResponse<EcommerceAddProductToStoreResponse> localVarResp = addProductToStoreWithHttpInfo(storeId, ecommerceAddProductToStoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addProductToStore request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddProductToStoreResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddProductToStoreResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest = buildBodyParams();
            return addProductToStoreWithHttpInfo(storeId, ecommerceAddProductToStoreRequest);
        }

        /**
         * Execute addProductToStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddProductToStoreResponse> _callback) throws ApiException {
            EcommerceAddProductToStoreRequest ecommerceAddProductToStoreRequest = buildBodyParams();
            return addProductToStoreAsync(storeId, ecommerceAddProductToStoreRequest, _callback);
        }
    }

    /**
     * Add product
     * Add a new product to a store.
     * @param storeId The store id. (required)
     * @param ecommerceAddProductToStoreRequest  (required)
     * @return AddProductToStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddProductToStoreRequestBuilder addProductToStore(String title, String id, List<ECommerceProductVariant> variants, String storeId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (variants == null) throw new IllegalArgumentException("\"variants\" is required but got null");
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new AddProductToStoreRequestBuilder(title, id, variants, storeId);
    }
    private okhttp3.Call addProductVariantCall(String storeId, String productId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddProductVariantRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/variants"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductVariantValidateBeforeCall(String storeId, String productId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addProductVariant(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling addProductVariant(Async)");
        }

        // verify the required parameter 'ecommerceAddProductVariantRequest' is set
        if (ecommerceAddProductVariantRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddProductVariantRequest' when calling addProductVariant(Async)");
        }

        return addProductVariantCall(storeId, productId, ecommerceAddProductVariantRequest, _callback);

    }


    private ApiResponse<EcommerceAddProductVariantResponse> addProductVariantWithHttpInfo(String storeId, String productId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest) throws ApiException {
        okhttp3.Call localVarCall = addProductVariantValidateBeforeCall(storeId, productId, ecommerceAddProductVariantRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddProductVariantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addProductVariantAsync(String storeId, String productId, EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest, final ApiCallback<EcommerceAddProductVariantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductVariantValidateBeforeCall(storeId, productId, ecommerceAddProductVariantRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddProductVariantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddProductVariantRequestBuilder {
        private final String title;
        private final String id;
        private final String storeId;
        private final String productId;
        private String url;
        private String sku;
        private Double price;
        private Integer inventoryQuantity;
        private String imageUrl;
        private String backorders;
        private String visibility;

        private AddProductVariantRequestBuilder(String title, String id, String storeId, String productId) {
            this.title = title;
            this.id = id;
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Set url
         * @param url The URL for a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set sku
         * @param sku The stock keeping unit (SKU) of a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set inventoryQuantity
         * @param inventoryQuantity The inventory quantity of a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder inventoryQuantity(Integer inventoryQuantity) {
            this.inventoryQuantity = inventoryQuantity;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl The image URL for a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set backorders
         * @param backorders The backorders of a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder backorders(String backorders) {
            this.backorders = backorders;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The visibility of a product variant. (optional)
         * @return AddProductVariantRequestBuilder
         */
        public AddProductVariantRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for addProductVariant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            return addProductVariantCall(storeId, productId, ecommerceAddProductVariantRequest, _callback);
        }

        private EcommerceAddProductVariantRequest buildBodyParams() {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = new EcommerceAddProductVariantRequest();
            ecommerceAddProductVariantRequest.title(this.title);
            ecommerceAddProductVariantRequest.id(this.id);
            ecommerceAddProductVariantRequest.url(this.url);
            ecommerceAddProductVariantRequest.sku(this.sku);
            ecommerceAddProductVariantRequest.price(this.price);
            ecommerceAddProductVariantRequest.inventoryQuantity(this.inventoryQuantity);
            ecommerceAddProductVariantRequest.imageUrl(this.imageUrl);
            ecommerceAddProductVariantRequest.backorders(this.backorders);
            ecommerceAddProductVariantRequest.visibility(this.visibility);
            return ecommerceAddProductVariantRequest;
        }

        /**
         * Execute addProductVariant request
         * @return EcommerceAddProductVariantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddProductVariantResponse execute() throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            ApiResponse<EcommerceAddProductVariantResponse> localVarResp = addProductVariantWithHttpInfo(storeId, productId, ecommerceAddProductVariantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addProductVariant request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddProductVariantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddProductVariantResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            return addProductVariantWithHttpInfo(storeId, productId, ecommerceAddProductVariantRequest);
        }

        /**
         * Execute addProductVariant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddProductVariantResponse> _callback) throws ApiException {
            EcommerceAddProductVariantRequest ecommerceAddProductVariantRequest = buildBodyParams();
            return addProductVariantAsync(storeId, productId, ecommerceAddProductVariantRequest, _callback);
        }
    }

    /**
     * Add product variant
     * Add a new variant to the product.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param ecommerceAddProductVariantRequest  (required)
     * @return AddProductVariantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddProductVariantRequestBuilder addProductVariant(String title, String id, String storeId, String productId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new AddProductVariantRequestBuilder(title, id, storeId, productId);
    }
    private okhttp3.Call addPromoCodeCall(String storeId, String promoRuleId, EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddPromoCodeRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPromoCodeValidateBeforeCall(String storeId, String promoRuleId, EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addPromoCode(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling addPromoCode(Async)");
        }

        // verify the required parameter 'ecommerceAddPromoCodeRequest' is set
        if (ecommerceAddPromoCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddPromoCodeRequest' when calling addPromoCode(Async)");
        }

        return addPromoCodeCall(storeId, promoRuleId, ecommerceAddPromoCodeRequest, _callback);

    }


    private ApiResponse<EcommerceAddPromoCodeResponse> addPromoCodeWithHttpInfo(String storeId, String promoRuleId, EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest) throws ApiException {
        okhttp3.Call localVarCall = addPromoCodeValidateBeforeCall(storeId, promoRuleId, ecommerceAddPromoCodeRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddPromoCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPromoCodeAsync(String storeId, String promoRuleId, EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest, final ApiCallback<EcommerceAddPromoCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPromoCodeValidateBeforeCall(storeId, promoRuleId, ecommerceAddPromoCodeRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddPromoCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPromoCodeRequestBuilder {
        private final String id;
        private final String code;
        private final String redemptionUrl;
        private final String storeId;
        private final String promoRuleId;
        private Integer usageCount;
        private Boolean enabled;
        private OffsetDateTime createdAtForeign;
        private OffsetDateTime updatedAtForeign;

        private AddPromoCodeRequestBuilder(String id, String code, String redemptionUrl, String storeId, String promoRuleId) {
            this.id = id;
            this.code = code;
            this.redemptionUrl = redemptionUrl;
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
        }

        /**
         * Set usageCount
         * @param usageCount Number of times promo code has been used. (optional)
         * @return AddPromoCodeRequestBuilder
         */
        public AddPromoCodeRequestBuilder usageCount(Integer usageCount) {
            this.usageCount = usageCount;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Whether the promo code is currently enabled. (optional)
         * @return AddPromoCodeRequestBuilder
         */
        public AddPromoCodeRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set createdAtForeign
         * @param createdAtForeign The date and time the promotion was created in ISO 8601 format. (optional)
         * @return AddPromoCodeRequestBuilder
         */
        public AddPromoCodeRequestBuilder createdAtForeign(OffsetDateTime createdAtForeign) {
            this.createdAtForeign = createdAtForeign;
            return this;
        }
        
        /**
         * Set updatedAtForeign
         * @param updatedAtForeign The date and time the promotion was updated in ISO 8601 format. (optional)
         * @return AddPromoCodeRequestBuilder
         */
        public AddPromoCodeRequestBuilder updatedAtForeign(OffsetDateTime updatedAtForeign) {
            this.updatedAtForeign = updatedAtForeign;
            return this;
        }
        
        /**
         * Build call for addPromoCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest = buildBodyParams();
            return addPromoCodeCall(storeId, promoRuleId, ecommerceAddPromoCodeRequest, _callback);
        }

        private EcommerceAddPromoCodeRequest buildBodyParams() {
            EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest = new EcommerceAddPromoCodeRequest();
            ecommerceAddPromoCodeRequest.id(this.id);
            ecommerceAddPromoCodeRequest.code(this.code);
            ecommerceAddPromoCodeRequest.redemptionUrl(this.redemptionUrl);
            ecommerceAddPromoCodeRequest.usageCount(this.usageCount);
            ecommerceAddPromoCodeRequest.enabled(this.enabled);
            ecommerceAddPromoCodeRequest.createdAtForeign(this.createdAtForeign);
            ecommerceAddPromoCodeRequest.updatedAtForeign(this.updatedAtForeign);
            return ecommerceAddPromoCodeRequest;
        }

        /**
         * Execute addPromoCode request
         * @return EcommerceAddPromoCodeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddPromoCodeResponse execute() throws ApiException {
            EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest = buildBodyParams();
            ApiResponse<EcommerceAddPromoCodeResponse> localVarResp = addPromoCodeWithHttpInfo(storeId, promoRuleId, ecommerceAddPromoCodeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPromoCode request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddPromoCodeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddPromoCodeResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest = buildBodyParams();
            return addPromoCodeWithHttpInfo(storeId, promoRuleId, ecommerceAddPromoCodeRequest);
        }

        /**
         * Execute addPromoCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddPromoCodeResponse> _callback) throws ApiException {
            EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest = buildBodyParams();
            return addPromoCodeAsync(storeId, promoRuleId, ecommerceAddPromoCodeRequest, _callback);
        }
    }

    /**
     * Add promo code
     * Add a new promo code to a store.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @param ecommerceAddPromoCodeRequest  (required)
     * @return AddPromoCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddPromoCodeRequestBuilder addPromoCode(String id, String code, String redemptionUrl, String storeId, String promoRuleId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (redemptionUrl == null) throw new IllegalArgumentException("\"redemptionUrl\" is required but got null");
            

        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        return new AddPromoCodeRequestBuilder(id, code, redemptionUrl, storeId, promoRuleId);
    }
    private okhttp3.Call addPromoRuleCall(String storeId, EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddPromoRuleRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPromoRuleValidateBeforeCall(String storeId, EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling addPromoRule(Async)");
        }

        // verify the required parameter 'ecommerceAddPromoRuleRequest' is set
        if (ecommerceAddPromoRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddPromoRuleRequest' when calling addPromoRule(Async)");
        }

        return addPromoRuleCall(storeId, ecommerceAddPromoRuleRequest, _callback);

    }


    private ApiResponse<EcommerceAddPromoRuleResponse> addPromoRuleWithHttpInfo(String storeId, EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = addPromoRuleValidateBeforeCall(storeId, ecommerceAddPromoRuleRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddPromoRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPromoRuleAsync(String storeId, EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest, final ApiCallback<EcommerceAddPromoRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPromoRuleValidateBeforeCall(storeId, ecommerceAddPromoRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddPromoRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPromoRuleRequestBuilder {
        private final String description;
        private final String id;
        private final Float amount;
        private final String type;
        private final String target;
        private final String storeId;
        private String title;
        private OffsetDateTime startsAt;
        private String endsAt;
        private Boolean enabled;
        private OffsetDateTime createdAtForeign;
        private OffsetDateTime updatedAtForeign;

        private AddPromoRuleRequestBuilder(String description, String id, Float amount, String type, String target, String storeId) {
            this.description = description;
            this.id = id;
            this.amount = amount;
            this.type = type;
            this.target = target;
            this.storeId = storeId;
        }

        /**
         * Set title
         * @param title The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. (optional)
         * @return AddPromoRuleRequestBuilder
         */
        public AddPromoRuleRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set startsAt
         * @param startsAt The date and time when the promotion is in effect in ISO 8601 format. (optional)
         * @return AddPromoRuleRequestBuilder
         */
        public AddPromoRuleRequestBuilder startsAt(OffsetDateTime startsAt) {
            this.startsAt = startsAt;
            return this;
        }
        
        /**
         * Set endsAt
         * @param endsAt The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. (optional)
         * @return AddPromoRuleRequestBuilder
         */
        public AddPromoRuleRequestBuilder endsAt(String endsAt) {
            this.endsAt = endsAt;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Whether the promo rule is currently enabled. (optional)
         * @return AddPromoRuleRequestBuilder
         */
        public AddPromoRuleRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set createdAtForeign
         * @param createdAtForeign The date and time the promotion was created in ISO 8601 format. (optional)
         * @return AddPromoRuleRequestBuilder
         */
        public AddPromoRuleRequestBuilder createdAtForeign(OffsetDateTime createdAtForeign) {
            this.createdAtForeign = createdAtForeign;
            return this;
        }
        
        /**
         * Set updatedAtForeign
         * @param updatedAtForeign The date and time the promotion was updated in ISO 8601 format. (optional)
         * @return AddPromoRuleRequestBuilder
         */
        public AddPromoRuleRequestBuilder updatedAtForeign(OffsetDateTime updatedAtForeign) {
            this.updatedAtForeign = updatedAtForeign;
            return this;
        }
        
        /**
         * Build call for addPromoRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest = buildBodyParams();
            return addPromoRuleCall(storeId, ecommerceAddPromoRuleRequest, _callback);
        }

        private EcommerceAddPromoRuleRequest buildBodyParams() {
            EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest = new EcommerceAddPromoRuleRequest();
            ecommerceAddPromoRuleRequest.title(this.title);
            ecommerceAddPromoRuleRequest.description(this.description);
            ecommerceAddPromoRuleRequest.id(this.id);
            ecommerceAddPromoRuleRequest.startsAt(this.startsAt);
            ecommerceAddPromoRuleRequest.endsAt(this.endsAt);
            ecommerceAddPromoRuleRequest.amount(this.amount);
            if (this.type != null)
            ecommerceAddPromoRuleRequest.type(EcommerceAddPromoRuleRequest.TypeEnum.fromValue(this.type));
            if (this.target != null)
            ecommerceAddPromoRuleRequest.target(EcommerceAddPromoRuleRequest.TargetEnum.fromValue(this.target));
            ecommerceAddPromoRuleRequest.enabled(this.enabled);
            ecommerceAddPromoRuleRequest.createdAtForeign(this.createdAtForeign);
            ecommerceAddPromoRuleRequest.updatedAtForeign(this.updatedAtForeign);
            return ecommerceAddPromoRuleRequest;
        }

        /**
         * Execute addPromoRule request
         * @return EcommerceAddPromoRuleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddPromoRuleResponse execute() throws ApiException {
            EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest = buildBodyParams();
            ApiResponse<EcommerceAddPromoRuleResponse> localVarResp = addPromoRuleWithHttpInfo(storeId, ecommerceAddPromoRuleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPromoRule request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddPromoRuleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddPromoRuleResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest = buildBodyParams();
            return addPromoRuleWithHttpInfo(storeId, ecommerceAddPromoRuleRequest);
        }

        /**
         * Execute addPromoRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddPromoRuleResponse> _callback) throws ApiException {
            EcommerceAddPromoRuleRequest ecommerceAddPromoRuleRequest = buildBodyParams();
            return addPromoRuleAsync(storeId, ecommerceAddPromoRuleRequest, _callback);
        }
    }

    /**
     * Add promo rule
     * Add a new promo rule to a store.
     * @param storeId The store id. (required)
     * @param ecommerceAddPromoRuleRequest  (required)
     * @return AddPromoRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddPromoRuleRequestBuilder addPromoRule(String description, String id, Float amount, String type, String target, String storeId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (target == null) throw new IllegalArgumentException("\"target\" is required but got null");
            

        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new AddPromoRuleRequestBuilder(description, id, amount, type, target, storeId);
    }
    private okhttp3.Call addStoreToMailchimpAccountCall(EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceAddStoreToMailchimpAccountRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addStoreToMailchimpAccountValidateBeforeCall(EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecommerceAddStoreToMailchimpAccountRequest' is set
        if (ecommerceAddStoreToMailchimpAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceAddStoreToMailchimpAccountRequest' when calling addStoreToMailchimpAccount(Async)");
        }

        return addStoreToMailchimpAccountCall(ecommerceAddStoreToMailchimpAccountRequest, _callback);

    }


    private ApiResponse<EcommerceAddStoreToMailchimpAccountResponse> addStoreToMailchimpAccountWithHttpInfo(EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = addStoreToMailchimpAccountValidateBeforeCall(ecommerceAddStoreToMailchimpAccountRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceAddStoreToMailchimpAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addStoreToMailchimpAccountAsync(EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest, final ApiCallback<EcommerceAddStoreToMailchimpAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addStoreToMailchimpAccountValidateBeforeCall(ecommerceAddStoreToMailchimpAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceAddStoreToMailchimpAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddStoreToMailchimpAccountRequestBuilder {
        private final String id;
        private final String listId;
        private final String name;
        private final String currencyCode;
        private String platform;
        private String domain;
        private Boolean isSyncing;
        private String emailAddress;
        private String moneyFormat;
        private String primaryLocale;
        private String timezone;
        private String phone;
        private AddressProperty address;

        private AddStoreToMailchimpAccountRequestBuilder(String id, String listId, String name, String currencyCode) {
            this.id = id;
            this.listId = listId;
            this.name = name;
            this.currencyCode = currencyCode;
        }

        /**
         * Set platform
         * @param platform The e-commerce platform of the store. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder platform(String platform) {
            this.platform = platform;
            return this;
        }
        
        /**
         * Set domain
         * @param domain The store domain. This parameter is required for Connected Sites and Google Ads. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set isSyncing
         * @param isSyncing Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder isSyncing(Boolean isSyncing) {
            this.isSyncing = isSyncing;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress The email address for the store. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set moneyFormat
         * @param moneyFormat The currency format for the store. For example: &#x60;$&#x60;, &#x60;£&#x60;, etc. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder moneyFormat(String moneyFormat) {
            this.moneyFormat = moneyFormat;
            return this;
        }
        
        /**
         * Set primaryLocale
         * @param primaryLocale The primary locale for the store. For example: &#x60;en&#x60;, &#x60;de&#x60;, etc. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder primaryLocale(String primaryLocale) {
            this.primaryLocale = primaryLocale;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone for the store. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The store phone number. (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return AddStoreToMailchimpAccountRequestBuilder
         */
        public AddStoreToMailchimpAccountRequestBuilder address(AddressProperty address) {
            this.address = address;
            return this;
        }
        
        /**
         * Build call for addStoreToMailchimpAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest = buildBodyParams();
            return addStoreToMailchimpAccountCall(ecommerceAddStoreToMailchimpAccountRequest, _callback);
        }

        private EcommerceAddStoreToMailchimpAccountRequest buildBodyParams() {
            EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest = new EcommerceAddStoreToMailchimpAccountRequest();
            ecommerceAddStoreToMailchimpAccountRequest.id(this.id);
            ecommerceAddStoreToMailchimpAccountRequest.listId(this.listId);
            ecommerceAddStoreToMailchimpAccountRequest.name(this.name);
            ecommerceAddStoreToMailchimpAccountRequest.platform(this.platform);
            ecommerceAddStoreToMailchimpAccountRequest.domain(this.domain);
            ecommerceAddStoreToMailchimpAccountRequest.isSyncing(this.isSyncing);
            ecommerceAddStoreToMailchimpAccountRequest.emailAddress(this.emailAddress);
            ecommerceAddStoreToMailchimpAccountRequest.currencyCode(this.currencyCode);
            ecommerceAddStoreToMailchimpAccountRequest.moneyFormat(this.moneyFormat);
            ecommerceAddStoreToMailchimpAccountRequest.primaryLocale(this.primaryLocale);
            ecommerceAddStoreToMailchimpAccountRequest.timezone(this.timezone);
            ecommerceAddStoreToMailchimpAccountRequest.phone(this.phone);
            ecommerceAddStoreToMailchimpAccountRequest.address(this.address);
            return ecommerceAddStoreToMailchimpAccountRequest;
        }

        /**
         * Execute addStoreToMailchimpAccount request
         * @return EcommerceAddStoreToMailchimpAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceAddStoreToMailchimpAccountResponse execute() throws ApiException {
            EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest = buildBodyParams();
            ApiResponse<EcommerceAddStoreToMailchimpAccountResponse> localVarResp = addStoreToMailchimpAccountWithHttpInfo(ecommerceAddStoreToMailchimpAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addStoreToMailchimpAccount request with HTTP info returned
         * @return ApiResponse&lt;EcommerceAddStoreToMailchimpAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceAddStoreToMailchimpAccountResponse> executeWithHttpInfo() throws ApiException {
            EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest = buildBodyParams();
            return addStoreToMailchimpAccountWithHttpInfo(ecommerceAddStoreToMailchimpAccountRequest);
        }

        /**
         * Execute addStoreToMailchimpAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceAddStoreToMailchimpAccountResponse> _callback) throws ApiException {
            EcommerceAddStoreToMailchimpAccountRequest ecommerceAddStoreToMailchimpAccountRequest = buildBodyParams();
            return addStoreToMailchimpAccountAsync(ecommerceAddStoreToMailchimpAccountRequest, _callback);
        }
    }

    /**
     * Add store
     * Add a new store to your Mailchimp account.
     * @param ecommerceAddStoreToMailchimpAccountRequest  (required)
     * @return AddStoreToMailchimpAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddStoreToMailchimpAccountRequestBuilder addStoreToMailchimpAccount(String id, String listId, String name, String currencyCode) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        return new AddStoreToMailchimpAccountRequestBuilder(id, listId, name, currencyCode);
    }
    private okhttp3.Call deleteCartLineItemCall(String storeId, String cartId, String lineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "line_id" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCartLineItemValidateBeforeCall(String storeId, String cartId, String lineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteCartLineItem(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling deleteCartLineItem(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling deleteCartLineItem(Async)");
        }

        return deleteCartLineItemCall(storeId, cartId, lineId, _callback);

    }


    private ApiResponse<Void> deleteCartLineItemWithHttpInfo(String storeId, String cartId, String lineId) throws ApiException {
        okhttp3.Call localVarCall = deleteCartLineItemValidateBeforeCall(storeId, cartId, lineId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCartLineItemAsync(String storeId, String cartId, String lineId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCartLineItemValidateBeforeCall(storeId, cartId, lineId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCartLineItemRequestBuilder {
        private final String storeId;
        private final String cartId;
        private final String lineId;

        private DeleteCartLineItemRequestBuilder(String storeId, String cartId, String lineId) {
            this.storeId = storeId;
            this.cartId = cartId;
            this.lineId = lineId;
        }

        /**
         * Build call for deleteCartLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCartLineItemCall(storeId, cartId, lineId, _callback);
        }


        /**
         * Execute deleteCartLineItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCartLineItemWithHttpInfo(storeId, cartId, lineId);
        }

        /**
         * Execute deleteCartLineItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCartLineItemWithHttpInfo(storeId, cartId, lineId);
        }

        /**
         * Execute deleteCartLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCartLineItemAsync(storeId, cartId, lineId, _callback);
        }
    }

    /**
     * Delete cart line item
     * Delete a specific cart line item.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @param lineId The id for the line item of a cart. (required)
     * @return DeleteCartLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCartLineItemRequestBuilder deleteCartLineItem(String storeId, String cartId, String lineId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        if (lineId == null) throw new IllegalArgumentException("\"lineId\" is required but got null");
            

        return new DeleteCartLineItemRequestBuilder(storeId, cartId, lineId);
    }
    private okhttp3.Call deleteOrderCall(String storeId, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderValidateBeforeCall(String storeId, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrder(Async)");
        }

        return deleteOrderCall(storeId, orderId, _callback);

    }


    private ApiResponse<Void> deleteOrderWithHttpInfo(String storeId, String orderId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderValidateBeforeCall(storeId, orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteOrderAsync(String storeId, String orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderValidateBeforeCall(storeId, orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteOrderRequestBuilder {
        private final String storeId;
        private final String orderId;

        private DeleteOrderRequestBuilder(String storeId, String orderId) {
            this.storeId = storeId;
            this.orderId = orderId;
        }

        /**
         * Build call for deleteOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOrderCall(storeId, orderId, _callback);
        }


        /**
         * Execute deleteOrder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteOrderWithHttpInfo(storeId, orderId);
        }

        /**
         * Execute deleteOrder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteOrderWithHttpInfo(storeId, orderId);
        }

        /**
         * Execute deleteOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteOrderAsync(storeId, orderId, _callback);
        }
    }

    /**
     * Delete order
     * Delete an order.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @return DeleteOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOrderRequestBuilder deleteOrder(String storeId, String orderId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new DeleteOrderRequestBuilder(storeId, orderId);
    }
    private okhttp3.Call deleteOrderLineCall(String storeId, String orderId, String lineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "line_id" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderLineValidateBeforeCall(String storeId, String orderId, String lineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteOrderLine(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderLine(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling deleteOrderLine(Async)");
        }

        return deleteOrderLineCall(storeId, orderId, lineId, _callback);

    }


    private ApiResponse<Void> deleteOrderLineWithHttpInfo(String storeId, String orderId, String lineId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderLineValidateBeforeCall(storeId, orderId, lineId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteOrderLineAsync(String storeId, String orderId, String lineId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderLineValidateBeforeCall(storeId, orderId, lineId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteOrderLineRequestBuilder {
        private final String storeId;
        private final String orderId;
        private final String lineId;

        private DeleteOrderLineRequestBuilder(String storeId, String orderId, String lineId) {
            this.storeId = storeId;
            this.orderId = orderId;
            this.lineId = lineId;
        }

        /**
         * Build call for deleteOrderLine
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOrderLineCall(storeId, orderId, lineId, _callback);
        }


        /**
         * Execute deleteOrderLine request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteOrderLineWithHttpInfo(storeId, orderId, lineId);
        }

        /**
         * Execute deleteOrderLine request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteOrderLineWithHttpInfo(storeId, orderId, lineId);
        }

        /**
         * Execute deleteOrderLine request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteOrderLineAsync(storeId, orderId, lineId, _callback);
        }
    }

    /**
     * Delete order line item
     * Delete a specific order line item.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @param lineId The id for the line item of an order. (required)
     * @return DeleteOrderLineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOrderLineRequestBuilder deleteOrderLine(String storeId, String orderId, String lineId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (lineId == null) throw new IllegalArgumentException("\"lineId\" is required but got null");
            

        return new DeleteOrderLineRequestBuilder(storeId, orderId, lineId);
    }
    private okhttp3.Call deleteProductCall(String storeId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(String storeId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteProduct(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProduct(Async)");
        }

        return deleteProductCall(storeId, productId, _callback);

    }


    private ApiResponse<Void> deleteProductWithHttpInfo(String storeId, String productId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(storeId, productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProductAsync(String storeId, String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(storeId, productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProductRequestBuilder {
        private final String storeId;
        private final String productId;

        private DeleteProductRequestBuilder(String storeId, String productId) {
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Build call for deleteProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProductCall(storeId, productId, _callback);
        }


        /**
         * Execute deleteProduct request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProductWithHttpInfo(storeId, productId);
        }

        /**
         * Execute deleteProduct request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProductWithHttpInfo(storeId, productId);
        }

        /**
         * Execute deleteProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProductAsync(storeId, productId, _callback);
        }
    }

    /**
     * Delete product
     * Delete a product.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @return DeleteProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProductRequestBuilder deleteProduct(String storeId, String productId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new DeleteProductRequestBuilder(storeId, productId);
    }
    private okhttp3.Call deleteProductImageCall(String storeId, String productId, String imageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductImageValidateBeforeCall(String storeId, String productId, String imageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteProductImage(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductImage(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteProductImage(Async)");
        }

        return deleteProductImageCall(storeId, productId, imageId, _callback);

    }


    private ApiResponse<Void> deleteProductImageWithHttpInfo(String storeId, String productId, String imageId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductImageValidateBeforeCall(storeId, productId, imageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProductImageAsync(String storeId, String productId, String imageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductImageValidateBeforeCall(storeId, productId, imageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProductImageRequestBuilder {
        private final String storeId;
        private final String productId;
        private final String imageId;

        private DeleteProductImageRequestBuilder(String storeId, String productId, String imageId) {
            this.storeId = storeId;
            this.productId = productId;
            this.imageId = imageId;
        }

        /**
         * Build call for deleteProductImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProductImageCall(storeId, productId, imageId, _callback);
        }


        /**
         * Execute deleteProductImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProductImageWithHttpInfo(storeId, productId, imageId);
        }

        /**
         * Execute deleteProductImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProductImageWithHttpInfo(storeId, productId, imageId);
        }

        /**
         * Execute deleteProductImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProductImageAsync(storeId, productId, imageId, _callback);
        }
    }

    /**
     * Delete product image
     * Delete a product image.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param imageId The id for the product image. (required)
     * @return DeleteProductImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProductImageRequestBuilder deleteProductImage(String storeId, String productId, String imageId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new DeleteProductImageRequestBuilder(storeId, productId, imageId);
    }
    private okhttp3.Call deleteProductVariantCall(String storeId, String productId, String variantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductVariantValidateBeforeCall(String storeId, String productId, String variantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteProductVariant(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductVariant(Async)");
        }

        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling deleteProductVariant(Async)");
        }

        return deleteProductVariantCall(storeId, productId, variantId, _callback);

    }


    private ApiResponse<Void> deleteProductVariantWithHttpInfo(String storeId, String productId, String variantId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductVariantValidateBeforeCall(storeId, productId, variantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProductVariantAsync(String storeId, String productId, String variantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductVariantValidateBeforeCall(storeId, productId, variantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProductVariantRequestBuilder {
        private final String storeId;
        private final String productId;
        private final String variantId;

        private DeleteProductVariantRequestBuilder(String storeId, String productId, String variantId) {
            this.storeId = storeId;
            this.productId = productId;
            this.variantId = variantId;
        }

        /**
         * Build call for deleteProductVariant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProductVariantCall(storeId, productId, variantId, _callback);
        }


        /**
         * Execute deleteProductVariant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProductVariantWithHttpInfo(storeId, productId, variantId);
        }

        /**
         * Execute deleteProductVariant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProductVariantWithHttpInfo(storeId, productId, variantId);
        }

        /**
         * Execute deleteProductVariant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProductVariantAsync(storeId, productId, variantId, _callback);
        }
    }

    /**
     * Delete product variant
     * Delete a product variant.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param variantId The id for the product variant. (required)
     * @return DeleteProductVariantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProductVariantRequestBuilder deleteProductVariant(String storeId, String productId, String variantId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (variantId == null) throw new IllegalArgumentException("\"variantId\" is required but got null");
            

        return new DeleteProductVariantRequestBuilder(storeId, productId, variantId);
    }
    private okhttp3.Call deletePromoCodeCall(String storeId, String promoRuleId, String promoCodeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()))
            .replace("{" + "promo_code_id" + "}", localVarApiClient.escapeString(promoCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromoCodeValidateBeforeCall(String storeId, String promoRuleId, String promoCodeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deletePromoCode(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling deletePromoCode(Async)");
        }

        // verify the required parameter 'promoCodeId' is set
        if (promoCodeId == null) {
            throw new ApiException("Missing the required parameter 'promoCodeId' when calling deletePromoCode(Async)");
        }

        return deletePromoCodeCall(storeId, promoRuleId, promoCodeId, _callback);

    }


    private ApiResponse<Void> deletePromoCodeWithHttpInfo(String storeId, String promoRuleId, String promoCodeId) throws ApiException {
        okhttp3.Call localVarCall = deletePromoCodeValidateBeforeCall(storeId, promoRuleId, promoCodeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePromoCodeAsync(String storeId, String promoRuleId, String promoCodeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromoCodeValidateBeforeCall(storeId, promoRuleId, promoCodeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePromoCodeRequestBuilder {
        private final String storeId;
        private final String promoRuleId;
        private final String promoCodeId;

        private DeletePromoCodeRequestBuilder(String storeId, String promoRuleId, String promoCodeId) {
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
            this.promoCodeId = promoCodeId;
        }

        /**
         * Build call for deletePromoCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePromoCodeCall(storeId, promoRuleId, promoCodeId, _callback);
        }


        /**
         * Execute deletePromoCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId);
        }

        /**
         * Execute deletePromoCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId);
        }

        /**
         * Execute deletePromoCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePromoCodeAsync(storeId, promoRuleId, promoCodeId, _callback);
        }
    }

    /**
     * Delete promo code
     * Delete a promo code from a store.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @param promoCodeId The id for the promo code of a store. (required)
     * @return DeletePromoCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePromoCodeRequestBuilder deletePromoCode(String storeId, String promoRuleId, String promoCodeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        if (promoCodeId == null) throw new IllegalArgumentException("\"promoCodeId\" is required but got null");
            

        return new DeletePromoCodeRequestBuilder(storeId, promoRuleId, promoCodeId);
    }
    private okhttp3.Call deletePromoRuleCall(String storeId, String promoRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromoRuleValidateBeforeCall(String storeId, String promoRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deletePromoRule(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling deletePromoRule(Async)");
        }

        return deletePromoRuleCall(storeId, promoRuleId, _callback);

    }


    private ApiResponse<Void> deletePromoRuleWithHttpInfo(String storeId, String promoRuleId) throws ApiException {
        okhttp3.Call localVarCall = deletePromoRuleValidateBeforeCall(storeId, promoRuleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePromoRuleAsync(String storeId, String promoRuleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromoRuleValidateBeforeCall(storeId, promoRuleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePromoRuleRequestBuilder {
        private final String storeId;
        private final String promoRuleId;

        private DeletePromoRuleRequestBuilder(String storeId, String promoRuleId) {
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
        }

        /**
         * Build call for deletePromoRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePromoRuleCall(storeId, promoRuleId, _callback);
        }


        /**
         * Execute deletePromoRule request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePromoRuleWithHttpInfo(storeId, promoRuleId);
        }

        /**
         * Execute deletePromoRule request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePromoRuleWithHttpInfo(storeId, promoRuleId);
        }

        /**
         * Execute deletePromoRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePromoRuleAsync(storeId, promoRuleId, _callback);
        }
    }

    /**
     * Delete promo rule
     * Delete a promo rule from a store.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @return DeletePromoRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePromoRuleRequestBuilder deletePromoRule(String storeId, String promoRuleId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        return new DeletePromoRuleRequestBuilder(storeId, promoRuleId);
    }
    private okhttp3.Call deleteStoreCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoreValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteStore(Async)");
        }

        return deleteStoreCall(storeId, _callback);

    }


    private ApiResponse<Object> deleteStoreWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = deleteStoreValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteStoreAsync(String storeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoreValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteStoreRequestBuilder {
        private final String storeId;

        private DeleteStoreRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Build call for deleteStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteStoreCall(storeId, _callback);
        }


        /**
         * Execute deleteStore request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteStoreWithHttpInfo(storeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteStore request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteStoreWithHttpInfo(storeId);
        }

        /**
         * Execute deleteStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteStoreAsync(storeId, _callback);
        }
    }

    /**
     * Delete store
     * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
     * @param storeId The store id. (required)
     * @return DeleteStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStoreRequestBuilder deleteStore(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new DeleteStoreRequestBuilder(storeId);
    }
    private okhttp3.Call getCartInfoCall(String storeId, String cartId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCartInfoValidateBeforeCall(String storeId, String cartId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getCartInfo(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling getCartInfo(Async)");
        }

        return getCartInfoCall(storeId, cartId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetCartInfoResponse> getCartInfoWithHttpInfo(String storeId, String cartId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getCartInfoValidateBeforeCall(storeId, cartId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetCartInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCartInfoAsync(String storeId, String cartId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetCartInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCartInfoValidateBeforeCall(storeId, cartId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetCartInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCartInfoRequestBuilder {
        private final String storeId;
        private final String cartId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetCartInfoRequestBuilder(String storeId, String cartId) {
            this.storeId = storeId;
            this.cartId = cartId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCartInfoRequestBuilder
         */
        public GetCartInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCartInfoRequestBuilder
         */
        public GetCartInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getCartInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCartInfoCall(storeId, cartId, fields, excludeFields, _callback);
        }


        /**
         * Execute getCartInfo request
         * @return EcommerceGetCartInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetCartInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetCartInfoResponse> localVarResp = getCartInfoWithHttpInfo(storeId, cartId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCartInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetCartInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetCartInfoResponse> executeWithHttpInfo() throws ApiException {
            return getCartInfoWithHttpInfo(storeId, cartId, fields, excludeFields);
        }

        /**
         * Execute getCartInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetCartInfoResponse> _callback) throws ApiException {
            return getCartInfoAsync(storeId, cartId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get cart info
     * Get information about a specific cart.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @return GetCartInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetCartInfoRequestBuilder getCartInfo(String storeId, String cartId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        return new GetCartInfoRequestBuilder(storeId, cartId);
    }
    private okhttp3.Call getCartLineItemCall(String storeId, String cartId, String lineId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "line_id" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCartLineItemValidateBeforeCall(String storeId, String cartId, String lineId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getCartLineItem(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling getCartLineItem(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling getCartLineItem(Async)");
        }

        return getCartLineItemCall(storeId, cartId, lineId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetCartLineItemResponse> getCartLineItemWithHttpInfo(String storeId, String cartId, String lineId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getCartLineItemValidateBeforeCall(storeId, cartId, lineId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetCartLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCartLineItemAsync(String storeId, String cartId, String lineId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetCartLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCartLineItemValidateBeforeCall(storeId, cartId, lineId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetCartLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCartLineItemRequestBuilder {
        private final String storeId;
        private final String cartId;
        private final String lineId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetCartLineItemRequestBuilder(String storeId, String cartId, String lineId) {
            this.storeId = storeId;
            this.cartId = cartId;
            this.lineId = lineId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCartLineItemRequestBuilder
         */
        public GetCartLineItemRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCartLineItemRequestBuilder
         */
        public GetCartLineItemRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getCartLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCartLineItemCall(storeId, cartId, lineId, fields, excludeFields, _callback);
        }


        /**
         * Execute getCartLineItem request
         * @return EcommerceGetCartLineItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetCartLineItemResponse execute() throws ApiException {
            ApiResponse<EcommerceGetCartLineItemResponse> localVarResp = getCartLineItemWithHttpInfo(storeId, cartId, lineId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCartLineItem request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetCartLineItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetCartLineItemResponse> executeWithHttpInfo() throws ApiException {
            return getCartLineItemWithHttpInfo(storeId, cartId, lineId, fields, excludeFields);
        }

        /**
         * Execute getCartLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetCartLineItemResponse> _callback) throws ApiException {
            return getCartLineItemAsync(storeId, cartId, lineId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get cart line item
     * Get information about a specific cart line item.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @param lineId The id for the line item of a cart. (required)
     * @return GetCartLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetCartLineItemRequestBuilder getCartLineItem(String storeId, String cartId, String lineId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        if (lineId == null) throw new IllegalArgumentException("\"lineId\" is required but got null");
            

        return new GetCartLineItemRequestBuilder(storeId, cartId, lineId);
    }
    private okhttp3.Call getCustomerInfoCall(String storeId, String customerId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/customers/{customer_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerInfoValidateBeforeCall(String storeId, String customerId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getCustomerInfo(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerInfo(Async)");
        }

        return getCustomerInfoCall(storeId, customerId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetCustomerInfoResponse> getCustomerInfoWithHttpInfo(String storeId, String customerId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getCustomerInfoValidateBeforeCall(storeId, customerId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetCustomerInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerInfoAsync(String storeId, String customerId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetCustomerInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerInfoValidateBeforeCall(storeId, customerId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetCustomerInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerInfoRequestBuilder {
        private final String storeId;
        private final String customerId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetCustomerInfoRequestBuilder(String storeId, String customerId) {
            this.storeId = storeId;
            this.customerId = customerId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCustomerInfoRequestBuilder
         */
        public GetCustomerInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCustomerInfoRequestBuilder
         */
        public GetCustomerInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getCustomerInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerInfoCall(storeId, customerId, fields, excludeFields, _callback);
        }


        /**
         * Execute getCustomerInfo request
         * @return EcommerceGetCustomerInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetCustomerInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetCustomerInfoResponse> localVarResp = getCustomerInfoWithHttpInfo(storeId, customerId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetCustomerInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetCustomerInfoResponse> executeWithHttpInfo() throws ApiException {
            return getCustomerInfoWithHttpInfo(storeId, customerId, fields, excludeFields);
        }

        /**
         * Execute getCustomerInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetCustomerInfoResponse> _callback) throws ApiException {
            return getCustomerInfoAsync(storeId, customerId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get customer info
     * Get information about a specific customer.
     * @param storeId The store id. (required)
     * @param customerId The id for the customer of a store. (required)
     * @return GetCustomerInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerInfoRequestBuilder getCustomerInfo(String storeId, String customerId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetCustomerInfoRequestBuilder(storeId, customerId);
    }
    private okhttp3.Call getOrderLineItemCall(String storeId, String orderId, String lineId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "line_id" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderLineItemValidateBeforeCall(String storeId, String orderId, String lineId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getOrderLineItem(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderLineItem(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling getOrderLineItem(Async)");
        }

        return getOrderLineItemCall(storeId, orderId, lineId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetOrderLineItemResponse> getOrderLineItemWithHttpInfo(String storeId, String orderId, String lineId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getOrderLineItemValidateBeforeCall(storeId, orderId, lineId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetOrderLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrderLineItemAsync(String storeId, String orderId, String lineId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetOrderLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderLineItemValidateBeforeCall(storeId, orderId, lineId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetOrderLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrderLineItemRequestBuilder {
        private final String storeId;
        private final String orderId;
        private final String lineId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetOrderLineItemRequestBuilder(String storeId, String orderId, String lineId) {
            this.storeId = storeId;
            this.orderId = orderId;
            this.lineId = lineId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetOrderLineItemRequestBuilder
         */
        public GetOrderLineItemRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetOrderLineItemRequestBuilder
         */
        public GetOrderLineItemRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getOrderLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrderLineItemCall(storeId, orderId, lineId, fields, excludeFields, _callback);
        }


        /**
         * Execute getOrderLineItem request
         * @return EcommerceGetOrderLineItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetOrderLineItemResponse execute() throws ApiException {
            ApiResponse<EcommerceGetOrderLineItemResponse> localVarResp = getOrderLineItemWithHttpInfo(storeId, orderId, lineId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrderLineItem request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetOrderLineItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetOrderLineItemResponse> executeWithHttpInfo() throws ApiException {
            return getOrderLineItemWithHttpInfo(storeId, orderId, lineId, fields, excludeFields);
        }

        /**
         * Execute getOrderLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetOrderLineItemResponse> _callback) throws ApiException {
            return getOrderLineItemAsync(storeId, orderId, lineId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get order line item
     * Get information about a specific order line item.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @param lineId The id for the line item of an order. (required)
     * @return GetOrderLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrderLineItemRequestBuilder getOrderLineItem(String storeId, String orderId, String lineId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (lineId == null) throw new IllegalArgumentException("\"lineId\" is required but got null");
            

        return new GetOrderLineItemRequestBuilder(storeId, orderId, lineId);
    }
    private okhttp3.Call getProductImageInfoCall(String storeId, String productId, String imageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductImageInfoValidateBeforeCall(String storeId, String productId, String imageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProductImageInfo(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductImageInfo(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getProductImageInfo(Async)");
        }

        return getProductImageInfoCall(storeId, productId, imageId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetProductImageInfoResponse> getProductImageInfoWithHttpInfo(String storeId, String productId, String imageId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getProductImageInfoValidateBeforeCall(storeId, productId, imageId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetProductImageInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductImageInfoAsync(String storeId, String productId, String imageId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetProductImageInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductImageInfoValidateBeforeCall(storeId, productId, imageId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetProductImageInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductImageInfoRequestBuilder {
        private final String storeId;
        private final String productId;
        private final String imageId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetProductImageInfoRequestBuilder(String storeId, String productId, String imageId) {
            this.storeId = storeId;
            this.productId = productId;
            this.imageId = imageId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetProductImageInfoRequestBuilder
         */
        public GetProductImageInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetProductImageInfoRequestBuilder
         */
        public GetProductImageInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getProductImageInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductImageInfoCall(storeId, productId, imageId, fields, excludeFields, _callback);
        }


        /**
         * Execute getProductImageInfo request
         * @return EcommerceGetProductImageInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetProductImageInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetProductImageInfoResponse> localVarResp = getProductImageInfoWithHttpInfo(storeId, productId, imageId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProductImageInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetProductImageInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetProductImageInfoResponse> executeWithHttpInfo() throws ApiException {
            return getProductImageInfoWithHttpInfo(storeId, productId, imageId, fields, excludeFields);
        }

        /**
         * Execute getProductImageInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetProductImageInfoResponse> _callback) throws ApiException {
            return getProductImageInfoAsync(storeId, productId, imageId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get product image info
     * Get information about a specific product image.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param imageId The id for the product image. (required)
     * @return GetProductImageInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetProductImageInfoRequestBuilder getProductImageInfo(String storeId, String productId, String imageId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new GetProductImageInfoRequestBuilder(storeId, productId, imageId);
    }
    private okhttp3.Call getProductImagesCall(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/images"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductImagesValidateBeforeCall(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProductImages(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductImages(Async)");
        }

        return getProductImagesCall(storeId, productId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceGetProductImagesResponse> getProductImagesWithHttpInfo(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getProductImagesValidateBeforeCall(storeId, productId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceGetProductImagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductImagesAsync(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceGetProductImagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductImagesValidateBeforeCall(storeId, productId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetProductImagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductImagesRequestBuilder {
        private final String storeId;
        private final String productId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetProductImagesRequestBuilder(String storeId, String productId) {
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetProductImagesRequestBuilder
         */
        public GetProductImagesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetProductImagesRequestBuilder
         */
        public GetProductImagesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetProductImagesRequestBuilder
         */
        public GetProductImagesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetProductImagesRequestBuilder
         */
        public GetProductImagesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getProductImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductImagesCall(storeId, productId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getProductImages request
         * @return EcommerceGetProductImagesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetProductImagesResponse execute() throws ApiException {
            ApiResponse<EcommerceGetProductImagesResponse> localVarResp = getProductImagesWithHttpInfo(storeId, productId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProductImages request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetProductImagesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetProductImagesResponse> executeWithHttpInfo() throws ApiException {
            return getProductImagesWithHttpInfo(storeId, productId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getProductImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetProductImagesResponse> _callback) throws ApiException {
            return getProductImagesAsync(storeId, productId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List product images
     * Get information about a product&#39;s images.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @return GetProductImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetProductImagesRequestBuilder getProductImages(String storeId, String productId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new GetProductImagesRequestBuilder(storeId, productId);
    }
    private okhttp3.Call getProductVariantInfoCall(String storeId, String productId, String variantId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductVariantInfoValidateBeforeCall(String storeId, String productId, String variantId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProductVariantInfo(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductVariantInfo(Async)");
        }

        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling getProductVariantInfo(Async)");
        }

        return getProductVariantInfoCall(storeId, productId, variantId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetProductVariantInfoResponse> getProductVariantInfoWithHttpInfo(String storeId, String productId, String variantId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getProductVariantInfoValidateBeforeCall(storeId, productId, variantId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetProductVariantInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductVariantInfoAsync(String storeId, String productId, String variantId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetProductVariantInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductVariantInfoValidateBeforeCall(storeId, productId, variantId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetProductVariantInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductVariantInfoRequestBuilder {
        private final String storeId;
        private final String productId;
        private final String variantId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetProductVariantInfoRequestBuilder(String storeId, String productId, String variantId) {
            this.storeId = storeId;
            this.productId = productId;
            this.variantId = variantId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetProductVariantInfoRequestBuilder
         */
        public GetProductVariantInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetProductVariantInfoRequestBuilder
         */
        public GetProductVariantInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getProductVariantInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductVariantInfoCall(storeId, productId, variantId, fields, excludeFields, _callback);
        }


        /**
         * Execute getProductVariantInfo request
         * @return EcommerceGetProductVariantInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetProductVariantInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetProductVariantInfoResponse> localVarResp = getProductVariantInfoWithHttpInfo(storeId, productId, variantId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProductVariantInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetProductVariantInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetProductVariantInfoResponse> executeWithHttpInfo() throws ApiException {
            return getProductVariantInfoWithHttpInfo(storeId, productId, variantId, fields, excludeFields);
        }

        /**
         * Execute getProductVariantInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetProductVariantInfoResponse> _callback) throws ApiException {
            return getProductVariantInfoAsync(storeId, productId, variantId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get product variant info
     * Get information about a specific product variant.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param variantId The id for the product variant. (required)
     * @return GetProductVariantInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetProductVariantInfoRequestBuilder getProductVariantInfo(String storeId, String productId, String variantId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (variantId == null) throw new IllegalArgumentException("\"variantId\" is required but got null");
            

        return new GetProductVariantInfoRequestBuilder(storeId, productId, variantId);
    }
    private okhttp3.Call getPromoCodeCall(String storeId, String promoRuleId, String promoCodeId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()))
            .replace("{" + "promo_code_id" + "}", localVarApiClient.escapeString(promoCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromoCodeValidateBeforeCall(String storeId, String promoRuleId, String promoCodeId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getPromoCode(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling getPromoCode(Async)");
        }

        // verify the required parameter 'promoCodeId' is set
        if (promoCodeId == null) {
            throw new ApiException("Missing the required parameter 'promoCodeId' when calling getPromoCode(Async)");
        }

        return getPromoCodeCall(storeId, promoRuleId, promoCodeId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetPromoCodeResponse> getPromoCodeWithHttpInfo(String storeId, String promoRuleId, String promoCodeId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getPromoCodeValidateBeforeCall(storeId, promoRuleId, promoCodeId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetPromoCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPromoCodeAsync(String storeId, String promoRuleId, String promoCodeId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetPromoCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromoCodeValidateBeforeCall(storeId, promoRuleId, promoCodeId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetPromoCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPromoCodeRequestBuilder {
        private final String storeId;
        private final String promoRuleId;
        private final String promoCodeId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetPromoCodeRequestBuilder(String storeId, String promoRuleId, String promoCodeId) {
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
            this.promoCodeId = promoCodeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetPromoCodeRequestBuilder
         */
        public GetPromoCodeRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetPromoCodeRequestBuilder
         */
        public GetPromoCodeRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getPromoCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPromoCodeCall(storeId, promoRuleId, promoCodeId, fields, excludeFields, _callback);
        }


        /**
         * Execute getPromoCode request
         * @return EcommerceGetPromoCodeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetPromoCodeResponse execute() throws ApiException {
            ApiResponse<EcommerceGetPromoCodeResponse> localVarResp = getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPromoCode request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetPromoCodeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetPromoCodeResponse> executeWithHttpInfo() throws ApiException {
            return getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, fields, excludeFields);
        }

        /**
         * Execute getPromoCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetPromoCodeResponse> _callback) throws ApiException {
            return getPromoCodeAsync(storeId, promoRuleId, promoCodeId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get promo code
     * Get information about a specific promo code.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @param promoCodeId The id for the promo code of a store. (required)
     * @return GetPromoCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetPromoCodeRequestBuilder getPromoCode(String storeId, String promoRuleId, String promoCodeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        if (promoCodeId == null) throw new IllegalArgumentException("\"promoCodeId\" is required but got null");
            

        return new GetPromoCodeRequestBuilder(storeId, promoRuleId, promoCodeId);
    }
    private okhttp3.Call getStoreCartsCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreCartsValidateBeforeCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreCarts(Async)");
        }

        return getStoreCartsCall(storeId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceGetStoreCartsResponse> getStoreCartsWithHttpInfo(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getStoreCartsValidateBeforeCall(storeId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreCartsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreCartsAsync(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceGetStoreCartsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreCartsValidateBeforeCall(storeId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreCartsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreCartsRequestBuilder {
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetStoreCartsRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreCartsRequestBuilder
         */
        public GetStoreCartsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreCartsRequestBuilder
         */
        public GetStoreCartsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetStoreCartsRequestBuilder
         */
        public GetStoreCartsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetStoreCartsRequestBuilder
         */
        public GetStoreCartsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getStoreCarts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreCartsCall(storeId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getStoreCarts request
         * @return EcommerceGetStoreCartsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreCartsResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreCartsResponse> localVarResp = getStoreCartsWithHttpInfo(storeId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreCarts request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreCartsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreCartsResponse> executeWithHttpInfo() throws ApiException {
            return getStoreCartsWithHttpInfo(storeId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getStoreCarts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreCartsResponse> _callback) throws ApiException {
            return getStoreCartsAsync(storeId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List carts
     * Get information about a store&#39;s carts.
     * @param storeId The store id. (required)
     * @return GetStoreCartsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreCartsRequestBuilder getStoreCarts(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new GetStoreCartsRequestBuilder(storeId);
    }
    private okhttp3.Call getStoreCustomersCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/customers"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email_address", emailAddress));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreCustomersValidateBeforeCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreCustomers(Async)");
        }

        return getStoreCustomersCall(storeId, fields, excludeFields, count, offset, emailAddress, _callback);

    }


    private ApiResponse<EcommerceGetStoreCustomersResponse> getStoreCustomersWithHttpInfo(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = getStoreCustomersValidateBeforeCall(storeId, fields, excludeFields, count, offset, emailAddress, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreCustomersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreCustomersAsync(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailAddress, final ApiCallback<EcommerceGetStoreCustomersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreCustomersValidateBeforeCall(storeId, fields, excludeFields, count, offset, emailAddress, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreCustomersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreCustomersRequestBuilder {
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String emailAddress;

        private GetStoreCustomersRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreCustomersRequestBuilder
         */
        public GetStoreCustomersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreCustomersRequestBuilder
         */
        public GetStoreCustomersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetStoreCustomersRequestBuilder
         */
        public GetStoreCustomersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetStoreCustomersRequestBuilder
         */
        public GetStoreCustomersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress Restrict the response to customers with the email address. (optional)
         * @return GetStoreCustomersRequestBuilder
         */
        public GetStoreCustomersRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Build call for getStoreCustomers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreCustomersCall(storeId, fields, excludeFields, count, offset, emailAddress, _callback);
        }


        /**
         * Execute getStoreCustomers request
         * @return EcommerceGetStoreCustomersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreCustomersResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreCustomersResponse> localVarResp = getStoreCustomersWithHttpInfo(storeId, fields, excludeFields, count, offset, emailAddress);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreCustomers request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreCustomersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreCustomersResponse> executeWithHttpInfo() throws ApiException {
            return getStoreCustomersWithHttpInfo(storeId, fields, excludeFields, count, offset, emailAddress);
        }

        /**
         * Execute getStoreCustomers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreCustomersResponse> _callback) throws ApiException {
            return getStoreCustomersAsync(storeId, fields, excludeFields, count, offset, emailAddress, _callback);
        }
    }

    /**
     * List customers
     * Get information about a store&#39;s customers.
     * @param storeId The store id. (required)
     * @return GetStoreCustomersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreCustomersRequestBuilder getStoreCustomers(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new GetStoreCustomersRequestBuilder(storeId);
    }
    private okhttp3.Call getStoreInfoCall(String storeId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreInfoValidateBeforeCall(String storeId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreInfo(Async)");
        }

        return getStoreInfoCall(storeId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetStoreInfoResponse> getStoreInfoWithHttpInfo(String storeId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getStoreInfoValidateBeforeCall(storeId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreInfoAsync(String storeId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetStoreInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreInfoValidateBeforeCall(storeId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreInfoRequestBuilder {
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetStoreInfoRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreInfoRequestBuilder
         */
        public GetStoreInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreInfoRequestBuilder
         */
        public GetStoreInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getStoreInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreInfoCall(storeId, fields, excludeFields, _callback);
        }


        /**
         * Execute getStoreInfo request
         * @return EcommerceGetStoreInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreInfoResponse> localVarResp = getStoreInfoWithHttpInfo(storeId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreInfoResponse> executeWithHttpInfo() throws ApiException {
            return getStoreInfoWithHttpInfo(storeId, fields, excludeFields);
        }

        /**
         * Execute getStoreInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreInfoResponse> _callback) throws ApiException {
            return getStoreInfoAsync(storeId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get store info
     * Get information about a specific store.
     * @param storeId The store id. (required)
     * @return GetStoreInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreInfoRequestBuilder getStoreInfo(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new GetStoreInfoRequestBuilder(storeId);
    }
    private okhttp3.Call getStoreOrderInfoCall(String storeId, String orderId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreOrderInfoValidateBeforeCall(String storeId, String orderId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreOrderInfo(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getStoreOrderInfo(Async)");
        }

        return getStoreOrderInfoCall(storeId, orderId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetStoreOrderInfoResponse> getStoreOrderInfoWithHttpInfo(String storeId, String orderId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getStoreOrderInfoValidateBeforeCall(storeId, orderId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreOrderInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreOrderInfoAsync(String storeId, String orderId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetStoreOrderInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreOrderInfoValidateBeforeCall(storeId, orderId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreOrderInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreOrderInfoRequestBuilder {
        private final String storeId;
        private final String orderId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetStoreOrderInfoRequestBuilder(String storeId, String orderId) {
            this.storeId = storeId;
            this.orderId = orderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreOrderInfoRequestBuilder
         */
        public GetStoreOrderInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreOrderInfoRequestBuilder
         */
        public GetStoreOrderInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getStoreOrderInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreOrderInfoCall(storeId, orderId, fields, excludeFields, _callback);
        }


        /**
         * Execute getStoreOrderInfo request
         * @return EcommerceGetStoreOrderInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreOrderInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreOrderInfoResponse> localVarResp = getStoreOrderInfoWithHttpInfo(storeId, orderId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreOrderInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreOrderInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreOrderInfoResponse> executeWithHttpInfo() throws ApiException {
            return getStoreOrderInfoWithHttpInfo(storeId, orderId, fields, excludeFields);
        }

        /**
         * Execute getStoreOrderInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreOrderInfoResponse> _callback) throws ApiException {
            return getStoreOrderInfoAsync(storeId, orderId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get order info
     * Get information about a specific order.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @return GetStoreOrderInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreOrderInfoRequestBuilder getStoreOrderInfo(String storeId, String orderId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new GetStoreOrderInfoRequestBuilder(storeId, orderId);
    }
    private okhttp3.Call getStoreOrderLinesCall(String storeId, String orderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}/lines"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreOrderLinesValidateBeforeCall(String storeId, String orderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreOrderLines(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getStoreOrderLines(Async)");
        }

        return getStoreOrderLinesCall(storeId, orderId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceGetStoreOrderLinesResponse> getStoreOrderLinesWithHttpInfo(String storeId, String orderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getStoreOrderLinesValidateBeforeCall(storeId, orderId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreOrderLinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreOrderLinesAsync(String storeId, String orderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceGetStoreOrderLinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreOrderLinesValidateBeforeCall(storeId, orderId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreOrderLinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreOrderLinesRequestBuilder {
        private final String storeId;
        private final String orderId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetStoreOrderLinesRequestBuilder(String storeId, String orderId) {
            this.storeId = storeId;
            this.orderId = orderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreOrderLinesRequestBuilder
         */
        public GetStoreOrderLinesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreOrderLinesRequestBuilder
         */
        public GetStoreOrderLinesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetStoreOrderLinesRequestBuilder
         */
        public GetStoreOrderLinesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetStoreOrderLinesRequestBuilder
         */
        public GetStoreOrderLinesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getStoreOrderLines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreOrderLinesCall(storeId, orderId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getStoreOrderLines request
         * @return EcommerceGetStoreOrderLinesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreOrderLinesResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreOrderLinesResponse> localVarResp = getStoreOrderLinesWithHttpInfo(storeId, orderId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreOrderLines request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreOrderLinesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreOrderLinesResponse> executeWithHttpInfo() throws ApiException {
            return getStoreOrderLinesWithHttpInfo(storeId, orderId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getStoreOrderLines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreOrderLinesResponse> _callback) throws ApiException {
            return getStoreOrderLinesAsync(storeId, orderId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List order line items
     * Get information about an order&#39;s line items.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @return GetStoreOrderLinesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreOrderLinesRequestBuilder getStoreOrderLines(String storeId, String orderId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new GetStoreOrderLinesRequestBuilder(storeId, orderId);
    }
    private okhttp3.Call getStoreProductInfoCall(String storeId, String productId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreProductInfoValidateBeforeCall(String storeId, String productId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreProductInfo(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getStoreProductInfo(Async)");
        }

        return getStoreProductInfoCall(storeId, productId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetStoreProductInfoResponse> getStoreProductInfoWithHttpInfo(String storeId, String productId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getStoreProductInfoValidateBeforeCall(storeId, productId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreProductInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreProductInfoAsync(String storeId, String productId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetStoreProductInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreProductInfoValidateBeforeCall(storeId, productId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreProductInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreProductInfoRequestBuilder {
        private final String storeId;
        private final String productId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetStoreProductInfoRequestBuilder(String storeId, String productId) {
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreProductInfoRequestBuilder
         */
        public GetStoreProductInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreProductInfoRequestBuilder
         */
        public GetStoreProductInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getStoreProductInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreProductInfoCall(storeId, productId, fields, excludeFields, _callback);
        }


        /**
         * Execute getStoreProductInfo request
         * @return EcommerceGetStoreProductInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreProductInfoResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreProductInfoResponse> localVarResp = getStoreProductInfoWithHttpInfo(storeId, productId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreProductInfo request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreProductInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreProductInfoResponse> executeWithHttpInfo() throws ApiException {
            return getStoreProductInfoWithHttpInfo(storeId, productId, fields, excludeFields);
        }

        /**
         * Execute getStoreProductInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreProductInfoResponse> _callback) throws ApiException {
            return getStoreProductInfoAsync(storeId, productId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get product info
     * Get information about a specific product.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @return GetStoreProductInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreProductInfoRequestBuilder getStoreProductInfo(String storeId, String productId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new GetStoreProductInfoRequestBuilder(storeId, productId);
    }
    private okhttp3.Call getStoreProductsCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreProductsValidateBeforeCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreProducts(Async)");
        }

        return getStoreProductsCall(storeId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceGetStoreProductsResponse> getStoreProductsWithHttpInfo(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getStoreProductsValidateBeforeCall(storeId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreProductsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStoreProductsAsync(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceGetStoreProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreProductsValidateBeforeCall(storeId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStoreProductsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStoreProductsRequestBuilder {
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetStoreProductsRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreProductsRequestBuilder
         */
        public GetStoreProductsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStoreProductsRequestBuilder
         */
        public GetStoreProductsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetStoreProductsRequestBuilder
         */
        public GetStoreProductsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetStoreProductsRequestBuilder
         */
        public GetStoreProductsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getStoreProducts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStoreProductsCall(storeId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getStoreProducts request
         * @return EcommerceGetStoreProductsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStoreProductsResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStoreProductsResponse> localVarResp = getStoreProductsWithHttpInfo(storeId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStoreProducts request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStoreProductsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStoreProductsResponse> executeWithHttpInfo() throws ApiException {
            return getStoreProductsWithHttpInfo(storeId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getStoreProducts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStoreProductsResponse> _callback) throws ApiException {
            return getStoreProductsAsync(storeId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List product
     * Get information about a store&#39;s products.
     * @param storeId The store id. (required)
     * @return GetStoreProductsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStoreProductsRequestBuilder getStoreProducts(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new GetStoreProductsRequestBuilder(storeId);
    }
    private okhttp3.Call getStorePromoCodesCall(String promoRuleId, String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes"
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()))
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorePromoCodesValidateBeforeCall(String promoRuleId, String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling getStorePromoCodes(Async)");
        }

        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStorePromoCodes(Async)");
        }

        return getStorePromoCodesCall(promoRuleId, storeId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceGetStorePromoCodesResponse> getStorePromoCodesWithHttpInfo(String promoRuleId, String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getStorePromoCodesValidateBeforeCall(promoRuleId, storeId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStorePromoCodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStorePromoCodesAsync(String promoRuleId, String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceGetStorePromoCodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorePromoCodesValidateBeforeCall(promoRuleId, storeId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStorePromoCodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStorePromoCodesRequestBuilder {
        private final String promoRuleId;
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetStorePromoCodesRequestBuilder(String promoRuleId, String storeId) {
            this.promoRuleId = promoRuleId;
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStorePromoCodesRequestBuilder
         */
        public GetStorePromoCodesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStorePromoCodesRequestBuilder
         */
        public GetStorePromoCodesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetStorePromoCodesRequestBuilder
         */
        public GetStorePromoCodesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetStorePromoCodesRequestBuilder
         */
        public GetStorePromoCodesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getStorePromoCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStorePromoCodesCall(promoRuleId, storeId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getStorePromoCodes request
         * @return EcommerceGetStorePromoCodesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStorePromoCodesResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStorePromoCodesResponse> localVarResp = getStorePromoCodesWithHttpInfo(promoRuleId, storeId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStorePromoCodes request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStorePromoCodesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStorePromoCodesResponse> executeWithHttpInfo() throws ApiException {
            return getStorePromoCodesWithHttpInfo(promoRuleId, storeId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getStorePromoCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStorePromoCodesResponse> _callback) throws ApiException {
            return getStorePromoCodesAsync(promoRuleId, storeId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List promo codes
     * Get information about a store&#39;s promo codes.
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @param storeId The store id. (required)
     * @return GetStorePromoCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStorePromoCodesRequestBuilder getStorePromoCodes(String promoRuleId, String storeId) throws IllegalArgumentException {
        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new GetStorePromoCodesRequestBuilder(promoRuleId, storeId);
    }
    private okhttp3.Call getStorePromoRuleCall(String storeId, String promoRuleId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorePromoRuleValidateBeforeCall(String storeId, String promoRuleId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStorePromoRule(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling getStorePromoRule(Async)");
        }

        return getStorePromoRuleCall(storeId, promoRuleId, fields, excludeFields, _callback);

    }


    private ApiResponse<EcommerceGetStorePromoRuleResponse> getStorePromoRuleWithHttpInfo(String storeId, String promoRuleId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getStorePromoRuleValidateBeforeCall(storeId, promoRuleId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStorePromoRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStorePromoRuleAsync(String storeId, String promoRuleId, List<String> fields, List<String> excludeFields, final ApiCallback<EcommerceGetStorePromoRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorePromoRuleValidateBeforeCall(storeId, promoRuleId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStorePromoRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStorePromoRuleRequestBuilder {
        private final String storeId;
        private final String promoRuleId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetStorePromoRuleRequestBuilder(String storeId, String promoRuleId) {
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStorePromoRuleRequestBuilder
         */
        public GetStorePromoRuleRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStorePromoRuleRequestBuilder
         */
        public GetStorePromoRuleRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getStorePromoRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStorePromoRuleCall(storeId, promoRuleId, fields, excludeFields, _callback);
        }


        /**
         * Execute getStorePromoRule request
         * @return EcommerceGetStorePromoRuleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStorePromoRuleResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStorePromoRuleResponse> localVarResp = getStorePromoRuleWithHttpInfo(storeId, promoRuleId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStorePromoRule request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStorePromoRuleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStorePromoRuleResponse> executeWithHttpInfo() throws ApiException {
            return getStorePromoRuleWithHttpInfo(storeId, promoRuleId, fields, excludeFields);
        }

        /**
         * Execute getStorePromoRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStorePromoRuleResponse> _callback) throws ApiException {
            return getStorePromoRuleAsync(storeId, promoRuleId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get promo rule
     * Get information about a specific promo rule.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @return GetStorePromoRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStorePromoRuleRequestBuilder getStorePromoRule(String storeId, String promoRuleId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        return new GetStorePromoRuleRequestBuilder(storeId, promoRuleId);
    }
    private okhttp3.Call getStorePromoRulesCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorePromoRulesValidateBeforeCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStorePromoRules(Async)");
        }

        return getStorePromoRulesCall(storeId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceGetStorePromoRulesResponse> getStorePromoRulesWithHttpInfo(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getStorePromoRulesValidateBeforeCall(storeId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceGetStorePromoRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStorePromoRulesAsync(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceGetStorePromoRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorePromoRulesValidateBeforeCall(storeId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceGetStorePromoRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStorePromoRulesRequestBuilder {
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetStorePromoRulesRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStorePromoRulesRequestBuilder
         */
        public GetStorePromoRulesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetStorePromoRulesRequestBuilder
         */
        public GetStorePromoRulesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetStorePromoRulesRequestBuilder
         */
        public GetStorePromoRulesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetStorePromoRulesRequestBuilder
         */
        public GetStorePromoRulesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getStorePromoRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStorePromoRulesCall(storeId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getStorePromoRules request
         * @return EcommerceGetStorePromoRulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceGetStorePromoRulesResponse execute() throws ApiException {
            ApiResponse<EcommerceGetStorePromoRulesResponse> localVarResp = getStorePromoRulesWithHttpInfo(storeId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStorePromoRules request with HTTP info returned
         * @return ApiResponse&lt;EcommerceGetStorePromoRulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceGetStorePromoRulesResponse> executeWithHttpInfo() throws ApiException {
            return getStorePromoRulesWithHttpInfo(storeId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getStorePromoRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceGetStorePromoRulesResponse> _callback) throws ApiException {
            return getStorePromoRulesAsync(storeId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List promo rules
     * Get information about a store&#39;s promo rules.
     * @param storeId The store id. (required)
     * @return GetStorePromoRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetStorePromoRulesRequestBuilder getStorePromoRules(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new GetStorePromoRulesRequestBuilder(storeId);
    }
    private okhttp3.Call listAccountOrdersCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String campaignId, String outreachId, String customerId, Boolean hasOutreach, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign_id", campaignId));
        }

        if (outreachId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outreach_id", outreachId));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (hasOutreach != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_outreach", hasOutreach));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountOrdersValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String campaignId, String outreachId, String customerId, Boolean hasOutreach, final ApiCallback _callback) throws ApiException {
        return listAccountOrdersCall(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach, _callback);

    }


    private ApiResponse<EcommerceListAccountOrdersResponse> listAccountOrdersWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String campaignId, String outreachId, String customerId, Boolean hasOutreach) throws ApiException {
        okhttp3.Call localVarCall = listAccountOrdersValidateBeforeCall(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach, null);
        Type localVarReturnType = new TypeToken<EcommerceListAccountOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccountOrdersAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String campaignId, String outreachId, String customerId, Boolean hasOutreach, final ApiCallback<EcommerceListAccountOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountOrdersValidateBeforeCall(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach, _callback);
        Type localVarReturnType = new TypeToken<EcommerceListAccountOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAccountOrdersRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String campaignId;
        private String outreachId;
        private String customerId;
        private Boolean hasOutreach;

        private ListAccountOrdersRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId Restrict results to orders with a specific &#x60;campaign_id&#x60; value. (optional)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set outreachId
         * @param outreachId Restrict results to orders with a specific &#x60;outreach_id&#x60; value. (optional)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder outreachId(String outreachId) {
            this.outreachId = outreachId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId Restrict results to orders made by a specific customer. (optional)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set hasOutreach
         * @param hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad. (optional)
         * @return ListAccountOrdersRequestBuilder
         */
        public ListAccountOrdersRequestBuilder hasOutreach(Boolean hasOutreach) {
            this.hasOutreach = hasOutreach;
            return this;
        }
        
        /**
         * Build call for listAccountOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccountOrdersCall(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach, _callback);
        }


        /**
         * Execute listAccountOrders request
         * @return EcommerceListAccountOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceListAccountOrdersResponse execute() throws ApiException {
            ApiResponse<EcommerceListAccountOrdersResponse> localVarResp = listAccountOrdersWithHttpInfo(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAccountOrders request with HTTP info returned
         * @return ApiResponse&lt;EcommerceListAccountOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceListAccountOrdersResponse> executeWithHttpInfo() throws ApiException {
            return listAccountOrdersWithHttpInfo(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach);
        }

        /**
         * Execute listAccountOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceListAccountOrdersResponse> _callback) throws ApiException {
            return listAccountOrdersAsync(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach, _callback);
        }
    }

    /**
     * List account orders
     * Get information about an account&#39;s orders.
     * @return ListAccountOrdersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountOrdersRequestBuilder listAccountOrders() throws IllegalArgumentException {
        return new ListAccountOrdersRequestBuilder();
    }
    private okhttp3.Call listCartLinesCall(String storeId, String cartId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}/lines"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCartLinesValidateBeforeCall(String storeId, String cartId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling listCartLines(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling listCartLines(Async)");
        }

        return listCartLinesCall(storeId, cartId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceListCartLinesResponse> listCartLinesWithHttpInfo(String storeId, String cartId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listCartLinesValidateBeforeCall(storeId, cartId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceListCartLinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCartLinesAsync(String storeId, String cartId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceListCartLinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCartLinesValidateBeforeCall(storeId, cartId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceListCartLinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCartLinesRequestBuilder {
        private final String storeId;
        private final String cartId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListCartLinesRequestBuilder(String storeId, String cartId) {
            this.storeId = storeId;
            this.cartId = cartId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCartLinesRequestBuilder
         */
        public ListCartLinesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCartLinesRequestBuilder
         */
        public ListCartLinesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListCartLinesRequestBuilder
         */
        public ListCartLinesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListCartLinesRequestBuilder
         */
        public ListCartLinesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listCartLines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCartLinesCall(storeId, cartId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listCartLines request
         * @return EcommerceListCartLinesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceListCartLinesResponse execute() throws ApiException {
            ApiResponse<EcommerceListCartLinesResponse> localVarResp = listCartLinesWithHttpInfo(storeId, cartId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCartLines request with HTTP info returned
         * @return ApiResponse&lt;EcommerceListCartLinesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceListCartLinesResponse> executeWithHttpInfo() throws ApiException {
            return listCartLinesWithHttpInfo(storeId, cartId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listCartLines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceListCartLinesResponse> _callback) throws ApiException {
            return listCartLinesAsync(storeId, cartId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List cart line items
     * Get information about a cart&#39;s line items.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @return ListCartLinesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCartLinesRequestBuilder listCartLines(String storeId, String cartId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        return new ListCartLinesRequestBuilder(storeId, cartId);
    }
    private okhttp3.Call listProductVariantsCall(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/variants"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductVariantsValidateBeforeCall(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling listProductVariants(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling listProductVariants(Async)");
        }

        return listProductVariantsCall(storeId, productId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceListProductVariantsResponse> listProductVariantsWithHttpInfo(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listProductVariantsValidateBeforeCall(storeId, productId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceListProductVariantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProductVariantsAsync(String storeId, String productId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceListProductVariantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductVariantsValidateBeforeCall(storeId, productId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceListProductVariantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProductVariantsRequestBuilder {
        private final String storeId;
        private final String productId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListProductVariantsRequestBuilder(String storeId, String productId) {
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListProductVariantsRequestBuilder
         */
        public ListProductVariantsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListProductVariantsRequestBuilder
         */
        public ListProductVariantsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListProductVariantsRequestBuilder
         */
        public ListProductVariantsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListProductVariantsRequestBuilder
         */
        public ListProductVariantsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listProductVariants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProductVariantsCall(storeId, productId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listProductVariants request
         * @return EcommerceListProductVariantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceListProductVariantsResponse execute() throws ApiException {
            ApiResponse<EcommerceListProductVariantsResponse> localVarResp = listProductVariantsWithHttpInfo(storeId, productId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProductVariants request with HTTP info returned
         * @return ApiResponse&lt;EcommerceListProductVariantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceListProductVariantsResponse> executeWithHttpInfo() throws ApiException {
            return listProductVariantsWithHttpInfo(storeId, productId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listProductVariants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceListProductVariantsResponse> _callback) throws ApiException {
            return listProductVariantsAsync(storeId, productId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List product variants
     * Get information about a product&#39;s variants.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @return ListProductVariantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListProductVariantsRequestBuilder listProductVariants(String storeId, String productId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new ListProductVariantsRequestBuilder(storeId, productId);
    }
    private okhttp3.Call listStoreOrdersCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String customerId, Boolean hasOutreach, String campaignId, String outreachId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (hasOutreach != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_outreach", hasOutreach));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign_id", campaignId));
        }

        if (outreachId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outreach_id", outreachId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStoreOrdersValidateBeforeCall(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String customerId, Boolean hasOutreach, String campaignId, String outreachId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling listStoreOrders(Async)");
        }

        return listStoreOrdersCall(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId, _callback);

    }


    private ApiResponse<EcommerceListStoreOrdersResponse> listStoreOrdersWithHttpInfo(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String customerId, Boolean hasOutreach, String campaignId, String outreachId) throws ApiException {
        okhttp3.Call localVarCall = listStoreOrdersValidateBeforeCall(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId, null);
        Type localVarReturnType = new TypeToken<EcommerceListStoreOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStoreOrdersAsync(String storeId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String customerId, Boolean hasOutreach, String campaignId, String outreachId, final ApiCallback<EcommerceListStoreOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStoreOrdersValidateBeforeCall(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId, _callback);
        Type localVarReturnType = new TypeToken<EcommerceListStoreOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListStoreOrdersRequestBuilder {
        private final String storeId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String customerId;
        private Boolean hasOutreach;
        private String campaignId;
        private String outreachId;

        private ListStoreOrdersRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId Restrict results to orders made by a specific customer. (optional)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set hasOutreach
         * @param hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad. (optional)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder hasOutreach(Boolean hasOutreach) {
            this.hasOutreach = hasOutreach;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId Restrict results to orders with a specific &#x60;campaign_id&#x60; value. (optional)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set outreachId
         * @param outreachId Restrict results to orders with a specific &#x60;outreach_id&#x60; value. (optional)
         * @return ListStoreOrdersRequestBuilder
         */
        public ListStoreOrdersRequestBuilder outreachId(String outreachId) {
            this.outreachId = outreachId;
            return this;
        }
        
        /**
         * Build call for listStoreOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStoreOrdersCall(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId, _callback);
        }


        /**
         * Execute listStoreOrders request
         * @return EcommerceListStoreOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceListStoreOrdersResponse execute() throws ApiException {
            ApiResponse<EcommerceListStoreOrdersResponse> localVarResp = listStoreOrdersWithHttpInfo(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listStoreOrders request with HTTP info returned
         * @return ApiResponse&lt;EcommerceListStoreOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceListStoreOrdersResponse> executeWithHttpInfo() throws ApiException {
            return listStoreOrdersWithHttpInfo(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId);
        }

        /**
         * Execute listStoreOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceListStoreOrdersResponse> _callback) throws ApiException {
            return listStoreOrdersAsync(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId, _callback);
        }
    }

    /**
     * List orders
     * Get information about a store&#39;s orders.
     * @param storeId The store id. (required)
     * @return ListStoreOrdersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListStoreOrdersRequestBuilder listStoreOrders(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new ListStoreOrdersRequestBuilder(storeId);
    }
    private okhttp3.Call listStoresCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStoresValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listStoresCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<EcommerceListStoresResponse> listStoresWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listStoresValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<EcommerceListStoresResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStoresAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<EcommerceListStoresResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStoresValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<EcommerceListStoresResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListStoresRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListStoresRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoresRequestBuilder
         */
        public ListStoresRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoresRequestBuilder
         */
        public ListStoresRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListStoresRequestBuilder
         */
        public ListStoresRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListStoresRequestBuilder
         */
        public ListStoresRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listStores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStoresCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listStores request
         * @return EcommerceListStoresResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceListStoresResponse execute() throws ApiException {
            ApiResponse<EcommerceListStoresResponse> localVarResp = listStoresWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listStores request with HTTP info returned
         * @return ApiResponse&lt;EcommerceListStoresResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceListStoresResponse> executeWithHttpInfo() throws ApiException {
            return listStoresWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listStores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceListStoresResponse> _callback) throws ApiException {
            return listStoresAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List stores
     * Get information about all stores in the account.
     * @return ListStoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListStoresRequestBuilder listStores() throws IllegalArgumentException {
        return new ListStoresRequestBuilder();
    }
    private okhttp3.Call removeCartCall(String storeId, String cartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCartValidateBeforeCall(String storeId, String cartId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling removeCart(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling removeCart(Async)");
        }

        return removeCartCall(storeId, cartId, _callback);

    }


    private ApiResponse<Void> removeCartWithHttpInfo(String storeId, String cartId) throws ApiException {
        okhttp3.Call localVarCall = removeCartValidateBeforeCall(storeId, cartId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCartAsync(String storeId, String cartId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCartValidateBeforeCall(storeId, cartId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCartRequestBuilder {
        private final String storeId;
        private final String cartId;

        private RemoveCartRequestBuilder(String storeId, String cartId) {
            this.storeId = storeId;
            this.cartId = cartId;
        }

        /**
         * Build call for removeCart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCartCall(storeId, cartId, _callback);
        }


        /**
         * Execute removeCart request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCartWithHttpInfo(storeId, cartId);
        }

        /**
         * Execute removeCart request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCartWithHttpInfo(storeId, cartId);
        }

        /**
         * Execute removeCart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCartAsync(storeId, cartId, _callback);
        }
    }

    /**
     * Delete cart
     * Delete a cart.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @return RemoveCartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCartRequestBuilder removeCart(String storeId, String cartId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        return new RemoveCartRequestBuilder(storeId, cartId);
    }
    private okhttp3.Call removeCustomerCall(String storeId, String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/customers/{customer_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomerValidateBeforeCall(String storeId, String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling removeCustomer(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling removeCustomer(Async)");
        }

        return removeCustomerCall(storeId, customerId, _callback);

    }


    private ApiResponse<Void> removeCustomerWithHttpInfo(String storeId, String customerId) throws ApiException {
        okhttp3.Call localVarCall = removeCustomerValidateBeforeCall(storeId, customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCustomerAsync(String storeId, String customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomerValidateBeforeCall(storeId, customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCustomerRequestBuilder {
        private final String storeId;
        private final String customerId;

        private RemoveCustomerRequestBuilder(String storeId, String customerId) {
            this.storeId = storeId;
            this.customerId = customerId;
        }

        /**
         * Build call for removeCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCustomerCall(storeId, customerId, _callback);
        }


        /**
         * Execute removeCustomer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCustomerWithHttpInfo(storeId, customerId);
        }

        /**
         * Execute removeCustomer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCustomerWithHttpInfo(storeId, customerId);
        }

        /**
         * Execute removeCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCustomerAsync(storeId, customerId, _callback);
        }
    }

    /**
     * Delete customer
     * Delete a customer from a store.
     * @param storeId The store id. (required)
     * @param customerId The id for the customer of a store. (required)
     * @return RemoveCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomerRequestBuilder removeCustomer(String storeId, String customerId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new RemoveCustomerRequestBuilder(storeId, customerId);
    }
    private okhttp3.Call updateCartByIdCall(String storeId, String cartId, EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateCartByIdRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCartByIdValidateBeforeCall(String storeId, String cartId, EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateCartById(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling updateCartById(Async)");
        }

        // verify the required parameter 'ecommerceUpdateCartByIdRequest' is set
        if (ecommerceUpdateCartByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateCartByIdRequest' when calling updateCartById(Async)");
        }

        return updateCartByIdCall(storeId, cartId, ecommerceUpdateCartByIdRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateCartByIdResponse> updateCartByIdWithHttpInfo(String storeId, String cartId, EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCartByIdValidateBeforeCall(storeId, cartId, ecommerceUpdateCartByIdRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateCartByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCartByIdAsync(String storeId, String cartId, EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest, final ApiCallback<EcommerceUpdateCartByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCartByIdValidateBeforeCall(storeId, cartId, ecommerceUpdateCartByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateCartByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCartByIdRequestBuilder {
        private final String storeId;
        private final String cartId;
        private ECommerceCustomerProperty1 customer;
        private String campaignId;
        private String checkoutUrl;
        private String currencyCode;
        private Double orderTotal;
        private Double taxTotal;
        private List<ECommerceCartLineItem1> lines;

        private UpdateCartByIdRequestBuilder(String storeId, String cartId) {
            this.storeId = storeId;
            this.cartId = cartId;
        }

        /**
         * Set customer
         * @param customer  (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder customer(ECommerceCustomerProperty1 customer) {
            this.customer = customer;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId A string that uniquely identifies the campaign associated with a cart. (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set checkoutUrl
         * @param checkoutUrl The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder checkoutUrl(String checkoutUrl) {
            this.checkoutUrl = checkoutUrl;
            return this;
        }
        
        /**
         * Set currencyCode
         * @param currencyCode The three-letter ISO 4217 code for the currency that the cart uses. (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Set orderTotal
         * @param orderTotal The order total for the cart. (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder orderTotal(Double orderTotal) {
            this.orderTotal = orderTotal;
            return this;
        }
        
        /**
         * Set taxTotal
         * @param taxTotal The total tax for the cart. (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder taxTotal(Double taxTotal) {
            this.taxTotal = taxTotal;
            return this;
        }
        
        /**
         * Set lines
         * @param lines An array of the cart&#39;s line items. (optional)
         * @return UpdateCartByIdRequestBuilder
         */
        public UpdateCartByIdRequestBuilder lines(List<ECommerceCartLineItem1> lines) {
            this.lines = lines;
            return this;
        }
        
        /**
         * Build call for updateCartById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest = buildBodyParams();
            return updateCartByIdCall(storeId, cartId, ecommerceUpdateCartByIdRequest, _callback);
        }

        private EcommerceUpdateCartByIdRequest buildBodyParams() {
            EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest = new EcommerceUpdateCartByIdRequest();
            ecommerceUpdateCartByIdRequest.customer(this.customer);
            ecommerceUpdateCartByIdRequest.campaignId(this.campaignId);
            ecommerceUpdateCartByIdRequest.checkoutUrl(this.checkoutUrl);
            ecommerceUpdateCartByIdRequest.currencyCode(this.currencyCode);
            ecommerceUpdateCartByIdRequest.orderTotal(this.orderTotal);
            ecommerceUpdateCartByIdRequest.taxTotal(this.taxTotal);
            ecommerceUpdateCartByIdRequest.lines(this.lines);
            return ecommerceUpdateCartByIdRequest;
        }

        /**
         * Execute updateCartById request
         * @return EcommerceUpdateCartByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateCartByIdResponse execute() throws ApiException {
            EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateCartByIdResponse> localVarResp = updateCartByIdWithHttpInfo(storeId, cartId, ecommerceUpdateCartByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCartById request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateCartByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateCartByIdResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest = buildBodyParams();
            return updateCartByIdWithHttpInfo(storeId, cartId, ecommerceUpdateCartByIdRequest);
        }

        /**
         * Execute updateCartById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateCartByIdResponse> _callback) throws ApiException {
            EcommerceUpdateCartByIdRequest ecommerceUpdateCartByIdRequest = buildBodyParams();
            return updateCartByIdAsync(storeId, cartId, ecommerceUpdateCartByIdRequest, _callback);
        }
    }

    /**
     * Update cart
     * Update a specific cart.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @param ecommerceUpdateCartByIdRequest  (required)
     * @return UpdateCartByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCartByIdRequestBuilder updateCartById(String storeId, String cartId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        return new UpdateCartByIdRequestBuilder(storeId, cartId);
    }
    private okhttp3.Call updateCartLineItemCall(String storeId, String cartId, String lineId, EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateCartLineItemRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "cart_id" + "}", localVarApiClient.escapeString(cartId.toString()))
            .replace("{" + "line_id" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCartLineItemValidateBeforeCall(String storeId, String cartId, String lineId, EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateCartLineItem(Async)");
        }

        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling updateCartLineItem(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling updateCartLineItem(Async)");
        }

        // verify the required parameter 'ecommerceUpdateCartLineItemRequest' is set
        if (ecommerceUpdateCartLineItemRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateCartLineItemRequest' when calling updateCartLineItem(Async)");
        }

        return updateCartLineItemCall(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateCartLineItemResponse> updateCartLineItemWithHttpInfo(String storeId, String cartId, String lineId, EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCartLineItemValidateBeforeCall(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateCartLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCartLineItemAsync(String storeId, String cartId, String lineId, EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest, final ApiCallback<EcommerceUpdateCartLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCartLineItemValidateBeforeCall(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateCartLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCartLineItemRequestBuilder {
        private final String storeId;
        private final String cartId;
        private final String lineId;
        private String productId;
        private String productVariantId;
        private Integer quantity;
        private Double price;

        private UpdateCartLineItemRequestBuilder(String storeId, String cartId, String lineId) {
            this.storeId = storeId;
            this.cartId = cartId;
            this.lineId = lineId;
        }

        /**
         * Set productId
         * @param productId A unique identifier for the product associated with the cart line item. (optional)
         * @return UpdateCartLineItemRequestBuilder
         */
        public UpdateCartLineItemRequestBuilder productId(String productId) {
            this.productId = productId;
            return this;
        }
        
        /**
         * Set productVariantId
         * @param productVariantId A unique identifier for the product variant associated with the cart line item. (optional)
         * @return UpdateCartLineItemRequestBuilder
         */
        public UpdateCartLineItemRequestBuilder productVariantId(String productVariantId) {
            this.productVariantId = productVariantId;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity The quantity of a cart line item. (optional)
         * @return UpdateCartLineItemRequestBuilder
         */
        public UpdateCartLineItemRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of a cart line item. (optional)
         * @return UpdateCartLineItemRequestBuilder
         */
        public UpdateCartLineItemRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Build call for updateCartLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest = buildBodyParams();
            return updateCartLineItemCall(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest, _callback);
        }

        private EcommerceUpdateCartLineItemRequest buildBodyParams() {
            EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest = new EcommerceUpdateCartLineItemRequest();
            ecommerceUpdateCartLineItemRequest.productId(this.productId);
            ecommerceUpdateCartLineItemRequest.productVariantId(this.productVariantId);
            ecommerceUpdateCartLineItemRequest.quantity(this.quantity);
            ecommerceUpdateCartLineItemRequest.price(this.price);
            return ecommerceUpdateCartLineItemRequest;
        }

        /**
         * Execute updateCartLineItem request
         * @return EcommerceUpdateCartLineItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateCartLineItemResponse execute() throws ApiException {
            EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateCartLineItemResponse> localVarResp = updateCartLineItemWithHttpInfo(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCartLineItem request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateCartLineItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateCartLineItemResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest = buildBodyParams();
            return updateCartLineItemWithHttpInfo(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest);
        }

        /**
         * Execute updateCartLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateCartLineItemResponse> _callback) throws ApiException {
            EcommerceUpdateCartLineItemRequest ecommerceUpdateCartLineItemRequest = buildBodyParams();
            return updateCartLineItemAsync(storeId, cartId, lineId, ecommerceUpdateCartLineItemRequest, _callback);
        }
    }

    /**
     * Update cart line item
     * Update a specific cart line item.
     * @param storeId The store id. (required)
     * @param cartId The id for the cart. (required)
     * @param lineId The id for the line item of a cart. (required)
     * @param ecommerceUpdateCartLineItemRequest  (required)
     * @return UpdateCartLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCartLineItemRequestBuilder updateCartLineItem(String storeId, String cartId, String lineId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (cartId == null) throw new IllegalArgumentException("\"cartId\" is required but got null");
            

        if (lineId == null) throw new IllegalArgumentException("\"lineId\" is required but got null");
            

        return new UpdateCartLineItemRequestBuilder(storeId, cartId, lineId);
    }
    private okhttp3.Call updateCustomerCall(String storeId, String customerId, EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateCustomerRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/customers/{customer_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerValidateBeforeCall(String storeId, String customerId, EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateCustomer(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateCustomer(Async)");
        }

        // verify the required parameter 'ecommerceUpdateCustomerRequest' is set
        if (ecommerceUpdateCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateCustomerRequest' when calling updateCustomer(Async)");
        }

        return updateCustomerCall(storeId, customerId, ecommerceUpdateCustomerRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateCustomerResponse> updateCustomerWithHttpInfo(String storeId, String customerId, EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(storeId, customerId, ecommerceUpdateCustomerRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomerAsync(String storeId, String customerId, EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest, final ApiCallback<EcommerceUpdateCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(storeId, customerId, ecommerceUpdateCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomerRequestBuilder {
        private final String storeId;
        private final String customerId;
        private Boolean optInStatus;
        private String company;
        private String firstName;
        private String lastName;
        private AddressProperty5 address;

        private UpdateCustomerRequestBuilder(String storeId, String customerId) {
            this.storeId = storeId;
            this.customerId = customerId;
        }

        /**
         * Set optInStatus
         * @param optInStatus The customer&#39;s opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don&#39;t opt in to your Mailchimp list [will be added as &#x60;Transactional&#x60; members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder optInStatus(Boolean optInStatus) {
            this.optInStatus = optInStatus;
            return this;
        }
        
        /**
         * Set company
         * @param company The customer&#39;s company. (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder company(String company) {
            this.company = company;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The customer&#39;s first name. (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The customer&#39;s last name. (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder address(AddressProperty5 address) {
            this.address = address;
            return this;
        }
        
        /**
         * Build call for updateCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest = buildBodyParams();
            return updateCustomerCall(storeId, customerId, ecommerceUpdateCustomerRequest, _callback);
        }

        private EcommerceUpdateCustomerRequest buildBodyParams() {
            EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest = new EcommerceUpdateCustomerRequest();
            ecommerceUpdateCustomerRequest.optInStatus(this.optInStatus);
            ecommerceUpdateCustomerRequest.company(this.company);
            ecommerceUpdateCustomerRequest.firstName(this.firstName);
            ecommerceUpdateCustomerRequest.lastName(this.lastName);
            ecommerceUpdateCustomerRequest.address(this.address);
            return ecommerceUpdateCustomerRequest;
        }

        /**
         * Execute updateCustomer request
         * @return EcommerceUpdateCustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateCustomerResponse execute() throws ApiException {
            EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateCustomerResponse> localVarResp = updateCustomerWithHttpInfo(storeId, customerId, ecommerceUpdateCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomer request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateCustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateCustomerResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest = buildBodyParams();
            return updateCustomerWithHttpInfo(storeId, customerId, ecommerceUpdateCustomerRequest);
        }

        /**
         * Execute updateCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateCustomerResponse> _callback) throws ApiException {
            EcommerceUpdateCustomerRequest ecommerceUpdateCustomerRequest = buildBodyParams();
            return updateCustomerAsync(storeId, customerId, ecommerceUpdateCustomerRequest, _callback);
        }
    }

    /**
     * Update customer
     * Update a customer.
     * @param storeId The store id. (required)
     * @param customerId The id for the customer of a store. (required)
     * @param ecommerceUpdateCustomerRequest  (required)
     * @return UpdateCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomerRequestBuilder updateCustomer(String storeId, String customerId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new UpdateCustomerRequestBuilder(storeId, customerId);
    }
    private okhttp3.Call updateOrderLineCall(String storeId, String orderId, String lineId, EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateOrderLineRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "line_id" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderLineValidateBeforeCall(String storeId, String orderId, String lineId, EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateOrderLine(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderLine(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling updateOrderLine(Async)");
        }

        // verify the required parameter 'ecommerceUpdateOrderLineRequest' is set
        if (ecommerceUpdateOrderLineRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateOrderLineRequest' when calling updateOrderLine(Async)");
        }

        return updateOrderLineCall(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateOrderLineResponse> updateOrderLineWithHttpInfo(String storeId, String orderId, String lineId, EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrderLineValidateBeforeCall(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateOrderLineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrderLineAsync(String storeId, String orderId, String lineId, EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest, final ApiCallback<EcommerceUpdateOrderLineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderLineValidateBeforeCall(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateOrderLineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrderLineRequestBuilder {
        private final String storeId;
        private final String orderId;
        private final String lineId;
        private String productId;
        private String productVariantId;
        private Integer quantity;
        private Double price;
        private Double discount;

        private UpdateOrderLineRequestBuilder(String storeId, String orderId, String lineId) {
            this.storeId = storeId;
            this.orderId = orderId;
            this.lineId = lineId;
        }

        /**
         * Set productId
         * @param productId A unique identifier for the product associated with the order line item. (optional)
         * @return UpdateOrderLineRequestBuilder
         */
        public UpdateOrderLineRequestBuilder productId(String productId) {
            this.productId = productId;
            return this;
        }
        
        /**
         * Set productVariantId
         * @param productVariantId A unique identifier for the product variant associated with the order line item. (optional)
         * @return UpdateOrderLineRequestBuilder
         */
        public UpdateOrderLineRequestBuilder productVariantId(String productVariantId) {
            this.productVariantId = productVariantId;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity The quantity of an order line item. (optional)
         * @return UpdateOrderLineRequestBuilder
         */
        public UpdateOrderLineRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of an order line item. (optional)
         * @return UpdateOrderLineRequestBuilder
         */
        public UpdateOrderLineRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set discount
         * @param discount The total discount amount applied to this line item. (optional)
         * @return UpdateOrderLineRequestBuilder
         */
        public UpdateOrderLineRequestBuilder discount(Double discount) {
            this.discount = discount;
            return this;
        }
        
        /**
         * Build call for updateOrderLine
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest = buildBodyParams();
            return updateOrderLineCall(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest, _callback);
        }

        private EcommerceUpdateOrderLineRequest buildBodyParams() {
            EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest = new EcommerceUpdateOrderLineRequest();
            ecommerceUpdateOrderLineRequest.productId(this.productId);
            ecommerceUpdateOrderLineRequest.productVariantId(this.productVariantId);
            ecommerceUpdateOrderLineRequest.quantity(this.quantity);
            ecommerceUpdateOrderLineRequest.price(this.price);
            ecommerceUpdateOrderLineRequest.discount(this.discount);
            return ecommerceUpdateOrderLineRequest;
        }

        /**
         * Execute updateOrderLine request
         * @return EcommerceUpdateOrderLineResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateOrderLineResponse execute() throws ApiException {
            EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateOrderLineResponse> localVarResp = updateOrderLineWithHttpInfo(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrderLine request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateOrderLineResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateOrderLineResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest = buildBodyParams();
            return updateOrderLineWithHttpInfo(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest);
        }

        /**
         * Execute updateOrderLine request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateOrderLineResponse> _callback) throws ApiException {
            EcommerceUpdateOrderLineRequest ecommerceUpdateOrderLineRequest = buildBodyParams();
            return updateOrderLineAsync(storeId, orderId, lineId, ecommerceUpdateOrderLineRequest, _callback);
        }
    }

    /**
     * Update order line item
     * Update a specific order line item.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @param lineId The id for the line item of an order. (required)
     * @param ecommerceUpdateOrderLineRequest  (required)
     * @return UpdateOrderLineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrderLineRequestBuilder updateOrderLine(String storeId, String orderId, String lineId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (lineId == null) throw new IllegalArgumentException("\"lineId\" is required but got null");
            

        return new UpdateOrderLineRequestBuilder(storeId, orderId, lineId);
    }
    private okhttp3.Call updateProductCall(String storeId, String productId, EcommerceUpdateProductRequest ecommerceUpdateProductRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateProductRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(String storeId, String productId, EcommerceUpdateProductRequest ecommerceUpdateProductRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateProduct(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProduct(Async)");
        }

        // verify the required parameter 'ecommerceUpdateProductRequest' is set
        if (ecommerceUpdateProductRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateProductRequest' when calling updateProduct(Async)");
        }

        return updateProductCall(storeId, productId, ecommerceUpdateProductRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateProductResponse> updateProductWithHttpInfo(String storeId, String productId, EcommerceUpdateProductRequest ecommerceUpdateProductRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(storeId, productId, ecommerceUpdateProductRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProductAsync(String storeId, String productId, EcommerceUpdateProductRequest ecommerceUpdateProductRequest, final ApiCallback<EcommerceUpdateProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(storeId, productId, ecommerceUpdateProductRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProductRequestBuilder {
        private final String storeId;
        private final String productId;
        private String title;
        private String description;
        private String handle;
        private String url;
        private String type;
        private String vendor;
        private String imageUrl;
        private List<ECommerceProductVariant1> variants;
        private List<ECommerceProductImage1> images;
        private OffsetDateTime publishedAtForeign;

        private UpdateProductRequestBuilder(String storeId, String productId) {
            this.storeId = storeId;
            this.productId = productId;
        }

        /**
         * Set title
         * @param title The title of a product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of a product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set handle
         * @param handle The handle of a product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL for a product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set vendor
         * @param vendor The vendor for a product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder vendor(String vendor) {
            this.vendor = vendor;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl The image URL for a product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set variants
         * @param variants An array of the product&#39;s variants. At least one variant is required for each product. A variant can use the same &#x60;id&#x60; and &#x60;title&#x60; as the parent product. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder variants(List<ECommerceProductVariant1> variants) {
            this.variants = variants;
            return this;
        }
        
        /**
         * Set images
         * @param images An array of the product&#39;s images. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder images(List<ECommerceProductImage1> images) {
            this.images = images;
            return this;
        }
        
        /**
         * Set publishedAtForeign
         * @param publishedAtForeign The date and time the product was published in ISO 8601 format. (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder publishedAtForeign(OffsetDateTime publishedAtForeign) {
            this.publishedAtForeign = publishedAtForeign;
            return this;
        }
        
        /**
         * Build call for updateProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateProductRequest ecommerceUpdateProductRequest = buildBodyParams();
            return updateProductCall(storeId, productId, ecommerceUpdateProductRequest, _callback);
        }

        private EcommerceUpdateProductRequest buildBodyParams() {
            EcommerceUpdateProductRequest ecommerceUpdateProductRequest = new EcommerceUpdateProductRequest();
            ecommerceUpdateProductRequest.title(this.title);
            ecommerceUpdateProductRequest.description(this.description);
            ecommerceUpdateProductRequest.handle(this.handle);
            ecommerceUpdateProductRequest.url(this.url);
            ecommerceUpdateProductRequest.type(this.type);
            ecommerceUpdateProductRequest.vendor(this.vendor);
            ecommerceUpdateProductRequest.imageUrl(this.imageUrl);
            ecommerceUpdateProductRequest.variants(this.variants);
            ecommerceUpdateProductRequest.images(this.images);
            ecommerceUpdateProductRequest.publishedAtForeign(this.publishedAtForeign);
            return ecommerceUpdateProductRequest;
        }

        /**
         * Execute updateProduct request
         * @return EcommerceUpdateProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateProductResponse execute() throws ApiException {
            EcommerceUpdateProductRequest ecommerceUpdateProductRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateProductResponse> localVarResp = updateProductWithHttpInfo(storeId, productId, ecommerceUpdateProductRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProduct request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateProductResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateProductRequest ecommerceUpdateProductRequest = buildBodyParams();
            return updateProductWithHttpInfo(storeId, productId, ecommerceUpdateProductRequest);
        }

        /**
         * Execute updateProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateProductResponse> _callback) throws ApiException {
            EcommerceUpdateProductRequest ecommerceUpdateProductRequest = buildBodyParams();
            return updateProductAsync(storeId, productId, ecommerceUpdateProductRequest, _callback);
        }
    }

    /**
     * Update product
     * Update a specific product.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param ecommerceUpdateProductRequest  (required)
     * @return UpdateProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProductRequestBuilder updateProduct(String storeId, String productId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new UpdateProductRequestBuilder(storeId, productId);
    }
    private okhttp3.Call updateProductImageCall(String storeId, String productId, String imageId, EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateProductImageRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductImageValidateBeforeCall(String storeId, String productId, String imageId, EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateProductImage(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProductImage(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling updateProductImage(Async)");
        }

        // verify the required parameter 'ecommerceUpdateProductImageRequest' is set
        if (ecommerceUpdateProductImageRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateProductImageRequest' when calling updateProductImage(Async)");
        }

        return updateProductImageCall(storeId, productId, imageId, ecommerceUpdateProductImageRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateProductImageResponse> updateProductImageWithHttpInfo(String storeId, String productId, String imageId, EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductImageValidateBeforeCall(storeId, productId, imageId, ecommerceUpdateProductImageRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateProductImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProductImageAsync(String storeId, String productId, String imageId, EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest, final ApiCallback<EcommerceUpdateProductImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductImageValidateBeforeCall(storeId, productId, imageId, ecommerceUpdateProductImageRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateProductImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProductImageRequestBuilder {
        private final String storeId;
        private final String productId;
        private final String imageId;
        private String id;
        private String url;
        private List<String> variantIds;

        private UpdateProductImageRequestBuilder(String storeId, String productId, String imageId) {
            this.storeId = storeId;
            this.productId = productId;
            this.imageId = imageId;
        }

        /**
         * Set id
         * @param id A unique identifier for the product image. (optional)
         * @return UpdateProductImageRequestBuilder
         */
        public UpdateProductImageRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL for a product image. (optional)
         * @return UpdateProductImageRequestBuilder
         */
        public UpdateProductImageRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set variantIds
         * @param variantIds The list of product variants using the image. (optional)
         * @return UpdateProductImageRequestBuilder
         */
        public UpdateProductImageRequestBuilder variantIds(List<String> variantIds) {
            this.variantIds = variantIds;
            return this;
        }
        
        /**
         * Build call for updateProductImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest = buildBodyParams();
            return updateProductImageCall(storeId, productId, imageId, ecommerceUpdateProductImageRequest, _callback);
        }

        private EcommerceUpdateProductImageRequest buildBodyParams() {
            EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest = new EcommerceUpdateProductImageRequest();
            ecommerceUpdateProductImageRequest.id(this.id);
            ecommerceUpdateProductImageRequest.url(this.url);
            ecommerceUpdateProductImageRequest.variantIds(this.variantIds);
            return ecommerceUpdateProductImageRequest;
        }

        /**
         * Execute updateProductImage request
         * @return EcommerceUpdateProductImageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateProductImageResponse execute() throws ApiException {
            EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateProductImageResponse> localVarResp = updateProductImageWithHttpInfo(storeId, productId, imageId, ecommerceUpdateProductImageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProductImage request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateProductImageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateProductImageResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest = buildBodyParams();
            return updateProductImageWithHttpInfo(storeId, productId, imageId, ecommerceUpdateProductImageRequest);
        }

        /**
         * Execute updateProductImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateProductImageResponse> _callback) throws ApiException {
            EcommerceUpdateProductImageRequest ecommerceUpdateProductImageRequest = buildBodyParams();
            return updateProductImageAsync(storeId, productId, imageId, ecommerceUpdateProductImageRequest, _callback);
        }
    }

    /**
     * Update product image
     * Update a product image.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param imageId The id for the product image. (required)
     * @param ecommerceUpdateProductImageRequest  (required)
     * @return UpdateProductImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProductImageRequestBuilder updateProductImage(String storeId, String productId, String imageId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new UpdateProductImageRequestBuilder(storeId, productId, imageId);
    }
    private okhttp3.Call updateProductVariantCall(String storeId, String productId, String variantId, EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateProductVariantRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductVariantValidateBeforeCall(String storeId, String productId, String variantId, EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateProductVariant(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProductVariant(Async)");
        }

        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling updateProductVariant(Async)");
        }

        // verify the required parameter 'ecommerceUpdateProductVariantRequest' is set
        if (ecommerceUpdateProductVariantRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateProductVariantRequest' when calling updateProductVariant(Async)");
        }

        return updateProductVariantCall(storeId, productId, variantId, ecommerceUpdateProductVariantRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateProductVariantResponse> updateProductVariantWithHttpInfo(String storeId, String productId, String variantId, EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductVariantValidateBeforeCall(storeId, productId, variantId, ecommerceUpdateProductVariantRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateProductVariantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProductVariantAsync(String storeId, String productId, String variantId, EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest, final ApiCallback<EcommerceUpdateProductVariantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductVariantValidateBeforeCall(storeId, productId, variantId, ecommerceUpdateProductVariantRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateProductVariantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProductVariantRequestBuilder {
        private final String storeId;
        private final String productId;
        private final String variantId;
        private String title;
        private String url;
        private String sku;
        private Double price;
        private Integer inventoryQuantity;
        private String imageUrl;
        private String backorders;
        private String visibility;

        private UpdateProductVariantRequestBuilder(String storeId, String productId, String variantId) {
            this.storeId = storeId;
            this.productId = productId;
            this.variantId = variantId;
        }

        /**
         * Set title
         * @param title The title of a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL for a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set sku
         * @param sku The stock keeping unit (SKU) of a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set inventoryQuantity
         * @param inventoryQuantity The inventory quantity of a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder inventoryQuantity(Integer inventoryQuantity) {
            this.inventoryQuantity = inventoryQuantity;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl The image URL for a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set backorders
         * @param backorders The backorders of a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder backorders(String backorders) {
            this.backorders = backorders;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The visibility of a product variant. (optional)
         * @return UpdateProductVariantRequestBuilder
         */
        public UpdateProductVariantRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for updateProductVariant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest = buildBodyParams();
            return updateProductVariantCall(storeId, productId, variantId, ecommerceUpdateProductVariantRequest, _callback);
        }

        private EcommerceUpdateProductVariantRequest buildBodyParams() {
            EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest = new EcommerceUpdateProductVariantRequest();
            ecommerceUpdateProductVariantRequest.title(this.title);
            ecommerceUpdateProductVariantRequest.url(this.url);
            ecommerceUpdateProductVariantRequest.sku(this.sku);
            ecommerceUpdateProductVariantRequest.price(this.price);
            ecommerceUpdateProductVariantRequest.inventoryQuantity(this.inventoryQuantity);
            ecommerceUpdateProductVariantRequest.imageUrl(this.imageUrl);
            ecommerceUpdateProductVariantRequest.backorders(this.backorders);
            ecommerceUpdateProductVariantRequest.visibility(this.visibility);
            return ecommerceUpdateProductVariantRequest;
        }

        /**
         * Execute updateProductVariant request
         * @return EcommerceUpdateProductVariantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateProductVariantResponse execute() throws ApiException {
            EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateProductVariantResponse> localVarResp = updateProductVariantWithHttpInfo(storeId, productId, variantId, ecommerceUpdateProductVariantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProductVariant request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateProductVariantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateProductVariantResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest = buildBodyParams();
            return updateProductVariantWithHttpInfo(storeId, productId, variantId, ecommerceUpdateProductVariantRequest);
        }

        /**
         * Execute updateProductVariant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateProductVariantResponse> _callback) throws ApiException {
            EcommerceUpdateProductVariantRequest ecommerceUpdateProductVariantRequest = buildBodyParams();
            return updateProductVariantAsync(storeId, productId, variantId, ecommerceUpdateProductVariantRequest, _callback);
        }
    }

    /**
     * Update product variant
     * Update a product variant.
     * @param storeId The store id. (required)
     * @param productId The id for the product of a store. (required)
     * @param variantId The id for the product variant. (required)
     * @param ecommerceUpdateProductVariantRequest  (required)
     * @return UpdateProductVariantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProductVariantRequestBuilder updateProductVariant(String storeId, String productId, String variantId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (variantId == null) throw new IllegalArgumentException("\"variantId\" is required but got null");
            

        return new UpdateProductVariantRequestBuilder(storeId, productId, variantId);
    }
    private okhttp3.Call updatePromoCodeCall(String storeId, String promoRuleId, String promoCodeId, EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdatePromoCodeRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()))
            .replace("{" + "promo_code_id" + "}", localVarApiClient.escapeString(promoCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePromoCodeValidateBeforeCall(String storeId, String promoRuleId, String promoCodeId, EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updatePromoCode(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling updatePromoCode(Async)");
        }

        // verify the required parameter 'promoCodeId' is set
        if (promoCodeId == null) {
            throw new ApiException("Missing the required parameter 'promoCodeId' when calling updatePromoCode(Async)");
        }

        // verify the required parameter 'ecommerceUpdatePromoCodeRequest' is set
        if (ecommerceUpdatePromoCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdatePromoCodeRequest' when calling updatePromoCode(Async)");
        }

        return updatePromoCodeCall(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest, _callback);

    }


    private ApiResponse<EcommerceUpdatePromoCodeResponse> updatePromoCodeWithHttpInfo(String storeId, String promoRuleId, String promoCodeId, EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePromoCodeValidateBeforeCall(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdatePromoCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePromoCodeAsync(String storeId, String promoRuleId, String promoCodeId, EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest, final ApiCallback<EcommerceUpdatePromoCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePromoCodeValidateBeforeCall(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdatePromoCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePromoCodeRequestBuilder {
        private final String storeId;
        private final String promoRuleId;
        private final String promoCodeId;
        private String code;
        private String redemptionUrl;
        private Integer usageCount;
        private Boolean enabled;
        private OffsetDateTime createdAtForeign;
        private OffsetDateTime updatedAtForeign;

        private UpdatePromoCodeRequestBuilder(String storeId, String promoRuleId, String promoCodeId) {
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
            this.promoCodeId = promoCodeId;
        }

        /**
         * Set code
         * @param code The discount code. Restricted to UTF-8 characters with max length 50. (optional)
         * @return UpdatePromoCodeRequestBuilder
         */
        public UpdatePromoCodeRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set redemptionUrl
         * @param redemptionUrl The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. (optional)
         * @return UpdatePromoCodeRequestBuilder
         */
        public UpdatePromoCodeRequestBuilder redemptionUrl(String redemptionUrl) {
            this.redemptionUrl = redemptionUrl;
            return this;
        }
        
        /**
         * Set usageCount
         * @param usageCount Number of times promo code has been used. (optional)
         * @return UpdatePromoCodeRequestBuilder
         */
        public UpdatePromoCodeRequestBuilder usageCount(Integer usageCount) {
            this.usageCount = usageCount;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Whether the promo code is currently enabled. (optional)
         * @return UpdatePromoCodeRequestBuilder
         */
        public UpdatePromoCodeRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set createdAtForeign
         * @param createdAtForeign The date and time the promotion was created in ISO 8601 format. (optional)
         * @return UpdatePromoCodeRequestBuilder
         */
        public UpdatePromoCodeRequestBuilder createdAtForeign(OffsetDateTime createdAtForeign) {
            this.createdAtForeign = createdAtForeign;
            return this;
        }
        
        /**
         * Set updatedAtForeign
         * @param updatedAtForeign The date and time the promotion was updated in ISO 8601 format. (optional)
         * @return UpdatePromoCodeRequestBuilder
         */
        public UpdatePromoCodeRequestBuilder updatedAtForeign(OffsetDateTime updatedAtForeign) {
            this.updatedAtForeign = updatedAtForeign;
            return this;
        }
        
        /**
         * Build call for updatePromoCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest = buildBodyParams();
            return updatePromoCodeCall(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest, _callback);
        }

        private EcommerceUpdatePromoCodeRequest buildBodyParams() {
            EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest = new EcommerceUpdatePromoCodeRequest();
            ecommerceUpdatePromoCodeRequest.code(this.code);
            ecommerceUpdatePromoCodeRequest.redemptionUrl(this.redemptionUrl);
            ecommerceUpdatePromoCodeRequest.usageCount(this.usageCount);
            ecommerceUpdatePromoCodeRequest.enabled(this.enabled);
            ecommerceUpdatePromoCodeRequest.createdAtForeign(this.createdAtForeign);
            ecommerceUpdatePromoCodeRequest.updatedAtForeign(this.updatedAtForeign);
            return ecommerceUpdatePromoCodeRequest;
        }

        /**
         * Execute updatePromoCode request
         * @return EcommerceUpdatePromoCodeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdatePromoCodeResponse execute() throws ApiException {
            EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest = buildBodyParams();
            ApiResponse<EcommerceUpdatePromoCodeResponse> localVarResp = updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePromoCode request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdatePromoCodeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdatePromoCodeResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest = buildBodyParams();
            return updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest);
        }

        /**
         * Execute updatePromoCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdatePromoCodeResponse> _callback) throws ApiException {
            EcommerceUpdatePromoCodeRequest ecommerceUpdatePromoCodeRequest = buildBodyParams();
            return updatePromoCodeAsync(storeId, promoRuleId, promoCodeId, ecommerceUpdatePromoCodeRequest, _callback);
        }
    }

    /**
     * Update promo code
     * Update a promo code.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @param promoCodeId The id for the promo code of a store. (required)
     * @param ecommerceUpdatePromoCodeRequest  (required)
     * @return UpdatePromoCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePromoCodeRequestBuilder updatePromoCode(String storeId, String promoRuleId, String promoCodeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        if (promoCodeId == null) throw new IllegalArgumentException("\"promoCodeId\" is required but got null");
            

        return new UpdatePromoCodeRequestBuilder(storeId, promoRuleId, promoCodeId);
    }
    private okhttp3.Call updatePromoRuleCall(String storeId, String promoRuleId, EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdatePromoRuleRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "promo_rule_id" + "}", localVarApiClient.escapeString(promoRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePromoRuleValidateBeforeCall(String storeId, String promoRuleId, EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updatePromoRule(Async)");
        }

        // verify the required parameter 'promoRuleId' is set
        if (promoRuleId == null) {
            throw new ApiException("Missing the required parameter 'promoRuleId' when calling updatePromoRule(Async)");
        }

        // verify the required parameter 'ecommerceUpdatePromoRuleRequest' is set
        if (ecommerceUpdatePromoRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdatePromoRuleRequest' when calling updatePromoRule(Async)");
        }

        return updatePromoRuleCall(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest, _callback);

    }


    private ApiResponse<EcommerceUpdatePromoRuleResponse> updatePromoRuleWithHttpInfo(String storeId, String promoRuleId, EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePromoRuleValidateBeforeCall(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdatePromoRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePromoRuleAsync(String storeId, String promoRuleId, EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest, final ApiCallback<EcommerceUpdatePromoRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePromoRuleValidateBeforeCall(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdatePromoRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePromoRuleRequestBuilder {
        private final String storeId;
        private final String promoRuleId;
        private String title;
        private String description;
        private OffsetDateTime startsAt;
        private String endsAt;
        private Float amount;
        private String type;
        private String target;
        private Boolean enabled;
        private OffsetDateTime createdAtForeign;
        private OffsetDateTime updatedAtForeign;

        private UpdatePromoRuleRequestBuilder(String storeId, String promoRuleId) {
            this.storeId = storeId;
            this.promoRuleId = promoRuleId;
        }

        /**
         * Set title
         * @param title The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of a promotion restricted to UTF-8 characters with max length 255. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set startsAt
         * @param startsAt The date and time when the promotion is in effect in ISO 8601 format. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder startsAt(OffsetDateTime startsAt) {
            this.startsAt = startsAt;
            return this;
        }
        
        /**
         * Set endsAt
         * @param endsAt The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder endsAt(String endsAt) {
            this.endsAt = endsAt;
            return this;
        }
        
        /**
         * Set amount
         * @param amount The amount of the promo code discount. If &#39;type&#39; is &#39;fixed&#39;, the amount is treated as a monetary value. If &#39;type&#39; is &#39;percentage&#39;, amount must be a decimal value between 0.0 and 1.0, inclusive. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set type
         * @param type Type of discount. For free shipping set type to fixed. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set target
         * @param target The target that the discount applies to. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder target(String target) {
            this.target = target;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Whether the promo rule is currently enabled. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set createdAtForeign
         * @param createdAtForeign The date and time the promotion was created in ISO 8601 format. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder createdAtForeign(OffsetDateTime createdAtForeign) {
            this.createdAtForeign = createdAtForeign;
            return this;
        }
        
        /**
         * Set updatedAtForeign
         * @param updatedAtForeign The date and time the promotion was updated in ISO 8601 format. (optional)
         * @return UpdatePromoRuleRequestBuilder
         */
        public UpdatePromoRuleRequestBuilder updatedAtForeign(OffsetDateTime updatedAtForeign) {
            this.updatedAtForeign = updatedAtForeign;
            return this;
        }
        
        /**
         * Build call for updatePromoRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest = buildBodyParams();
            return updatePromoRuleCall(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest, _callback);
        }

        private EcommerceUpdatePromoRuleRequest buildBodyParams() {
            EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest = new EcommerceUpdatePromoRuleRequest();
            ecommerceUpdatePromoRuleRequest.title(this.title);
            ecommerceUpdatePromoRuleRequest.description(this.description);
            ecommerceUpdatePromoRuleRequest.startsAt(this.startsAt);
            ecommerceUpdatePromoRuleRequest.endsAt(this.endsAt);
            ecommerceUpdatePromoRuleRequest.amount(this.amount);
            if (this.type != null)
            ecommerceUpdatePromoRuleRequest.type(EcommerceUpdatePromoRuleRequest.TypeEnum.fromValue(this.type));
            if (this.target != null)
            ecommerceUpdatePromoRuleRequest.target(EcommerceUpdatePromoRuleRequest.TargetEnum.fromValue(this.target));
            ecommerceUpdatePromoRuleRequest.enabled(this.enabled);
            ecommerceUpdatePromoRuleRequest.createdAtForeign(this.createdAtForeign);
            ecommerceUpdatePromoRuleRequest.updatedAtForeign(this.updatedAtForeign);
            return ecommerceUpdatePromoRuleRequest;
        }

        /**
         * Execute updatePromoRule request
         * @return EcommerceUpdatePromoRuleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdatePromoRuleResponse execute() throws ApiException {
            EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest = buildBodyParams();
            ApiResponse<EcommerceUpdatePromoRuleResponse> localVarResp = updatePromoRuleWithHttpInfo(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePromoRule request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdatePromoRuleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdatePromoRuleResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest = buildBodyParams();
            return updatePromoRuleWithHttpInfo(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest);
        }

        /**
         * Execute updatePromoRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdatePromoRuleResponse> _callback) throws ApiException {
            EcommerceUpdatePromoRuleRequest ecommerceUpdatePromoRuleRequest = buildBodyParams();
            return updatePromoRuleAsync(storeId, promoRuleId, ecommerceUpdatePromoRuleRequest, _callback);
        }
    }

    /**
     * Update promo rule
     * Update a promo rule.
     * @param storeId The store id. (required)
     * @param promoRuleId The id for the promo rule of a store. (required)
     * @param ecommerceUpdatePromoRuleRequest  (required)
     * @return UpdatePromoRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePromoRuleRequestBuilder updatePromoRule(String storeId, String promoRuleId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (promoRuleId == null) throw new IllegalArgumentException("\"promoRuleId\" is required but got null");
            

        return new UpdatePromoRuleRequestBuilder(storeId, promoRuleId);
    }
    private okhttp3.Call updateSpecificOrderCall(String storeId, String orderId, EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateSpecificOrderRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}/orders/{order_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificOrderValidateBeforeCall(String storeId, String orderId, EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateSpecificOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateSpecificOrder(Async)");
        }

        // verify the required parameter 'ecommerceUpdateSpecificOrderRequest' is set
        if (ecommerceUpdateSpecificOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateSpecificOrderRequest' when calling updateSpecificOrder(Async)");
        }

        return updateSpecificOrderCall(storeId, orderId, ecommerceUpdateSpecificOrderRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateSpecificOrderResponse> updateSpecificOrderWithHttpInfo(String storeId, String orderId, EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificOrderValidateBeforeCall(storeId, orderId, ecommerceUpdateSpecificOrderRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateSpecificOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecificOrderAsync(String storeId, String orderId, EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest, final ApiCallback<EcommerceUpdateSpecificOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificOrderValidateBeforeCall(storeId, orderId, ecommerceUpdateSpecificOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateSpecificOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecificOrderRequestBuilder {
        private final String storeId;
        private final String orderId;
        private ECommerceCustomerProperty3 customer;
        private String campaignId;
        private String landingSite;
        private String financialStatus;
        private String fulfillmentStatus;
        private String currencyCode;
        private Double orderTotal;
        private String orderUrl;
        private Double discountTotal;
        private Double taxTotal;
        private Double shippingTotal;
        private String trackingCode;
        private OffsetDateTime processedAtForeign;
        private OffsetDateTime cancelledAtForeign;
        private OffsetDateTime updatedAtForeign;
        private ShippingAddressProperty1 shippingAddress;
        private BillingAddressProperty1 billingAddress;
        private List<PromosPropertyInner> promos;
        private List<ECommerceOrderLineItem1> lines;
        private OutreachProperty1 outreach;
        private String trackingNumber;
        private String trackingCarrier;
        private String trackingUrl;

        private UpdateSpecificOrderRequestBuilder(String storeId, String orderId) {
            this.storeId = storeId;
            this.orderId = orderId;
        }

        /**
         * Set customer
         * @param customer  (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder customer(ECommerceCustomerProperty3 customer) {
            this.customer = customer;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId A string that uniquely identifies the campaign associated with an order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set landingSite
         * @param landingSite The URL for the page where the buyer landed when entering the shop. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder landingSite(String landingSite) {
            this.landingSite = landingSite;
            return this;
        }
        
        /**
         * Set financialStatus
         * @param financialStatus The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder financialStatus(String financialStatus) {
            this.financialStatus = financialStatus;
            return this;
        }
        
        /**
         * Set fulfillmentStatus
         * @param fulfillmentStatus The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder fulfillmentStatus(String fulfillmentStatus) {
            this.fulfillmentStatus = fulfillmentStatus;
            return this;
        }
        
        /**
         * Set currencyCode
         * @param currencyCode The three-letter ISO 4217 code for the currency that the store accepts. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Set orderTotal
         * @param orderTotal The order total associated with an order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder orderTotal(Double orderTotal) {
            this.orderTotal = orderTotal;
            return this;
        }
        
        /**
         * Set orderUrl
         * @param orderUrl The URL for the order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder orderUrl(String orderUrl) {
            this.orderUrl = orderUrl;
            return this;
        }
        
        /**
         * Set discountTotal
         * @param discountTotal The total amount of the discounts to be applied to the price of the order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder discountTotal(Double discountTotal) {
            this.discountTotal = discountTotal;
            return this;
        }
        
        /**
         * Set taxTotal
         * @param taxTotal The tax total associated with an order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder taxTotal(Double taxTotal) {
            this.taxTotal = taxTotal;
            return this;
        }
        
        /**
         * Set shippingTotal
         * @param shippingTotal The shipping total for the order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder shippingTotal(Double shippingTotal) {
            this.shippingTotal = shippingTotal;
            return this;
        }
        
        /**
         * Set trackingCode
         * @param trackingCode The Mailchimp tracking code for the order. Uses the &#39;mc_tc&#39; parameter in E-Commerce tracking URLs. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder trackingCode(String trackingCode) {
            this.trackingCode = trackingCode;
            return this;
        }
        
        /**
         * Set processedAtForeign
         * @param processedAtForeign The date and time the order was processed in ISO 8601 format. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder processedAtForeign(OffsetDateTime processedAtForeign) {
            this.processedAtForeign = processedAtForeign;
            return this;
        }
        
        /**
         * Set cancelledAtForeign
         * @param cancelledAtForeign The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder cancelledAtForeign(OffsetDateTime cancelledAtForeign) {
            this.cancelledAtForeign = cancelledAtForeign;
            return this;
        }
        
        /**
         * Set updatedAtForeign
         * @param updatedAtForeign The date and time the order was updated in ISO 8601 format. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder updatedAtForeign(OffsetDateTime updatedAtForeign) {
            this.updatedAtForeign = updatedAtForeign;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder shippingAddress(ShippingAddressProperty1 shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder billingAddress(BillingAddressProperty1 billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set promos
         * @param promos The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder promos(List<PromosPropertyInner> promos) {
            this.promos = promos;
            return this;
        }
        
        /**
         * Set lines
         * @param lines An array of the order&#39;s line items. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder lines(List<ECommerceOrderLineItem1> lines) {
            this.lines = lines;
            return this;
        }
        
        /**
         * Set outreach
         * @param outreach  (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder outreach(OutreachProperty1 outreach) {
            this.outreach = outreach;
            return this;
        }
        
        /**
         * Set trackingNumber
         * @param trackingNumber The tracking number associated with the order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder trackingNumber(String trackingNumber) {
            this.trackingNumber = trackingNumber;
            return this;
        }
        
        /**
         * Set trackingCarrier
         * @param trackingCarrier The tracking carrier associated with the order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder trackingCarrier(String trackingCarrier) {
            this.trackingCarrier = trackingCarrier;
            return this;
        }
        
        /**
         * Set trackingUrl
         * @param trackingUrl The tracking URL associated with the order. (optional)
         * @return UpdateSpecificOrderRequestBuilder
         */
        public UpdateSpecificOrderRequestBuilder trackingUrl(String trackingUrl) {
            this.trackingUrl = trackingUrl;
            return this;
        }
        
        /**
         * Build call for updateSpecificOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest = buildBodyParams();
            return updateSpecificOrderCall(storeId, orderId, ecommerceUpdateSpecificOrderRequest, _callback);
        }

        private EcommerceUpdateSpecificOrderRequest buildBodyParams() {
            EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest = new EcommerceUpdateSpecificOrderRequest();
            ecommerceUpdateSpecificOrderRequest.customer(this.customer);
            ecommerceUpdateSpecificOrderRequest.campaignId(this.campaignId);
            ecommerceUpdateSpecificOrderRequest.landingSite(this.landingSite);
            ecommerceUpdateSpecificOrderRequest.financialStatus(this.financialStatus);
            ecommerceUpdateSpecificOrderRequest.fulfillmentStatus(this.fulfillmentStatus);
            ecommerceUpdateSpecificOrderRequest.currencyCode(this.currencyCode);
            ecommerceUpdateSpecificOrderRequest.orderTotal(this.orderTotal);
            ecommerceUpdateSpecificOrderRequest.orderUrl(this.orderUrl);
            ecommerceUpdateSpecificOrderRequest.discountTotal(this.discountTotal);
            ecommerceUpdateSpecificOrderRequest.taxTotal(this.taxTotal);
            ecommerceUpdateSpecificOrderRequest.shippingTotal(this.shippingTotal);
            if (this.trackingCode != null)
            ecommerceUpdateSpecificOrderRequest.trackingCode(EcommerceUpdateSpecificOrderRequest.TrackingCodeEnum.fromValue(this.trackingCode));
            ecommerceUpdateSpecificOrderRequest.processedAtForeign(this.processedAtForeign);
            ecommerceUpdateSpecificOrderRequest.cancelledAtForeign(this.cancelledAtForeign);
            ecommerceUpdateSpecificOrderRequest.updatedAtForeign(this.updatedAtForeign);
            ecommerceUpdateSpecificOrderRequest.shippingAddress(this.shippingAddress);
            ecommerceUpdateSpecificOrderRequest.billingAddress(this.billingAddress);
            ecommerceUpdateSpecificOrderRequest.promos(this.promos);
            ecommerceUpdateSpecificOrderRequest.lines(this.lines);
            ecommerceUpdateSpecificOrderRequest.outreach(this.outreach);
            ecommerceUpdateSpecificOrderRequest.trackingNumber(this.trackingNumber);
            ecommerceUpdateSpecificOrderRequest.trackingCarrier(this.trackingCarrier);
            ecommerceUpdateSpecificOrderRequest.trackingUrl(this.trackingUrl);
            return ecommerceUpdateSpecificOrderRequest;
        }

        /**
         * Execute updateSpecificOrder request
         * @return EcommerceUpdateSpecificOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateSpecificOrderResponse execute() throws ApiException {
            EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateSpecificOrderResponse> localVarResp = updateSpecificOrderWithHttpInfo(storeId, orderId, ecommerceUpdateSpecificOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecificOrder request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateSpecificOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateSpecificOrderResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest = buildBodyParams();
            return updateSpecificOrderWithHttpInfo(storeId, orderId, ecommerceUpdateSpecificOrderRequest);
        }

        /**
         * Execute updateSpecificOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateSpecificOrderResponse> _callback) throws ApiException {
            EcommerceUpdateSpecificOrderRequest ecommerceUpdateSpecificOrderRequest = buildBodyParams();
            return updateSpecificOrderAsync(storeId, orderId, ecommerceUpdateSpecificOrderRequest, _callback);
        }
    }

    /**
     * Update order
     * Update a specific order.
     * @param storeId The store id. (required)
     * @param orderId The id for the order in a store. (required)
     * @param ecommerceUpdateSpecificOrderRequest  (required)
     * @return UpdateSpecificOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificOrderRequestBuilder updateSpecificOrder(String storeId, String orderId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new UpdateSpecificOrderRequestBuilder(storeId, orderId);
    }
    private okhttp3.Call updateStoreCall(String storeId, EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecommerceUpdateStoreRequest;

        // create path and map variables
        String localVarPath = "/ecommerce/stores/{store_id}"
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStoreValidateBeforeCall(String storeId, EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStore(Async)");
        }

        // verify the required parameter 'ecommerceUpdateStoreRequest' is set
        if (ecommerceUpdateStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'ecommerceUpdateStoreRequest' when calling updateStore(Async)");
        }

        return updateStoreCall(storeId, ecommerceUpdateStoreRequest, _callback);

    }


    private ApiResponse<EcommerceUpdateStoreResponse> updateStoreWithHttpInfo(String storeId, EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStoreValidateBeforeCall(storeId, ecommerceUpdateStoreRequest, null);
        Type localVarReturnType = new TypeToken<EcommerceUpdateStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStoreAsync(String storeId, EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest, final ApiCallback<EcommerceUpdateStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStoreValidateBeforeCall(storeId, ecommerceUpdateStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<EcommerceUpdateStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStoreRequestBuilder {
        private final String storeId;
        private String name;
        private String platform;
        private String domain;
        private Boolean isSyncing;
        private String emailAddress;
        private String currencyCode;
        private String moneyFormat;
        private String primaryLocale;
        private String timezone;
        private String phone;
        private AddressProperty1 address;

        private UpdateStoreRequestBuilder(String storeId) {
            this.storeId = storeId;
        }

        /**
         * Set name
         * @param name The name of the store. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set platform
         * @param platform The e-commerce platform of the store. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder platform(String platform) {
            this.platform = platform;
            return this;
        }
        
        /**
         * Set domain
         * @param domain The store domain. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set isSyncing
         * @param isSyncing Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder isSyncing(Boolean isSyncing) {
            this.isSyncing = isSyncing;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress The email address for the store. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set currencyCode
         * @param currencyCode The three-letter ISO 4217 code for the currency that the store accepts. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Set moneyFormat
         * @param moneyFormat The currency format for the store. For example: &#x60;$&#x60;, &#x60;£&#x60;, etc. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder moneyFormat(String moneyFormat) {
            this.moneyFormat = moneyFormat;
            return this;
        }
        
        /**
         * Set primaryLocale
         * @param primaryLocale The primary locale for the store. For example: &#x60;en&#x60;, &#x60;de&#x60;, etc. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder primaryLocale(String primaryLocale) {
            this.primaryLocale = primaryLocale;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone for the store. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The store phone number. (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return UpdateStoreRequestBuilder
         */
        public UpdateStoreRequestBuilder address(AddressProperty1 address) {
            this.address = address;
            return this;
        }
        
        /**
         * Build call for updateStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest = buildBodyParams();
            return updateStoreCall(storeId, ecommerceUpdateStoreRequest, _callback);
        }

        private EcommerceUpdateStoreRequest buildBodyParams() {
            EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest = new EcommerceUpdateStoreRequest();
            ecommerceUpdateStoreRequest.name(this.name);
            ecommerceUpdateStoreRequest.platform(this.platform);
            ecommerceUpdateStoreRequest.domain(this.domain);
            ecommerceUpdateStoreRequest.isSyncing(this.isSyncing);
            ecommerceUpdateStoreRequest.emailAddress(this.emailAddress);
            ecommerceUpdateStoreRequest.currencyCode(this.currencyCode);
            ecommerceUpdateStoreRequest.moneyFormat(this.moneyFormat);
            ecommerceUpdateStoreRequest.primaryLocale(this.primaryLocale);
            ecommerceUpdateStoreRequest.timezone(this.timezone);
            ecommerceUpdateStoreRequest.phone(this.phone);
            ecommerceUpdateStoreRequest.address(this.address);
            return ecommerceUpdateStoreRequest;
        }

        /**
         * Execute updateStore request
         * @return EcommerceUpdateStoreResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public EcommerceUpdateStoreResponse execute() throws ApiException {
            EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest = buildBodyParams();
            ApiResponse<EcommerceUpdateStoreResponse> localVarResp = updateStoreWithHttpInfo(storeId, ecommerceUpdateStoreRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStore request with HTTP info returned
         * @return ApiResponse&lt;EcommerceUpdateStoreResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EcommerceUpdateStoreResponse> executeWithHttpInfo() throws ApiException {
            EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest = buildBodyParams();
            return updateStoreWithHttpInfo(storeId, ecommerceUpdateStoreRequest);
        }

        /**
         * Execute updateStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EcommerceUpdateStoreResponse> _callback) throws ApiException {
            EcommerceUpdateStoreRequest ecommerceUpdateStoreRequest = buildBodyParams();
            return updateStoreAsync(storeId, ecommerceUpdateStoreRequest, _callback);
        }
    }

    /**
     * Update store
     * Update a store.
     * @param storeId The store id. (required)
     * @param ecommerceUpdateStoreRequest  (required)
     * @return UpdateStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStoreRequestBuilder updateStore(String storeId) throws IllegalArgumentException {
        if (storeId == null) throw new IllegalArgumentException("\"storeId\" is required but got null");
            

        return new UpdateStoreRequestBuilder(storeId);
    }
}
