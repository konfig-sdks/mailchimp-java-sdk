/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BatchesGetOperationStatus200Response;
import com.konfigthis.client.model.BatchesGetOperationStatusResponse;
import com.konfigthis.client.model.BatchesGetOperationStatusdefaultResponse;
import com.konfigthis.client.model.BatchesListRequestsSummary200Response;
import com.konfigthis.client.model.BatchesListRequestsSummaryResponse;
import com.konfigthis.client.model.BatchesListRequestsSummarydefaultResponse;
import com.konfigthis.client.model.BatchesStartOperationProcess200Response;
import com.konfigthis.client.model.BatchesStartOperationProcessRequest;
import com.konfigthis.client.model.BatchesStartOperationProcessResponse;
import com.konfigthis.client.model.BatchesStartOperationProcessdefaultResponse;
import com.konfigthis.client.model.BatchesStopRequestResponse;
import com.konfigthis.client.model.BatchesStopRequestdefaultResponse;
import com.konfigthis.client.model.Operations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BatchesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BatchesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getOperationStatusCall(String batchId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batches/{batch_id}"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationStatusValidateBeforeCall(String batchId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getOperationStatus(Async)");
        }

        return getOperationStatusCall(batchId, fields, excludeFields, _callback);

    }


    private ApiResponse<BatchesGetOperationStatusResponse> getOperationStatusWithHttpInfo(String batchId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getOperationStatusValidateBeforeCall(batchId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<BatchesGetOperationStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOperationStatusAsync(String batchId, List<String> fields, List<String> excludeFields, final ApiCallback<BatchesGetOperationStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationStatusValidateBeforeCall(batchId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<BatchesGetOperationStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOperationStatusRequestBuilder {
        private final String batchId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetOperationStatusRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetOperationStatusRequestBuilder
         */
        public GetOperationStatusRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetOperationStatusRequestBuilder
         */
        public GetOperationStatusRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getOperationStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOperationStatusCall(batchId, fields, excludeFields, _callback);
        }


        /**
         * Execute getOperationStatus request
         * @return BatchesGetOperationStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchesGetOperationStatusResponse execute() throws ApiException {
            ApiResponse<BatchesGetOperationStatusResponse> localVarResp = getOperationStatusWithHttpInfo(batchId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOperationStatus request with HTTP info returned
         * @return ApiResponse&lt;BatchesGetOperationStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchesGetOperationStatusResponse> executeWithHttpInfo() throws ApiException {
            return getOperationStatusWithHttpInfo(batchId, fields, excludeFields);
        }

        /**
         * Execute getOperationStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchesGetOperationStatusResponse> _callback) throws ApiException {
            return getOperationStatusAsync(batchId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get batch operation status
     * Get the status of a batch request.
     * @param batchId The unique id for the batch operation. (required)
     * @return GetOperationStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetOperationStatusRequestBuilder getOperationStatus(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            

        return new GetOperationStatusRequestBuilder(batchId);
    }
    private okhttp3.Call listRequestsSummaryCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRequestsSummaryValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listRequestsSummaryCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<BatchesListRequestsSummaryResponse> listRequestsSummaryWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listRequestsSummaryValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<BatchesListRequestsSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRequestsSummaryAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<BatchesListRequestsSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRequestsSummaryValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<BatchesListRequestsSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestsSummaryRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListRequestsSummaryRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListRequestsSummaryRequestBuilder
         */
        public ListRequestsSummaryRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListRequestsSummaryRequestBuilder
         */
        public ListRequestsSummaryRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListRequestsSummaryRequestBuilder
         */
        public ListRequestsSummaryRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListRequestsSummaryRequestBuilder
         */
        public ListRequestsSummaryRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listRequestsSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRequestsSummaryCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listRequestsSummary request
         * @return BatchesListRequestsSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchesListRequestsSummaryResponse execute() throws ApiException {
            ApiResponse<BatchesListRequestsSummaryResponse> localVarResp = listRequestsSummaryWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRequestsSummary request with HTTP info returned
         * @return ApiResponse&lt;BatchesListRequestsSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchesListRequestsSummaryResponse> executeWithHttpInfo() throws ApiException {
            return listRequestsSummaryWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listRequestsSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchesListRequestsSummaryResponse> _callback) throws ApiException {
            return listRequestsSummaryAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List batch requests
     * Get a summary of batch requests that have been made.
     * @return ListRequestsSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestsSummaryRequestBuilder listRequestsSummary() throws IllegalArgumentException {
        return new ListRequestsSummaryRequestBuilder();
    }
    private okhttp3.Call startOperationProcessCall(BatchesStartOperationProcessRequest batchesStartOperationProcessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchesStartOperationProcessRequest;

        // create path and map variables
        String localVarPath = "/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startOperationProcessValidateBeforeCall(BatchesStartOperationProcessRequest batchesStartOperationProcessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchesStartOperationProcessRequest' is set
        if (batchesStartOperationProcessRequest == null) {
            throw new ApiException("Missing the required parameter 'batchesStartOperationProcessRequest' when calling startOperationProcess(Async)");
        }

        return startOperationProcessCall(batchesStartOperationProcessRequest, _callback);

    }


    private ApiResponse<BatchesStartOperationProcessResponse> startOperationProcessWithHttpInfo(BatchesStartOperationProcessRequest batchesStartOperationProcessRequest) throws ApiException {
        okhttp3.Call localVarCall = startOperationProcessValidateBeforeCall(batchesStartOperationProcessRequest, null);
        Type localVarReturnType = new TypeToken<BatchesStartOperationProcessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startOperationProcessAsync(BatchesStartOperationProcessRequest batchesStartOperationProcessRequest, final ApiCallback<BatchesStartOperationProcessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startOperationProcessValidateBeforeCall(batchesStartOperationProcessRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchesStartOperationProcessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartOperationProcessRequestBuilder {
        private final List<Operations> operations;

        private StartOperationProcessRequestBuilder(List<Operations> operations) {
            this.operations = operations;
        }

        /**
         * Build call for startOperationProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchesStartOperationProcessRequest batchesStartOperationProcessRequest = buildBodyParams();
            return startOperationProcessCall(batchesStartOperationProcessRequest, _callback);
        }

        private BatchesStartOperationProcessRequest buildBodyParams() {
            BatchesStartOperationProcessRequest batchesStartOperationProcessRequest = new BatchesStartOperationProcessRequest();
            batchesStartOperationProcessRequest.operations(this.operations);
            return batchesStartOperationProcessRequest;
        }

        /**
         * Execute startOperationProcess request
         * @return BatchesStartOperationProcessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchesStartOperationProcessResponse execute() throws ApiException {
            BatchesStartOperationProcessRequest batchesStartOperationProcessRequest = buildBodyParams();
            ApiResponse<BatchesStartOperationProcessResponse> localVarResp = startOperationProcessWithHttpInfo(batchesStartOperationProcessRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startOperationProcess request with HTTP info returned
         * @return ApiResponse&lt;BatchesStartOperationProcessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchesStartOperationProcessResponse> executeWithHttpInfo() throws ApiException {
            BatchesStartOperationProcessRequest batchesStartOperationProcessRequest = buildBodyParams();
            return startOperationProcessWithHttpInfo(batchesStartOperationProcessRequest);
        }

        /**
         * Execute startOperationProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchesStartOperationProcessResponse> _callback) throws ApiException {
            BatchesStartOperationProcessRequest batchesStartOperationProcessRequest = buildBodyParams();
            return startOperationProcessAsync(batchesStartOperationProcessRequest, _callback);
        }
    }

    /**
     * Start batch operation
     * Begin processing a batch operations request.
     * @param batchesStartOperationProcessRequest  (required)
     * @return StartOperationProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public StartOperationProcessRequestBuilder startOperationProcess(List<Operations> operations) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        return new StartOperationProcessRequestBuilder(operations);
    }
    private okhttp3.Call stopRequestCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batches/{batch_id}"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopRequestValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling stopRequest(Async)");
        }

        return stopRequestCall(batchId, _callback);

    }


    private ApiResponse<Void> stopRequestWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = stopRequestValidateBeforeCall(batchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call stopRequestAsync(String batchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopRequestValidateBeforeCall(batchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StopRequestRequestBuilder {
        private final String batchId;

        private StopRequestRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for stopRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopRequestCall(batchId, _callback);
        }


        /**
         * Execute stopRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            stopRequestWithHttpInfo(batchId);
        }

        /**
         * Execute stopRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return stopRequestWithHttpInfo(batchId);
        }

        /**
         * Execute stopRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return stopRequestAsync(batchId, _callback);
        }
    }

    /**
     * Delete batch request
     * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
     * @param batchId The unique id for the batch operation. (required)
     * @return StopRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public StopRequestRequestBuilder stopRequest(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            

        return new StopRequestRequestBuilder(batchId);
    }
}
