/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSite200Response;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSiteRequest;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSiteResponse;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSitedefaultResponse;
import com.konfigthis.client.model.ConnectedSitesGetInfo200Response;
import com.konfigthis.client.model.ConnectedSitesGetInfoResponse;
import com.konfigthis.client.model.ConnectedSitesGetInfodefaultResponse;
import com.konfigthis.client.model.ConnectedSitesListAll200Response;
import com.konfigthis.client.model.ConnectedSitesListAllResponse;
import com.konfigthis.client.model.ConnectedSitesListAlldefaultResponse;
import com.konfigthis.client.model.ConnectedSitesRemoveSiteResponse;
import com.konfigthis.client.model.ConnectedSitesRemoveSitedefaultResponse;
import com.konfigthis.client.model.ConnectedSitesVerifyScriptInstallationResponse;
import com.konfigthis.client.model.ConnectedSitesVerifyScriptInstallationdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConnectedSitesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectedSitesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectedSitesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMailchimpSiteCall(ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectedSitesCreateNewMailchimpSiteRequest;

        // create path and map variables
        String localVarPath = "/connected-sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMailchimpSiteValidateBeforeCall(ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectedSitesCreateNewMailchimpSiteRequest' is set
        if (connectedSitesCreateNewMailchimpSiteRequest == null) {
            throw new ApiException("Missing the required parameter 'connectedSitesCreateNewMailchimpSiteRequest' when calling createNewMailchimpSite(Async)");
        }

        return createNewMailchimpSiteCall(connectedSitesCreateNewMailchimpSiteRequest, _callback);

    }


    private ApiResponse<ConnectedSitesCreateNewMailchimpSiteResponse> createNewMailchimpSiteWithHttpInfo(ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewMailchimpSiteValidateBeforeCall(connectedSitesCreateNewMailchimpSiteRequest, null);
        Type localVarReturnType = new TypeToken<ConnectedSitesCreateNewMailchimpSiteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMailchimpSiteAsync(ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest, final ApiCallback<ConnectedSitesCreateNewMailchimpSiteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMailchimpSiteValidateBeforeCall(connectedSitesCreateNewMailchimpSiteRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectedSitesCreateNewMailchimpSiteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMailchimpSiteRequestBuilder {
        private final String foreignId;
        private final String domain;

        private CreateNewMailchimpSiteRequestBuilder(String foreignId, String domain) {
            this.foreignId = foreignId;
            this.domain = domain;
        }

        /**
         * Build call for createNewMailchimpSite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest = buildBodyParams();
            return createNewMailchimpSiteCall(connectedSitesCreateNewMailchimpSiteRequest, _callback);
        }

        private ConnectedSitesCreateNewMailchimpSiteRequest buildBodyParams() {
            ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest = new ConnectedSitesCreateNewMailchimpSiteRequest();
            connectedSitesCreateNewMailchimpSiteRequest.foreignId(this.foreignId);
            connectedSitesCreateNewMailchimpSiteRequest.domain(this.domain);
            return connectedSitesCreateNewMailchimpSiteRequest;
        }

        /**
         * Execute createNewMailchimpSite request
         * @return ConnectedSitesCreateNewMailchimpSiteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ConnectedSitesCreateNewMailchimpSiteResponse execute() throws ApiException {
            ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest = buildBodyParams();
            ApiResponse<ConnectedSitesCreateNewMailchimpSiteResponse> localVarResp = createNewMailchimpSiteWithHttpInfo(connectedSitesCreateNewMailchimpSiteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMailchimpSite request with HTTP info returned
         * @return ApiResponse&lt;ConnectedSitesCreateNewMailchimpSiteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectedSitesCreateNewMailchimpSiteResponse> executeWithHttpInfo() throws ApiException {
            ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest = buildBodyParams();
            return createNewMailchimpSiteWithHttpInfo(connectedSitesCreateNewMailchimpSiteRequest);
        }

        /**
         * Execute createNewMailchimpSite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectedSitesCreateNewMailchimpSiteResponse> _callback) throws ApiException {
            ConnectedSitesCreateNewMailchimpSiteRequest connectedSitesCreateNewMailchimpSiteRequest = buildBodyParams();
            return createNewMailchimpSiteAsync(connectedSitesCreateNewMailchimpSiteRequest, _callback);
        }
    }

    /**
     * Add connected site
     * Create a new Mailchimp connected site.
     * @param connectedSitesCreateNewMailchimpSiteRequest  (required)
     * @return CreateNewMailchimpSiteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMailchimpSiteRequestBuilder createNewMailchimpSite(String foreignId, String domain) throws IllegalArgumentException {
        if (foreignId == null) throw new IllegalArgumentException("\"foreignId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CreateNewMailchimpSiteRequestBuilder(foreignId, domain);
    }
    private okhttp3.Call getInfoCall(String connectedSiteId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connected-sites/{connected_site_id}"
            .replace("{" + "connected_site_id" + "}", localVarApiClient.escapeString(connectedSiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String connectedSiteId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectedSiteId' is set
        if (connectedSiteId == null) {
            throw new ApiException("Missing the required parameter 'connectedSiteId' when calling getInfo(Async)");
        }

        return getInfoCall(connectedSiteId, fields, excludeFields, _callback);

    }


    private ApiResponse<ConnectedSitesGetInfoResponse> getInfoWithHttpInfo(String connectedSiteId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(connectedSiteId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ConnectedSitesGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String connectedSiteId, List<String> fields, List<String> excludeFields, final ApiCallback<ConnectedSitesGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(connectedSiteId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ConnectedSitesGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String connectedSiteId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetInfoRequestBuilder(String connectedSiteId) {
            this.connectedSiteId = connectedSiteId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(connectedSiteId, fields, excludeFields, _callback);
        }


        /**
         * Execute getInfo request
         * @return ConnectedSitesGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ConnectedSitesGetInfoResponse execute() throws ApiException {
            ApiResponse<ConnectedSitesGetInfoResponse> localVarResp = getInfoWithHttpInfo(connectedSiteId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;ConnectedSitesGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectedSitesGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(connectedSiteId, fields, excludeFields);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectedSitesGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(connectedSiteId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get connected site
     * Get information about a specific connected site.
     * @param connectedSiteId The unique identifier for the site. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String connectedSiteId) throws IllegalArgumentException {
        if (connectedSiteId == null) throw new IllegalArgumentException("\"connectedSiteId\" is required but got null");
            

        return new GetInfoRequestBuilder(connectedSiteId);
    }
    private okhttp3.Call listAllCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connected-sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listAllCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ConnectedSitesListAllResponse> listAllWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ConnectedSitesListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ConnectedSitesListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ConnectedSitesListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListAllRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listAll request
         * @return ConnectedSitesListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ConnectedSitesListAllResponse execute() throws ApiException {
            ApiResponse<ConnectedSitesListAllResponse> localVarResp = listAllWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;ConnectedSitesListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectedSitesListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectedSitesListAllResponse> _callback) throws ApiException {
            return listAllAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List connected sites
     * Get all connected sites in an account.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call removeSiteCall(String connectedSiteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connected-sites/{connected_site_id}"
            .replace("{" + "connected_site_id" + "}", localVarApiClient.escapeString(connectedSiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSiteValidateBeforeCall(String connectedSiteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectedSiteId' is set
        if (connectedSiteId == null) {
            throw new ApiException("Missing the required parameter 'connectedSiteId' when calling removeSite(Async)");
        }

        return removeSiteCall(connectedSiteId, _callback);

    }


    private ApiResponse<Void> removeSiteWithHttpInfo(String connectedSiteId) throws ApiException {
        okhttp3.Call localVarCall = removeSiteValidateBeforeCall(connectedSiteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSiteAsync(String connectedSiteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSiteValidateBeforeCall(connectedSiteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSiteRequestBuilder {
        private final String connectedSiteId;

        private RemoveSiteRequestBuilder(String connectedSiteId) {
            this.connectedSiteId = connectedSiteId;
        }

        /**
         * Build call for removeSite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSiteCall(connectedSiteId, _callback);
        }


        /**
         * Execute removeSite request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSiteWithHttpInfo(connectedSiteId);
        }

        /**
         * Execute removeSite request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSiteWithHttpInfo(connectedSiteId);
        }

        /**
         * Execute removeSite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSiteAsync(connectedSiteId, _callback);
        }
    }

    /**
     * Delete connected site
     * Remove a connected site from your Mailchimp account.
     * @param connectedSiteId The unique identifier for the site. (required)
     * @return RemoveSiteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSiteRequestBuilder removeSite(String connectedSiteId) throws IllegalArgumentException {
        if (connectedSiteId == null) throw new IllegalArgumentException("\"connectedSiteId\" is required but got null");
            

        return new RemoveSiteRequestBuilder(connectedSiteId);
    }
    private okhttp3.Call verifyScriptInstallationCall(String connectedSiteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connected-sites/{connected_site_id}/actions/verify-script-installation"
            .replace("{" + "connected_site_id" + "}", localVarApiClient.escapeString(connectedSiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyScriptInstallationValidateBeforeCall(String connectedSiteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectedSiteId' is set
        if (connectedSiteId == null) {
            throw new ApiException("Missing the required parameter 'connectedSiteId' when calling verifyScriptInstallation(Async)");
        }

        return verifyScriptInstallationCall(connectedSiteId, _callback);

    }


    private ApiResponse<Void> verifyScriptInstallationWithHttpInfo(String connectedSiteId) throws ApiException {
        okhttp3.Call localVarCall = verifyScriptInstallationValidateBeforeCall(connectedSiteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call verifyScriptInstallationAsync(String connectedSiteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyScriptInstallationValidateBeforeCall(connectedSiteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class VerifyScriptInstallationRequestBuilder {
        private final String connectedSiteId;

        private VerifyScriptInstallationRequestBuilder(String connectedSiteId) {
            this.connectedSiteId = connectedSiteId;
        }

        /**
         * Build call for verifyScriptInstallation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyScriptInstallationCall(connectedSiteId, _callback);
        }


        /**
         * Execute verifyScriptInstallation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            verifyScriptInstallationWithHttpInfo(connectedSiteId);
        }

        /**
         * Execute verifyScriptInstallation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return verifyScriptInstallationWithHttpInfo(connectedSiteId);
        }

        /**
         * Execute verifyScriptInstallation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return verifyScriptInstallationAsync(connectedSiteId, _callback);
        }
    }

    /**
     * Verify connected site script
     * Verify that the connected sites script has been installed, either via the script URL or fragment.
     * @param connectedSiteId The unique identifier for the site. (required)
     * @return VerifyScriptInstallationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyScriptInstallationRequestBuilder verifyScriptInstallation(String connectedSiteId) throws IllegalArgumentException {
        if (connectedSiteId == null) throw new IllegalArgumentException("\"connectedSiteId\" is required but got null");
            

        return new VerifyScriptInstallationRequestBuilder(connectedSiteId);
    }
}
