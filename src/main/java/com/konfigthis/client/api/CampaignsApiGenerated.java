/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ABTestOptionsProperty;
import com.konfigthis.client.model.BatchDeliveryProperty;
import com.konfigthis.client.model.CampaignSettingsProperty1;
import com.konfigthis.client.model.CampaignSettingsProperty2;
import com.konfigthis.client.model.CampaignSocialCardProperty;
import com.konfigthis.client.model.CampaignTrackingOptionsProperty;
import com.konfigthis.client.model.CampaignsAddFeedback200Response;
import com.konfigthis.client.model.CampaignsAddFeedbackRequest;
import com.konfigthis.client.model.CampaignsAddFeedbackResponse;
import com.konfigthis.client.model.CampaignsAddFeedbackdefaultResponse;
import com.konfigthis.client.model.CampaignsCancelSendActionResponse;
import com.konfigthis.client.model.CampaignsCancelSendActiondefaultResponse;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaign200Response;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaignRequest;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaignResponse;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsGetAll200Response;
import com.konfigthis.client.model.CampaignsGetAllResponse;
import com.konfigthis.client.model.CampaignsGetAlldefaultResponse;
import com.konfigthis.client.model.CampaignsGetContent200Response;
import com.konfigthis.client.model.CampaignsGetContentResponse;
import com.konfigthis.client.model.CampaignsGetContentdefaultResponse;
import com.konfigthis.client.model.CampaignsGetFeedbackMessage200Response;
import com.konfigthis.client.model.CampaignsGetFeedbackMessageResponse;
import com.konfigthis.client.model.CampaignsGetFeedbackMessagedefaultResponse;
import com.konfigthis.client.model.CampaignsGetInfo200Response;
import com.konfigthis.client.model.CampaignsGetInfoResponse;
import com.konfigthis.client.model.CampaignsGetInfodefaultResponse;
import com.konfigthis.client.model.CampaignsGetSendChecklist200Response;
import com.konfigthis.client.model.CampaignsGetSendChecklistResponse;
import com.konfigthis.client.model.CampaignsGetSendChecklistdefaultResponse;
import com.konfigthis.client.model.CampaignsListFeedback200Response;
import com.konfigthis.client.model.CampaignsListFeedbackResponse;
import com.konfigthis.client.model.CampaignsListFeedbackdefaultResponse;
import com.konfigthis.client.model.CampaignsPauseRssCampaignResponse;
import com.konfigthis.client.model.CampaignsPauseRssCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsRemoveCampaignResponse;
import com.konfigthis.client.model.CampaignsRemoveCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsRemoveFeedbackMessageResponse;
import com.konfigthis.client.model.CampaignsRemoveFeedbackMessagedefaultResponse;
import com.konfigthis.client.model.CampaignsReplicateAction200Response;
import com.konfigthis.client.model.CampaignsReplicateActionResponse;
import com.konfigthis.client.model.CampaignsReplicateActiondefaultResponse;
import com.konfigthis.client.model.CampaignsResendAction200Response;
import com.konfigthis.client.model.CampaignsResendActionRequest;
import com.konfigthis.client.model.CampaignsResendActionResponse;
import com.konfigthis.client.model.CampaignsResendActiondefaultResponse;
import com.konfigthis.client.model.CampaignsResumeRssCampaignResponse;
import com.konfigthis.client.model.CampaignsResumeRssCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsScheduleDeliveryRequest;
import com.konfigthis.client.model.CampaignsScheduleDeliveryResponse;
import com.konfigthis.client.model.CampaignsScheduleDeliverydefaultResponse;
import com.konfigthis.client.model.CampaignsSendActionResponse;
import com.konfigthis.client.model.CampaignsSendActiondefaultResponse;
import com.konfigthis.client.model.CampaignsSendTestEmailRequest;
import com.konfigthis.client.model.CampaignsSendTestEmailResponse;
import com.konfigthis.client.model.CampaignsSendTestEmaildefaultResponse;
import com.konfigthis.client.model.CampaignsSetContent200Response;
import com.konfigthis.client.model.CampaignsSetContentRequest;
import com.konfigthis.client.model.CampaignsSetContentResponse;
import com.konfigthis.client.model.CampaignsSetContentdefaultResponse;
import com.konfigthis.client.model.CampaignsUnscheduleActionResponse;
import com.konfigthis.client.model.CampaignsUnscheduleActiondefaultResponse;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessage200Response;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessageRequest;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessageResponse;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessagedefaultResponse;
import com.konfigthis.client.model.CampaignsUpdateSettings200Response;
import com.konfigthis.client.model.CampaignsUpdateSettingsRequest;
import com.konfigthis.client.model.CampaignsUpdateSettingsResponse;
import com.konfigthis.client.model.CampaignsUpdateSettingsdefaultResponse;
import com.konfigthis.client.model.ListProperty1;
import com.konfigthis.client.model.ListProperty2;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RSSOptionsProperty;
import com.konfigthis.client.model.RSSOptionsProperty1;
import com.konfigthis.client.model.TemplateContentProperty;
import com.konfigthis.client.model.UploadArchiveProperty;
import com.konfigthis.client.model.VariateContentsPropertyInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFeedbackCall(String campaignId, CampaignsAddFeedbackRequest campaignsAddFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsAddFeedbackRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/feedback"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFeedbackValidateBeforeCall(String campaignId, CampaignsAddFeedbackRequest campaignsAddFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling addFeedback(Async)");
        }

        // verify the required parameter 'campaignsAddFeedbackRequest' is set
        if (campaignsAddFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsAddFeedbackRequest' when calling addFeedback(Async)");
        }

        return addFeedbackCall(campaignId, campaignsAddFeedbackRequest, _callback);

    }


    private ApiResponse<CampaignsAddFeedbackResponse> addFeedbackWithHttpInfo(String campaignId, CampaignsAddFeedbackRequest campaignsAddFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = addFeedbackValidateBeforeCall(campaignId, campaignsAddFeedbackRequest, null);
        Type localVarReturnType = new TypeToken<CampaignsAddFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFeedbackAsync(String campaignId, CampaignsAddFeedbackRequest campaignsAddFeedbackRequest, final ApiCallback<CampaignsAddFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFeedbackValidateBeforeCall(campaignId, campaignsAddFeedbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignsAddFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFeedbackRequestBuilder {
        private final String message;
        private final String campaignId;
        private Integer blockId;
        private Boolean isComplete;

        private AddFeedbackRequestBuilder(String message, String campaignId) {
            this.message = message;
            this.campaignId = campaignId;
        }

        /**
         * Set blockId
         * @param blockId The block id for the editable block that the feedback addresses. (optional)
         * @return AddFeedbackRequestBuilder
         */
        public AddFeedbackRequestBuilder blockId(Integer blockId) {
            this.blockId = blockId;
            return this;
        }
        
        /**
         * Set isComplete
         * @param isComplete The status of feedback. (optional)
         * @return AddFeedbackRequestBuilder
         */
        public AddFeedbackRequestBuilder isComplete(Boolean isComplete) {
            this.isComplete = isComplete;
            return this;
        }
        
        /**
         * Build call for addFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsAddFeedbackRequest campaignsAddFeedbackRequest = buildBodyParams();
            return addFeedbackCall(campaignId, campaignsAddFeedbackRequest, _callback);
        }

        private CampaignsAddFeedbackRequest buildBodyParams() {
            CampaignsAddFeedbackRequest campaignsAddFeedbackRequest = new CampaignsAddFeedbackRequest();
            campaignsAddFeedbackRequest.blockId(this.blockId);
            campaignsAddFeedbackRequest.message(this.message);
            campaignsAddFeedbackRequest.isComplete(this.isComplete);
            return campaignsAddFeedbackRequest;
        }

        /**
         * Execute addFeedback request
         * @return CampaignsAddFeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsAddFeedbackResponse execute() throws ApiException {
            CampaignsAddFeedbackRequest campaignsAddFeedbackRequest = buildBodyParams();
            ApiResponse<CampaignsAddFeedbackResponse> localVarResp = addFeedbackWithHttpInfo(campaignId, campaignsAddFeedbackRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFeedback request with HTTP info returned
         * @return ApiResponse&lt;CampaignsAddFeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsAddFeedbackResponse> executeWithHttpInfo() throws ApiException {
            CampaignsAddFeedbackRequest campaignsAddFeedbackRequest = buildBodyParams();
            return addFeedbackWithHttpInfo(campaignId, campaignsAddFeedbackRequest);
        }

        /**
         * Execute addFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsAddFeedbackResponse> _callback) throws ApiException {
            CampaignsAddFeedbackRequest campaignsAddFeedbackRequest = buildBodyParams();
            return addFeedbackAsync(campaignId, campaignsAddFeedbackRequest, _callback);
        }
    }

    /**
     * Add campaign feedback
     * Add feedback on a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param campaignsAddFeedbackRequest  (required)
     * @return AddFeedbackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddFeedbackRequestBuilder addFeedback(String message, String campaignId) throws IllegalArgumentException {
        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
            

        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new AddFeedbackRequestBuilder(message, campaignId);
    }
    private okhttp3.Call cancelSendActionCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/cancel-send"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSendActionValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling cancelSendAction(Async)");
        }

        return cancelSendActionCall(campaignId, _callback);

    }


    private ApiResponse<Void> cancelSendActionWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = cancelSendActionValidateBeforeCall(campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelSendActionAsync(String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSendActionValidateBeforeCall(campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelSendActionRequestBuilder {
        private final String campaignId;

        private CancelSendActionRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for cancelSendAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelSendActionCall(campaignId, _callback);
        }


        /**
         * Execute cancelSendAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelSendActionWithHttpInfo(campaignId);
        }

        /**
         * Execute cancelSendAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelSendActionWithHttpInfo(campaignId);
        }

        /**
         * Execute cancelSendAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelSendActionAsync(campaignId, _callback);
        }
    }

    /**
     * Cancel campaign
     * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
     * @param campaignId The unique id for the campaign. (required)
     * @return CancelSendActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CancelSendActionRequestBuilder cancelSendAction(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new CancelSendActionRequestBuilder(campaignId);
    }
    private okhttp3.Call createNewMailchimpCampaignCall(CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsCreateNewMailchimpCampaignRequest;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMailchimpCampaignValidateBeforeCall(CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignsCreateNewMailchimpCampaignRequest' is set
        if (campaignsCreateNewMailchimpCampaignRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsCreateNewMailchimpCampaignRequest' when calling createNewMailchimpCampaign(Async)");
        }

        return createNewMailchimpCampaignCall(campaignsCreateNewMailchimpCampaignRequest, _callback);

    }


    private ApiResponse<CampaignsCreateNewMailchimpCampaignResponse> createNewMailchimpCampaignWithHttpInfo(CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewMailchimpCampaignValidateBeforeCall(campaignsCreateNewMailchimpCampaignRequest, null);
        Type localVarReturnType = new TypeToken<CampaignsCreateNewMailchimpCampaignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMailchimpCampaignAsync(CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest, final ApiCallback<CampaignsCreateNewMailchimpCampaignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMailchimpCampaignValidateBeforeCall(campaignsCreateNewMailchimpCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignsCreateNewMailchimpCampaignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMailchimpCampaignRequestBuilder {
        private final String type;
        private ListProperty1 recipients;
        private CampaignSettingsProperty1 settings;
        private ABTestOptionsProperty variateSettings;
        private CampaignTrackingOptionsProperty tracking;
        private RSSOptionsProperty rssOpts;
        private CampaignSocialCardProperty socialCard;
        private String contentType;

        private CreateNewMailchimpCampaignRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set recipients
         * @param recipients  (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder recipients(ListProperty1 recipients) {
            this.recipients = recipients;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder settings(CampaignSettingsProperty1 settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set variateSettings
         * @param variateSettings  (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder variateSettings(ABTestOptionsProperty variateSettings) {
            this.variateSettings = variateSettings;
            return this;
        }
        
        /**
         * Set tracking
         * @param tracking  (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder tracking(CampaignTrackingOptionsProperty tracking) {
            this.tracking = tracking;
            return this;
        }
        
        /**
         * Set rssOpts
         * @param rssOpts  (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder rssOpts(RSSOptionsProperty rssOpts) {
            this.rssOpts = rssOpts;
            return this;
        }
        
        /**
         * Set socialCard
         * @param socialCard  (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder socialCard(CampaignSocialCardProperty socialCard) {
            this.socialCard = socialCard;
            return this;
        }
        
        /**
         * Set contentType
         * @param contentType How the campaign&#39;s content is put together. The old drag and drop editor uses &#39;template&#39; while the new editor uses &#39;multichannel&#39;. Defaults to template. (optional)
         * @return CreateNewMailchimpCampaignRequestBuilder
         */
        public CreateNewMailchimpCampaignRequestBuilder contentType(String contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Build call for createNewMailchimpCampaign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest = buildBodyParams();
            return createNewMailchimpCampaignCall(campaignsCreateNewMailchimpCampaignRequest, _callback);
        }

        private CampaignsCreateNewMailchimpCampaignRequest buildBodyParams() {
            CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest = new CampaignsCreateNewMailchimpCampaignRequest();
            if (this.type != null)
            campaignsCreateNewMailchimpCampaignRequest.type(CampaignsCreateNewMailchimpCampaignRequest.TypeEnum.fromValue(this.type));
            campaignsCreateNewMailchimpCampaignRequest.recipients(this.recipients);
            campaignsCreateNewMailchimpCampaignRequest.settings(this.settings);
            campaignsCreateNewMailchimpCampaignRequest.variateSettings(this.variateSettings);
            campaignsCreateNewMailchimpCampaignRequest.tracking(this.tracking);
            campaignsCreateNewMailchimpCampaignRequest.rssOpts(this.rssOpts);
            campaignsCreateNewMailchimpCampaignRequest.socialCard(this.socialCard);
            if (this.contentType != null)
            campaignsCreateNewMailchimpCampaignRequest.contentType(CampaignsCreateNewMailchimpCampaignRequest.ContentTypeEnum.fromValue(this.contentType));
            return campaignsCreateNewMailchimpCampaignRequest;
        }

        /**
         * Execute createNewMailchimpCampaign request
         * @return CampaignsCreateNewMailchimpCampaignResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsCreateNewMailchimpCampaignResponse execute() throws ApiException {
            CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest = buildBodyParams();
            ApiResponse<CampaignsCreateNewMailchimpCampaignResponse> localVarResp = createNewMailchimpCampaignWithHttpInfo(campaignsCreateNewMailchimpCampaignRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMailchimpCampaign request with HTTP info returned
         * @return ApiResponse&lt;CampaignsCreateNewMailchimpCampaignResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsCreateNewMailchimpCampaignResponse> executeWithHttpInfo() throws ApiException {
            CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest = buildBodyParams();
            return createNewMailchimpCampaignWithHttpInfo(campaignsCreateNewMailchimpCampaignRequest);
        }

        /**
         * Execute createNewMailchimpCampaign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsCreateNewMailchimpCampaignResponse> _callback) throws ApiException {
            CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest = buildBodyParams();
            return createNewMailchimpCampaignAsync(campaignsCreateNewMailchimpCampaignRequest, _callback);
        }
    }

    /**
     * Add campaign
     * Create a new Mailchimp campaign.
     * @param campaignsCreateNewMailchimpCampaignRequest  (required)
     * @return CreateNewMailchimpCampaignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMailchimpCampaignRequestBuilder createNewMailchimpCampaign(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateNewMailchimpCampaignRequestBuilder(type);
    }
    private okhttp3.Call getAllCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String status, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, String listId, String folderId, String memberId, String sortField, String sortDir, Boolean includeResendShortcutEligibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (beforeSendTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_send_time", beforeSendTime));
        }

        if (sinceSendTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_send_time", sinceSendTime));
        }

        if (beforeCreateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_create_time", beforeCreateTime));
        }

        if (sinceCreateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_create_time", sinceCreateTime));
        }

        if (listId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_id", listId));
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder_id", folderId));
        }

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_id", memberId));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (includeResendShortcutEligibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_resend_shortcut_eligibility", includeResendShortcutEligibility));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String status, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, String listId, String folderId, String memberId, String sortField, String sortDir, Boolean includeResendShortcutEligibility, final ApiCallback _callback) throws ApiException {
        return getAllCall(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility, _callback);

    }


    private ApiResponse<CampaignsGetAllResponse> getAllWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String status, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, String listId, String folderId, String memberId, String sortField, String sortDir, Boolean includeResendShortcutEligibility) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility, null);
        Type localVarReturnType = new TypeToken<CampaignsGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String status, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, String listId, String folderId, String memberId, String sortField, String sortDir, Boolean includeResendShortcutEligibility, final ApiCallback<CampaignsGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility, _callback);
        Type localVarReturnType = new TypeToken<CampaignsGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;
        private String status;
        private OffsetDateTime beforeSendTime;
        private OffsetDateTime sinceSendTime;
        private OffsetDateTime beforeCreateTime;
        private OffsetDateTime sinceCreateTime;
        private String listId;
        private String folderId;
        private String memberId;
        private String sortField;
        private String sortDir;
        private Boolean includeResendShortcutEligibility;

        private GetAllRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type The campaign type. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the campaign. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set beforeSendTime
         * @param beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder beforeSendTime(OffsetDateTime beforeSendTime) {
            this.beforeSendTime = beforeSendTime;
            return this;
        }
        
        /**
         * Set sinceSendTime
         * @param sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sinceSendTime(OffsetDateTime sinceSendTime) {
            this.sinceSendTime = sinceSendTime;
            return this;
        }
        
        /**
         * Set beforeCreateTime
         * @param beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder beforeCreateTime(OffsetDateTime beforeCreateTime) {
            this.beforeCreateTime = beforeCreateTime;
            return this;
        }
        
        /**
         * Set sinceCreateTime
         * @param sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sinceCreateTime(OffsetDateTime sinceCreateTime) {
            this.sinceCreateTime = sinceCreateTime;
            return this;
        }
        
        /**
         * Set listId
         * @param listId The unique id for the list. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder listId(String listId) {
            this.listId = listId;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId The unique folder id. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set memberId
         * @param memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder memberId(String memberId) {
            this.memberId = memberId;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set includeResendShortcutEligibility
         * @param includeResendShortcutEligibility Return the &#x60;resend_shortcut_eligibility&#x60; field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder includeResendShortcutEligibility(Boolean includeResendShortcutEligibility) {
            this.includeResendShortcutEligibility = includeResendShortcutEligibility;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility, _callback);
        }


        /**
         * Execute getAll request
         * @return CampaignsGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsGetAllResponse execute() throws ApiException {
            ApiResponse<CampaignsGetAllResponse> localVarResp = getAllWithHttpInfo(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;CampaignsGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsGetAllResponse> _callback) throws ApiException {
            return getAllAsync(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility, _callback);
        }
    }

    /**
     * List campaigns
     * Get all campaigns in an account.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getContentCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/content"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getContent(Async)");
        }

        return getContentCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<CampaignsGetContentResponse> getContentWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getContentValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<CampaignsGetContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<CampaignsGetContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<CampaignsGetContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetContentRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetContentRequestBuilder
         */
        public GetContentRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetContentRequestBuilder
         */
        public GetContentRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute getContent request
         * @return CampaignsGetContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsGetContentResponse execute() throws ApiException {
            ApiResponse<CampaignsGetContentResponse> localVarResp = getContentWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContent request with HTTP info returned
         * @return ApiResponse&lt;CampaignsGetContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsGetContentResponse> executeWithHttpInfo() throws ApiException {
            return getContentWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute getContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsGetContentResponse> _callback) throws ApiException {
            return getContentAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign content
     * Get the the HTML and plain-text content for a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return GetContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetContentRequestBuilder getContent(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new GetContentRequestBuilder(campaignId);
    }
    private okhttp3.Call getFeedbackMessageCall(String campaignId, String feedbackId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/feedback/{feedback_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "feedback_id" + "}", localVarApiClient.escapeString(feedbackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackMessageValidateBeforeCall(String campaignId, String feedbackId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getFeedbackMessage(Async)");
        }

        // verify the required parameter 'feedbackId' is set
        if (feedbackId == null) {
            throw new ApiException("Missing the required parameter 'feedbackId' when calling getFeedbackMessage(Async)");
        }

        return getFeedbackMessageCall(campaignId, feedbackId, fields, excludeFields, _callback);

    }


    private ApiResponse<CampaignsGetFeedbackMessageResponse> getFeedbackMessageWithHttpInfo(String campaignId, String feedbackId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackMessageValidateBeforeCall(campaignId, feedbackId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<CampaignsGetFeedbackMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackMessageAsync(String campaignId, String feedbackId, List<String> fields, List<String> excludeFields, final ApiCallback<CampaignsGetFeedbackMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackMessageValidateBeforeCall(campaignId, feedbackId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<CampaignsGetFeedbackMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeedbackMessageRequestBuilder {
        private final String campaignId;
        private final String feedbackId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetFeedbackMessageRequestBuilder(String campaignId, String feedbackId) {
            this.campaignId = campaignId;
            this.feedbackId = feedbackId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFeedbackMessageRequestBuilder
         */
        public GetFeedbackMessageRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFeedbackMessageRequestBuilder
         */
        public GetFeedbackMessageRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getFeedbackMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackMessageCall(campaignId, feedbackId, fields, excludeFields, _callback);
        }


        /**
         * Execute getFeedbackMessage request
         * @return CampaignsGetFeedbackMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsGetFeedbackMessageResponse execute() throws ApiException {
            ApiResponse<CampaignsGetFeedbackMessageResponse> localVarResp = getFeedbackMessageWithHttpInfo(campaignId, feedbackId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeedbackMessage request with HTTP info returned
         * @return ApiResponse&lt;CampaignsGetFeedbackMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsGetFeedbackMessageResponse> executeWithHttpInfo() throws ApiException {
            return getFeedbackMessageWithHttpInfo(campaignId, feedbackId, fields, excludeFields);
        }

        /**
         * Execute getFeedbackMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsGetFeedbackMessageResponse> _callback) throws ApiException {
            return getFeedbackMessageAsync(campaignId, feedbackId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign feedback message
     * Get a specific feedback message from a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @return GetFeedbackMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetFeedbackMessageRequestBuilder getFeedbackMessage(String campaignId, String feedbackId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (feedbackId == null) throw new IllegalArgumentException("\"feedbackId\" is required but got null");
            

        return new GetFeedbackMessageRequestBuilder(campaignId, feedbackId);
    }
    private okhttp3.Call getInfoCall(String campaignId, List<String> fields, List<String> excludeFields, Boolean includeResendShortcutEligibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (includeResendShortcutEligibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_resend_shortcut_eligibility", includeResendShortcutEligibility));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Boolean includeResendShortcutEligibility, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getInfo(Async)");
        }

        return getInfoCall(campaignId, fields, excludeFields, includeResendShortcutEligibility, _callback);

    }


    private ApiResponse<CampaignsGetInfoResponse> getInfoWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Boolean includeResendShortcutEligibility) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(campaignId, fields, excludeFields, includeResendShortcutEligibility, null);
        Type localVarReturnType = new TypeToken<CampaignsGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String campaignId, List<String> fields, List<String> excludeFields, Boolean includeResendShortcutEligibility, final ApiCallback<CampaignsGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(campaignId, fields, excludeFields, includeResendShortcutEligibility, _callback);
        Type localVarReturnType = new TypeToken<CampaignsGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Boolean includeResendShortcutEligibility;

        private GetInfoRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set includeResendShortcutEligibility
         * @param includeResendShortcutEligibility Return the &#x60;resend_shortcut_eligibility&#x60; field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder includeResendShortcutEligibility(Boolean includeResendShortcutEligibility) {
            this.includeResendShortcutEligibility = includeResendShortcutEligibility;
            return this;
        }
        
        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(campaignId, fields, excludeFields, includeResendShortcutEligibility, _callback);
        }


        /**
         * Execute getInfo request
         * @return CampaignsGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsGetInfoResponse execute() throws ApiException {
            ApiResponse<CampaignsGetInfoResponse> localVarResp = getInfoWithHttpInfo(campaignId, fields, excludeFields, includeResendShortcutEligibility);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;CampaignsGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(campaignId, fields, excludeFields, includeResendShortcutEligibility);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(campaignId, fields, excludeFields, includeResendShortcutEligibility, _callback);
        }
    }

    /**
     * Get campaign info
     * Get information about a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new GetInfoRequestBuilder(campaignId);
    }
    private okhttp3.Call getSendChecklistCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/send-checklist"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSendChecklistValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getSendChecklist(Async)");
        }

        return getSendChecklistCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<CampaignsGetSendChecklistResponse> getSendChecklistWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getSendChecklistValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<CampaignsGetSendChecklistResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSendChecklistAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<CampaignsGetSendChecklistResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSendChecklistValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<CampaignsGetSendChecklistResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSendChecklistRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetSendChecklistRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSendChecklistRequestBuilder
         */
        public GetSendChecklistRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSendChecklistRequestBuilder
         */
        public GetSendChecklistRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getSendChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSendChecklistCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute getSendChecklist request
         * @return CampaignsGetSendChecklistResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsGetSendChecklistResponse execute() throws ApiException {
            ApiResponse<CampaignsGetSendChecklistResponse> localVarResp = getSendChecklistWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSendChecklist request with HTTP info returned
         * @return ApiResponse&lt;CampaignsGetSendChecklistResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsGetSendChecklistResponse> executeWithHttpInfo() throws ApiException {
            return getSendChecklistWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute getSendChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsGetSendChecklistResponse> _callback) throws ApiException {
            return getSendChecklistAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign send checklist
     * Review the send checklist for a campaign, and resolve any issues before sending.
     * @param campaignId The unique id for the campaign. (required)
     * @return GetSendChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSendChecklistRequestBuilder getSendChecklist(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new GetSendChecklistRequestBuilder(campaignId);
    }
    private okhttp3.Call listFeedbackCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/feedback"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeedbackValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listFeedback(Async)");
        }

        return listFeedbackCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<CampaignsListFeedbackResponse> listFeedbackWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listFeedbackValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<CampaignsListFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeedbackAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<CampaignsListFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeedbackValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<CampaignsListFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFeedbackRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListFeedbackRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListFeedbackRequestBuilder
         */
        public ListFeedbackRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListFeedbackRequestBuilder
         */
        public ListFeedbackRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeedbackCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute listFeedback request
         * @return CampaignsListFeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsListFeedbackResponse execute() throws ApiException {
            ApiResponse<CampaignsListFeedbackResponse> localVarResp = listFeedbackWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFeedback request with HTTP info returned
         * @return ApiResponse&lt;CampaignsListFeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsListFeedbackResponse> executeWithHttpInfo() throws ApiException {
            return listFeedbackWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute listFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsListFeedbackResponse> _callback) throws ApiException {
            return listFeedbackAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * List campaign feedback
     * Get team feedback while you&#39;re working together on a Mailchimp campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListFeedbackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListFeedbackRequestBuilder listFeedback(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListFeedbackRequestBuilder(campaignId);
    }
    private okhttp3.Call pauseRssCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/pause"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseRssCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling pauseRssCampaign(Async)");
        }

        return pauseRssCampaignCall(campaignId, _callback);

    }


    private ApiResponse<Void> pauseRssCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = pauseRssCampaignValidateBeforeCall(campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pauseRssCampaignAsync(String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseRssCampaignValidateBeforeCall(campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PauseRssCampaignRequestBuilder {
        private final String campaignId;

        private PauseRssCampaignRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for pauseRssCampaign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pauseRssCampaignCall(campaignId, _callback);
        }


        /**
         * Execute pauseRssCampaign request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pauseRssCampaignWithHttpInfo(campaignId);
        }

        /**
         * Execute pauseRssCampaign request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pauseRssCampaignWithHttpInfo(campaignId);
        }

        /**
         * Execute pauseRssCampaign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pauseRssCampaignAsync(campaignId, _callback);
        }
    }

    /**
     * Pause rss campaign
     * Pause an RSS-Driven campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return PauseRssCampaignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public PauseRssCampaignRequestBuilder pauseRssCampaign(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new PauseRssCampaignRequestBuilder(campaignId);
    }
    private okhttp3.Call removeCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling removeCampaign(Async)");
        }

        return removeCampaignCall(campaignId, _callback);

    }


    private ApiResponse<Void> removeCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = removeCampaignValidateBeforeCall(campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCampaignAsync(String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCampaignValidateBeforeCall(campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCampaignRequestBuilder {
        private final String campaignId;

        private RemoveCampaignRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for removeCampaign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCampaignCall(campaignId, _callback);
        }


        /**
         * Execute removeCampaign request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCampaignWithHttpInfo(campaignId);
        }

        /**
         * Execute removeCampaign request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCampaignWithHttpInfo(campaignId);
        }

        /**
         * Execute removeCampaign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCampaignAsync(campaignId, _callback);
        }
    }

    /**
     * Delete campaign
     * Remove a campaign from your Mailchimp account.
     * @param campaignId The unique id for the campaign. (required)
     * @return RemoveCampaignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCampaignRequestBuilder removeCampaign(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new RemoveCampaignRequestBuilder(campaignId);
    }
    private okhttp3.Call removeFeedbackMessageCall(String campaignId, String feedbackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/feedback/{feedback_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "feedback_id" + "}", localVarApiClient.escapeString(feedbackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFeedbackMessageValidateBeforeCall(String campaignId, String feedbackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling removeFeedbackMessage(Async)");
        }

        // verify the required parameter 'feedbackId' is set
        if (feedbackId == null) {
            throw new ApiException("Missing the required parameter 'feedbackId' when calling removeFeedbackMessage(Async)");
        }

        return removeFeedbackMessageCall(campaignId, feedbackId, _callback);

    }


    private ApiResponse<Void> removeFeedbackMessageWithHttpInfo(String campaignId, String feedbackId) throws ApiException {
        okhttp3.Call localVarCall = removeFeedbackMessageValidateBeforeCall(campaignId, feedbackId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFeedbackMessageAsync(String campaignId, String feedbackId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFeedbackMessageValidateBeforeCall(campaignId, feedbackId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFeedbackMessageRequestBuilder {
        private final String campaignId;
        private final String feedbackId;

        private RemoveFeedbackMessageRequestBuilder(String campaignId, String feedbackId) {
            this.campaignId = campaignId;
            this.feedbackId = feedbackId;
        }

        /**
         * Build call for removeFeedbackMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFeedbackMessageCall(campaignId, feedbackId, _callback);
        }


        /**
         * Execute removeFeedbackMessage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFeedbackMessageWithHttpInfo(campaignId, feedbackId);
        }

        /**
         * Execute removeFeedbackMessage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFeedbackMessageWithHttpInfo(campaignId, feedbackId);
        }

        /**
         * Execute removeFeedbackMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFeedbackMessageAsync(campaignId, feedbackId, _callback);
        }
    }

    /**
     * Delete campaign feedback message
     * Remove a specific feedback message for a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @return RemoveFeedbackMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFeedbackMessageRequestBuilder removeFeedbackMessage(String campaignId, String feedbackId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (feedbackId == null) throw new IllegalArgumentException("\"feedbackId\" is required but got null");
            

        return new RemoveFeedbackMessageRequestBuilder(campaignId, feedbackId);
    }
    private okhttp3.Call replicateActionCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/replicate"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicateActionValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling replicateAction(Async)");
        }

        return replicateActionCall(campaignId, _callback);

    }


    private ApiResponse<CampaignsReplicateActionResponse> replicateActionWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = replicateActionValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<CampaignsReplicateActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replicateActionAsync(String campaignId, final ApiCallback<CampaignsReplicateActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicateActionValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<CampaignsReplicateActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplicateActionRequestBuilder {
        private final String campaignId;

        private ReplicateActionRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for replicateAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return replicateActionCall(campaignId, _callback);
        }


        /**
         * Execute replicateAction request
         * @return CampaignsReplicateActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsReplicateActionResponse execute() throws ApiException {
            ApiResponse<CampaignsReplicateActionResponse> localVarResp = replicateActionWithHttpInfo(campaignId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replicateAction request with HTTP info returned
         * @return ApiResponse&lt;CampaignsReplicateActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsReplicateActionResponse> executeWithHttpInfo() throws ApiException {
            return replicateActionWithHttpInfo(campaignId);
        }

        /**
         * Execute replicateAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsReplicateActionResponse> _callback) throws ApiException {
            return replicateActionAsync(campaignId, _callback);
        }
    }

    /**
     * Replicate campaign
     * Replicate a campaign in saved or send status.
     * @param campaignId The unique id for the campaign. (required)
     * @return ReplicateActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ReplicateActionRequestBuilder replicateAction(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ReplicateActionRequestBuilder(campaignId);
    }
    private okhttp3.Call resendActionCall(String campaignId, CampaignsResendActionRequest campaignsResendActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsResendActionRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/create-resend"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendActionValidateBeforeCall(String campaignId, CampaignsResendActionRequest campaignsResendActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling resendAction(Async)");
        }

        return resendActionCall(campaignId, campaignsResendActionRequest, _callback);

    }


    private ApiResponse<CampaignsResendActionResponse> resendActionWithHttpInfo(String campaignId, CampaignsResendActionRequest campaignsResendActionRequest) throws ApiException {
        okhttp3.Call localVarCall = resendActionValidateBeforeCall(campaignId, campaignsResendActionRequest, null);
        Type localVarReturnType = new TypeToken<CampaignsResendActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resendActionAsync(String campaignId, CampaignsResendActionRequest campaignsResendActionRequest, final ApiCallback<CampaignsResendActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendActionValidateBeforeCall(campaignId, campaignsResendActionRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignsResendActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResendActionRequestBuilder {
        private final String campaignId;
        private String shortcutType;

        private ResendActionRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set shortcutType
         * @param shortcutType Which campaign resend shortcut to use. Default is &#x60;to_non_openers&#x60;. (optional)
         * @return ResendActionRequestBuilder
         */
        public ResendActionRequestBuilder shortcutType(String shortcutType) {
            this.shortcutType = shortcutType;
            return this;
        }
        
        /**
         * Build call for resendAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsResendActionRequest campaignsResendActionRequest = buildBodyParams();
            return resendActionCall(campaignId, campaignsResendActionRequest, _callback);
        }

        private CampaignsResendActionRequest buildBodyParams() {
            CampaignsResendActionRequest campaignsResendActionRequest = new CampaignsResendActionRequest();
            if (this.shortcutType != null)
            campaignsResendActionRequest.shortcutType(CampaignsResendActionRequest.ShortcutTypeEnum.fromValue(this.shortcutType));
            return campaignsResendActionRequest;
        }

        /**
         * Execute resendAction request
         * @return CampaignsResendActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsResendActionResponse execute() throws ApiException {
            CampaignsResendActionRequest campaignsResendActionRequest = buildBodyParams();
            ApiResponse<CampaignsResendActionResponse> localVarResp = resendActionWithHttpInfo(campaignId, campaignsResendActionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resendAction request with HTTP info returned
         * @return ApiResponse&lt;CampaignsResendActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsResendActionResponse> executeWithHttpInfo() throws ApiException {
            CampaignsResendActionRequest campaignsResendActionRequest = buildBodyParams();
            return resendActionWithHttpInfo(campaignId, campaignsResendActionRequest);
        }

        /**
         * Execute resendAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsResendActionResponse> _callback) throws ApiException {
            CampaignsResendActionRequest campaignsResendActionRequest = buildBodyParams();
            return resendActionAsync(campaignId, campaignsResendActionRequest, _callback);
        }
    }

    /**
     * Resend campaign
     * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn&#39;t open the campaign, or any new subscribers since it was sent.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResendActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ResendActionRequestBuilder resendAction(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ResendActionRequestBuilder(campaignId);
    }
    private okhttp3.Call resumeRssCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/resume"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeRssCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling resumeRssCampaign(Async)");
        }

        return resumeRssCampaignCall(campaignId, _callback);

    }


    private ApiResponse<Void> resumeRssCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = resumeRssCampaignValidateBeforeCall(campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resumeRssCampaignAsync(String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeRssCampaignValidateBeforeCall(campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResumeRssCampaignRequestBuilder {
        private final String campaignId;

        private ResumeRssCampaignRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for resumeRssCampaign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resumeRssCampaignCall(campaignId, _callback);
        }


        /**
         * Execute resumeRssCampaign request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resumeRssCampaignWithHttpInfo(campaignId);
        }

        /**
         * Execute resumeRssCampaign request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resumeRssCampaignWithHttpInfo(campaignId);
        }

        /**
         * Execute resumeRssCampaign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resumeRssCampaignAsync(campaignId, _callback);
        }
    }

    /**
     * Resume rss campaign
     * Resume an RSS-Driven campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResumeRssCampaignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ResumeRssCampaignRequestBuilder resumeRssCampaign(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ResumeRssCampaignRequestBuilder(campaignId);
    }
    private okhttp3.Call scheduleDeliveryCall(String campaignId, CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsScheduleDeliveryRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/schedule"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleDeliveryValidateBeforeCall(String campaignId, CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling scheduleDelivery(Async)");
        }

        // verify the required parameter 'campaignsScheduleDeliveryRequest' is set
        if (campaignsScheduleDeliveryRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsScheduleDeliveryRequest' when calling scheduleDelivery(Async)");
        }

        return scheduleDeliveryCall(campaignId, campaignsScheduleDeliveryRequest, _callback);

    }


    private ApiResponse<Void> scheduleDeliveryWithHttpInfo(String campaignId, CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest) throws ApiException {
        okhttp3.Call localVarCall = scheduleDeliveryValidateBeforeCall(campaignId, campaignsScheduleDeliveryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call scheduleDeliveryAsync(String campaignId, CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleDeliveryValidateBeforeCall(campaignId, campaignsScheduleDeliveryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ScheduleDeliveryRequestBuilder {
        private final OffsetDateTime scheduleTime;
        private final String campaignId;
        private Boolean timewarp;
        private BatchDeliveryProperty batchDelivery;

        private ScheduleDeliveryRequestBuilder(OffsetDateTime scheduleTime, String campaignId) {
            this.scheduleTime = scheduleTime;
            this.campaignId = campaignId;
        }

        /**
         * Set timewarp
         * @param timewarp Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients&#39; time zones. For example, a Timewarp campaign with a &#x60;schedule_time&#x60; of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to &#x60;true&#x60; for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). (optional)
         * @return ScheduleDeliveryRequestBuilder
         */
        public ScheduleDeliveryRequestBuilder timewarp(Boolean timewarp) {
            this.timewarp = timewarp;
            return this;
        }
        
        /**
         * Set batchDelivery
         * @param batchDelivery  (optional)
         * @return ScheduleDeliveryRequestBuilder
         */
        public ScheduleDeliveryRequestBuilder batchDelivery(BatchDeliveryProperty batchDelivery) {
            this.batchDelivery = batchDelivery;
            return this;
        }
        
        /**
         * Build call for scheduleDelivery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest = buildBodyParams();
            return scheduleDeliveryCall(campaignId, campaignsScheduleDeliveryRequest, _callback);
        }

        private CampaignsScheduleDeliveryRequest buildBodyParams() {
            CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest = new CampaignsScheduleDeliveryRequest();
            campaignsScheduleDeliveryRequest.scheduleTime(this.scheduleTime);
            campaignsScheduleDeliveryRequest.timewarp(this.timewarp);
            campaignsScheduleDeliveryRequest.batchDelivery(this.batchDelivery);
            return campaignsScheduleDeliveryRequest;
        }

        /**
         * Execute scheduleDelivery request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest = buildBodyParams();
            scheduleDeliveryWithHttpInfo(campaignId, campaignsScheduleDeliveryRequest);
        }

        /**
         * Execute scheduleDelivery request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest = buildBodyParams();
            return scheduleDeliveryWithHttpInfo(campaignId, campaignsScheduleDeliveryRequest);
        }

        /**
         * Execute scheduleDelivery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CampaignsScheduleDeliveryRequest campaignsScheduleDeliveryRequest = buildBodyParams();
            return scheduleDeliveryAsync(campaignId, campaignsScheduleDeliveryRequest, _callback);
        }
    }

    /**
     * Schedule campaign
     * Schedule a campaign for delivery. If you&#39;re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
     * @param campaignId The unique id for the campaign. (required)
     * @param campaignsScheduleDeliveryRequest  (required)
     * @return ScheduleDeliveryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleDeliveryRequestBuilder scheduleDelivery(OffsetDateTime scheduleTime, String campaignId) throws IllegalArgumentException {
        if (scheduleTime == null) throw new IllegalArgumentException("\"scheduleTime\" is required but got null");
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ScheduleDeliveryRequestBuilder(scheduleTime, campaignId);
    }
    private okhttp3.Call sendActionCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/send"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendActionValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling sendAction(Async)");
        }

        return sendActionCall(campaignId, _callback);

    }


    private ApiResponse<Void> sendActionWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = sendActionValidateBeforeCall(campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendActionAsync(String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendActionValidateBeforeCall(campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendActionRequestBuilder {
        private final String campaignId;

        private SendActionRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for sendAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendActionCall(campaignId, _callback);
        }


        /**
         * Execute sendAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendActionWithHttpInfo(campaignId);
        }

        /**
         * Execute sendAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendActionWithHttpInfo(campaignId);
        }

        /**
         * Execute sendAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendActionAsync(campaignId, _callback);
        }
    }

    /**
     * Send campaign
     * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
     * @param campaignId The unique id for the campaign. (required)
     * @return SendActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SendActionRequestBuilder sendAction(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new SendActionRequestBuilder(campaignId);
    }
    private okhttp3.Call sendTestEmailCall(String campaignId, CampaignsSendTestEmailRequest campaignsSendTestEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsSendTestEmailRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/test"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTestEmailValidateBeforeCall(String campaignId, CampaignsSendTestEmailRequest campaignsSendTestEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling sendTestEmail(Async)");
        }

        // verify the required parameter 'campaignsSendTestEmailRequest' is set
        if (campaignsSendTestEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsSendTestEmailRequest' when calling sendTestEmail(Async)");
        }

        return sendTestEmailCall(campaignId, campaignsSendTestEmailRequest, _callback);

    }


    private ApiResponse<Void> sendTestEmailWithHttpInfo(String campaignId, CampaignsSendTestEmailRequest campaignsSendTestEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTestEmailValidateBeforeCall(campaignId, campaignsSendTestEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendTestEmailAsync(String campaignId, CampaignsSendTestEmailRequest campaignsSendTestEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTestEmailValidateBeforeCall(campaignId, campaignsSendTestEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendTestEmailRequestBuilder {
        private final List<String> testEmails;
        private final String sendType;
        private final String campaignId;

        private SendTestEmailRequestBuilder(List<String> testEmails, String sendType, String campaignId) {
            this.testEmails = testEmails;
            this.sendType = sendType;
            this.campaignId = campaignId;
        }

        /**
         * Build call for sendTestEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsSendTestEmailRequest campaignsSendTestEmailRequest = buildBodyParams();
            return sendTestEmailCall(campaignId, campaignsSendTestEmailRequest, _callback);
        }

        private CampaignsSendTestEmailRequest buildBodyParams() {
            CampaignsSendTestEmailRequest campaignsSendTestEmailRequest = new CampaignsSendTestEmailRequest();
            campaignsSendTestEmailRequest.testEmails(this.testEmails);
            if (this.sendType != null)
            campaignsSendTestEmailRequest.sendType(CampaignsSendTestEmailRequest.SendTypeEnum.fromValue(this.sendType));
            return campaignsSendTestEmailRequest;
        }

        /**
         * Execute sendTestEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CampaignsSendTestEmailRequest campaignsSendTestEmailRequest = buildBodyParams();
            sendTestEmailWithHttpInfo(campaignId, campaignsSendTestEmailRequest);
        }

        /**
         * Execute sendTestEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CampaignsSendTestEmailRequest campaignsSendTestEmailRequest = buildBodyParams();
            return sendTestEmailWithHttpInfo(campaignId, campaignsSendTestEmailRequest);
        }

        /**
         * Execute sendTestEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CampaignsSendTestEmailRequest campaignsSendTestEmailRequest = buildBodyParams();
            return sendTestEmailAsync(campaignId, campaignsSendTestEmailRequest, _callback);
        }
    }

    /**
     * Send test email
     * Send a test email.
     * @param campaignId The unique id for the campaign. (required)
     * @param campaignsSendTestEmailRequest  (required)
     * @return SendTestEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SendTestEmailRequestBuilder sendTestEmail(List<String> testEmails, String sendType, String campaignId) throws IllegalArgumentException {
        if (testEmails == null) throw new IllegalArgumentException("\"testEmails\" is required but got null");
        if (sendType == null) throw new IllegalArgumentException("\"sendType\" is required but got null");
            

        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new SendTestEmailRequestBuilder(testEmails, sendType, campaignId);
    }
    private okhttp3.Call setContentCall(String campaignId, CampaignsSetContentRequest campaignsSetContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsSetContentRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/content"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setContentValidateBeforeCall(String campaignId, CampaignsSetContentRequest campaignsSetContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling setContent(Async)");
        }

        // verify the required parameter 'campaignsSetContentRequest' is set
        if (campaignsSetContentRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsSetContentRequest' when calling setContent(Async)");
        }

        return setContentCall(campaignId, campaignsSetContentRequest, _callback);

    }


    private ApiResponse<CampaignsSetContentResponse> setContentWithHttpInfo(String campaignId, CampaignsSetContentRequest campaignsSetContentRequest) throws ApiException {
        okhttp3.Call localVarCall = setContentValidateBeforeCall(campaignId, campaignsSetContentRequest, null);
        Type localVarReturnType = new TypeToken<CampaignsSetContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setContentAsync(String campaignId, CampaignsSetContentRequest campaignsSetContentRequest, final ApiCallback<CampaignsSetContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setContentValidateBeforeCall(campaignId, campaignsSetContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignsSetContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetContentRequestBuilder {
        private final String campaignId;
        private String plainText;
        private String html;
        private String url;
        private TemplateContentProperty template;
        private UploadArchiveProperty archive;
        private List<VariateContentsPropertyInner> variateContents;

        private SetContentRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set plainText
         * @param plainText The plain-text portion of the campaign. If left unspecified, we&#39;ll generate this automatically. (optional)
         * @return SetContentRequestBuilder
         */
        public SetContentRequestBuilder plainText(String plainText) {
            this.plainText = plainText;
            return this;
        }
        
        /**
         * Set html
         * @param html The raw HTML for the campaign. (optional)
         * @return SetContentRequestBuilder
         */
        public SetContentRequestBuilder html(String html) {
            this.html = html;
            return this;
        }
        
        /**
         * Set url
         * @param url When importing a campaign, the URL where the HTML lives. (optional)
         * @return SetContentRequestBuilder
         */
        public SetContentRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set template
         * @param template  (optional)
         * @return SetContentRequestBuilder
         */
        public SetContentRequestBuilder template(TemplateContentProperty template) {
            this.template = template;
            return this;
        }
        
        /**
         * Set archive
         * @param archive  (optional)
         * @return SetContentRequestBuilder
         */
        public SetContentRequestBuilder archive(UploadArchiveProperty archive) {
            this.archive = archive;
            return this;
        }
        
        /**
         * Set variateContents
         * @param variateContents Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided. (optional)
         * @return SetContentRequestBuilder
         */
        public SetContentRequestBuilder variateContents(List<VariateContentsPropertyInner> variateContents) {
            this.variateContents = variateContents;
            return this;
        }
        
        /**
         * Build call for setContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsSetContentRequest campaignsSetContentRequest = buildBodyParams();
            return setContentCall(campaignId, campaignsSetContentRequest, _callback);
        }

        private CampaignsSetContentRequest buildBodyParams() {
            CampaignsSetContentRequest campaignsSetContentRequest = new CampaignsSetContentRequest();
            campaignsSetContentRequest.plainText(this.plainText);
            campaignsSetContentRequest.html(this.html);
            campaignsSetContentRequest.url(this.url);
            campaignsSetContentRequest.template(this.template);
            campaignsSetContentRequest.archive(this.archive);
            campaignsSetContentRequest.variateContents(this.variateContents);
            return campaignsSetContentRequest;
        }

        /**
         * Execute setContent request
         * @return CampaignsSetContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsSetContentResponse execute() throws ApiException {
            CampaignsSetContentRequest campaignsSetContentRequest = buildBodyParams();
            ApiResponse<CampaignsSetContentResponse> localVarResp = setContentWithHttpInfo(campaignId, campaignsSetContentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setContent request with HTTP info returned
         * @return ApiResponse&lt;CampaignsSetContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsSetContentResponse> executeWithHttpInfo() throws ApiException {
            CampaignsSetContentRequest campaignsSetContentRequest = buildBodyParams();
            return setContentWithHttpInfo(campaignId, campaignsSetContentRequest);
        }

        /**
         * Execute setContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsSetContentResponse> _callback) throws ApiException {
            CampaignsSetContentRequest campaignsSetContentRequest = buildBodyParams();
            return setContentAsync(campaignId, campaignsSetContentRequest, _callback);
        }
    }

    /**
     * Set campaign content
     * Set the content for a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param campaignsSetContentRequest  (required)
     * @return SetContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SetContentRequestBuilder setContent(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new SetContentRequestBuilder(campaignId);
    }
    private okhttp3.Call unscheduleActionCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/actions/unschedule"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unscheduleActionValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling unscheduleAction(Async)");
        }

        return unscheduleActionCall(campaignId, _callback);

    }


    private ApiResponse<Void> unscheduleActionWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = unscheduleActionValidateBeforeCall(campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unscheduleActionAsync(String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unscheduleActionValidateBeforeCall(campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnscheduleActionRequestBuilder {
        private final String campaignId;

        private UnscheduleActionRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Build call for unscheduleAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unscheduleActionCall(campaignId, _callback);
        }


        /**
         * Execute unscheduleAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unscheduleActionWithHttpInfo(campaignId);
        }

        /**
         * Execute unscheduleAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unscheduleActionWithHttpInfo(campaignId);
        }

        /**
         * Execute unscheduleAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unscheduleActionAsync(campaignId, _callback);
        }
    }

    /**
     * Unschedule campaign
     * Unschedule a scheduled campaign that hasn&#39;t started sending.
     * @param campaignId The unique id for the campaign. (required)
     * @return UnscheduleActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UnscheduleActionRequestBuilder unscheduleAction(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new UnscheduleActionRequestBuilder(campaignId);
    }
    private okhttp3.Call updateFeedbackMessageCall(String campaignId, String feedbackId, CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsUpdateFeedbackMessageRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/feedback/{feedback_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "feedback_id" + "}", localVarApiClient.escapeString(feedbackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFeedbackMessageValidateBeforeCall(String campaignId, String feedbackId, CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateFeedbackMessage(Async)");
        }

        // verify the required parameter 'feedbackId' is set
        if (feedbackId == null) {
            throw new ApiException("Missing the required parameter 'feedbackId' when calling updateFeedbackMessage(Async)");
        }

        // verify the required parameter 'campaignsUpdateFeedbackMessageRequest' is set
        if (campaignsUpdateFeedbackMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsUpdateFeedbackMessageRequest' when calling updateFeedbackMessage(Async)");
        }

        return updateFeedbackMessageCall(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest, _callback);

    }


    private ApiResponse<CampaignsUpdateFeedbackMessageResponse> updateFeedbackMessageWithHttpInfo(String campaignId, String feedbackId, CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFeedbackMessageValidateBeforeCall(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest, null);
        Type localVarReturnType = new TypeToken<CampaignsUpdateFeedbackMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFeedbackMessageAsync(String campaignId, String feedbackId, CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest, final ApiCallback<CampaignsUpdateFeedbackMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFeedbackMessageValidateBeforeCall(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignsUpdateFeedbackMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFeedbackMessageRequestBuilder {
        private final String campaignId;
        private final String feedbackId;
        private Integer blockId;
        private String message;
        private Boolean isComplete;

        private UpdateFeedbackMessageRequestBuilder(String campaignId, String feedbackId) {
            this.campaignId = campaignId;
            this.feedbackId = feedbackId;
        }

        /**
         * Set blockId
         * @param blockId The block id for the editable block that the feedback addresses. (optional)
         * @return UpdateFeedbackMessageRequestBuilder
         */
        public UpdateFeedbackMessageRequestBuilder blockId(Integer blockId) {
            this.blockId = blockId;
            return this;
        }
        
        /**
         * Set message
         * @param message The content of the feedback. (optional)
         * @return UpdateFeedbackMessageRequestBuilder
         */
        public UpdateFeedbackMessageRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set isComplete
         * @param isComplete The status of feedback. (optional)
         * @return UpdateFeedbackMessageRequestBuilder
         */
        public UpdateFeedbackMessageRequestBuilder isComplete(Boolean isComplete) {
            this.isComplete = isComplete;
            return this;
        }
        
        /**
         * Build call for updateFeedbackMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest = buildBodyParams();
            return updateFeedbackMessageCall(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest, _callback);
        }

        private CampaignsUpdateFeedbackMessageRequest buildBodyParams() {
            CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest = new CampaignsUpdateFeedbackMessageRequest();
            campaignsUpdateFeedbackMessageRequest.blockId(this.blockId);
            campaignsUpdateFeedbackMessageRequest.message(this.message);
            campaignsUpdateFeedbackMessageRequest.isComplete(this.isComplete);
            return campaignsUpdateFeedbackMessageRequest;
        }

        /**
         * Execute updateFeedbackMessage request
         * @return CampaignsUpdateFeedbackMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsUpdateFeedbackMessageResponse execute() throws ApiException {
            CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest = buildBodyParams();
            ApiResponse<CampaignsUpdateFeedbackMessageResponse> localVarResp = updateFeedbackMessageWithHttpInfo(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFeedbackMessage request with HTTP info returned
         * @return ApiResponse&lt;CampaignsUpdateFeedbackMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsUpdateFeedbackMessageResponse> executeWithHttpInfo() throws ApiException {
            CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest = buildBodyParams();
            return updateFeedbackMessageWithHttpInfo(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest);
        }

        /**
         * Execute updateFeedbackMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsUpdateFeedbackMessageResponse> _callback) throws ApiException {
            CampaignsUpdateFeedbackMessageRequest campaignsUpdateFeedbackMessageRequest = buildBodyParams();
            return updateFeedbackMessageAsync(campaignId, feedbackId, campaignsUpdateFeedbackMessageRequest, _callback);
        }
    }

    /**
     * Update campaign feedback message
     * Update a specific feedback message for a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @param campaignsUpdateFeedbackMessageRequest  (required)
     * @return UpdateFeedbackMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFeedbackMessageRequestBuilder updateFeedbackMessage(String campaignId, String feedbackId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (feedbackId == null) throw new IllegalArgumentException("\"feedbackId\" is required but got null");
            

        return new UpdateFeedbackMessageRequestBuilder(campaignId, feedbackId);
    }
    private okhttp3.Call updateSettingsCall(String campaignId, CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignsUpdateSettingsRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(String campaignId, CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateSettings(Async)");
        }

        // verify the required parameter 'campaignsUpdateSettingsRequest' is set
        if (campaignsUpdateSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignsUpdateSettingsRequest' when calling updateSettings(Async)");
        }

        return updateSettingsCall(campaignId, campaignsUpdateSettingsRequest, _callback);

    }


    private ApiResponse<CampaignsUpdateSettingsResponse> updateSettingsWithHttpInfo(String campaignId, CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(campaignId, campaignsUpdateSettingsRequest, null);
        Type localVarReturnType = new TypeToken<CampaignsUpdateSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(String campaignId, CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest, final ApiCallback<CampaignsUpdateSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(campaignId, campaignsUpdateSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignsUpdateSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final CampaignSettingsProperty2 settings;
        private final String campaignId;
        private ListProperty2 recipients;
        private ABTestOptionsProperty variateSettings;
        private CampaignTrackingOptionsProperty tracking;
        private RSSOptionsProperty1 rssOpts;
        private CampaignSocialCardProperty socialCard;

        private UpdateSettingsRequestBuilder(CampaignSettingsProperty2 settings, String campaignId) {
            this.settings = settings;
            this.campaignId = campaignId;
        }

        /**
         * Set recipients
         * @param recipients  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder recipients(ListProperty2 recipients) {
            this.recipients = recipients;
            return this;
        }
        
        /**
         * Set variateSettings
         * @param variateSettings  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder variateSettings(ABTestOptionsProperty variateSettings) {
            this.variateSettings = variateSettings;
            return this;
        }
        
        /**
         * Set tracking
         * @param tracking  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder tracking(CampaignTrackingOptionsProperty tracking) {
            this.tracking = tracking;
            return this;
        }
        
        /**
         * Set rssOpts
         * @param rssOpts  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder rssOpts(RSSOptionsProperty1 rssOpts) {
            this.rssOpts = rssOpts;
            return this;
        }
        
        /**
         * Set socialCard
         * @param socialCard  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder socialCard(CampaignSocialCardProperty socialCard) {
            this.socialCard = socialCard;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest = buildBodyParams();
            return updateSettingsCall(campaignId, campaignsUpdateSettingsRequest, _callback);
        }

        private CampaignsUpdateSettingsRequest buildBodyParams() {
            CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest = new CampaignsUpdateSettingsRequest();
            campaignsUpdateSettingsRequest.recipients(this.recipients);
            campaignsUpdateSettingsRequest.settings(this.settings);
            campaignsUpdateSettingsRequest.variateSettings(this.variateSettings);
            campaignsUpdateSettingsRequest.tracking(this.tracking);
            campaignsUpdateSettingsRequest.rssOpts(this.rssOpts);
            campaignsUpdateSettingsRequest.socialCard(this.socialCard);
            return campaignsUpdateSettingsRequest;
        }

        /**
         * Execute updateSettings request
         * @return CampaignsUpdateSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsUpdateSettingsResponse execute() throws ApiException {
            CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest = buildBodyParams();
            ApiResponse<CampaignsUpdateSettingsResponse> localVarResp = updateSettingsWithHttpInfo(campaignId, campaignsUpdateSettingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;CampaignsUpdateSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsUpdateSettingsResponse> executeWithHttpInfo() throws ApiException {
            CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest = buildBodyParams();
            return updateSettingsWithHttpInfo(campaignId, campaignsUpdateSettingsRequest);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsUpdateSettingsResponse> _callback) throws ApiException {
            CampaignsUpdateSettingsRequest campaignsUpdateSettingsRequest = buildBodyParams();
            return updateSettingsAsync(campaignId, campaignsUpdateSettingsRequest, _callback);
        }
    }

    /**
     * Update campaign settings
     * Update some or all of the settings for a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param campaignsUpdateSettingsRequest  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(CampaignSettingsProperty2 settings, String campaignId) throws IllegalArgumentException {
        if (settings == null) throw new IllegalArgumentException("\"settings\" is required but got null");
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new UpdateSettingsRequestBuilder(settings, campaignId);
    }
}
