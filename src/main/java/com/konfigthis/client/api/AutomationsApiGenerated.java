/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AutomationCampaignSettingsProperty;
import com.konfigthis.client.model.AutomationDelayProperty;
import com.konfigthis.client.model.AutomationTriggerProperty;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmail200Response;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmailRequest;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmailResponse;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsArchiveActionResponse;
import com.konfigthis.client.model.AutomationsArchiveActiondefaultResponse;
import com.konfigthis.client.model.AutomationsClassicAutomationSubscriberInfo200Response;
import com.konfigthis.client.model.AutomationsClassicAutomationSubscriberInfoResponse;
import com.konfigthis.client.model.AutomationsClassicAutomationSubscriberInfodefaultResponse;
import com.konfigthis.client.model.AutomationsCreateClassic200Response;
import com.konfigthis.client.model.AutomationsCreateClassicRequest;
import com.konfigthis.client.model.AutomationsCreateClassicResponse;
import com.konfigthis.client.model.AutomationsCreateClassicdefaultResponse;
import com.konfigthis.client.model.AutomationsDeleteWorkflowEmailResponse;
import com.konfigthis.client.model.AutomationsDeleteWorkflowEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowEmails200Response;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowEmailsResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowInfo200Response;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowInfoResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowInfodefaultResponse;
import com.konfigthis.client.model.AutomationsGetEmailInfo200Response;
import com.konfigthis.client.model.AutomationsGetEmailInfoResponse;
import com.konfigthis.client.model.AutomationsGetEmailInfodefaultResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscriberInfo200Response;
import com.konfigthis.client.model.AutomationsGetRemovedSubscriberInfoResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscriberInfodefaultResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscribers200Response;
import com.konfigthis.client.model.AutomationsGetRemovedSubscribersResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscribersdefaultResponse;
import com.konfigthis.client.model.AutomationsListQueueEmails200Response;
import com.konfigthis.client.model.AutomationsListQueueEmailsResponse;
import com.konfigthis.client.model.AutomationsListQueueEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsListSummary200Response;
import com.konfigthis.client.model.AutomationsListSummaryResponse;
import com.konfigthis.client.model.AutomationsListSummarydefaultResponse;
import com.konfigthis.client.model.AutomationsPauseAutomatedEmailResponse;
import com.konfigthis.client.model.AutomationsPauseAutomatedEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsPauseWorkflowEmailsResponse;
import com.konfigthis.client.model.AutomationsPauseWorkflowEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsRemoveSubscriberFromWorkflow200Response;
import com.konfigthis.client.model.AutomationsRemoveSubscriberFromWorkflowResponse;
import com.konfigthis.client.model.AutomationsRemoveSubscriberFromWorkflowdefaultResponse;
import com.konfigthis.client.model.AutomationsStartAllEmailsResponse;
import com.konfigthis.client.model.AutomationsStartAllEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsStartAutomatedEmailResponse;
import com.konfigthis.client.model.AutomationsStartAutomatedEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmail200Response;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmailRequest;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmailResponse;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmaildefaultResponse;
import com.konfigthis.client.model.CampaignSettingsProperty;
import com.konfigthis.client.model.ListProperty;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AutomationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutomationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AutomationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addSubscriberToWorkflowEmailCall(String workflowId, String workflowEmailId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationsAddSubscriberToWorkflowEmailRequest;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}/queue"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSubscriberToWorkflowEmailValidateBeforeCall(String workflowId, String workflowEmailId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling addSubscriberToWorkflowEmail(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling addSubscriberToWorkflowEmail(Async)");
        }

        // verify the required parameter 'automationsAddSubscriberToWorkflowEmailRequest' is set
        if (automationsAddSubscriberToWorkflowEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'automationsAddSubscriberToWorkflowEmailRequest' when calling addSubscriberToWorkflowEmail(Async)");
        }

        return addSubscriberToWorkflowEmailCall(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest, _callback);

    }


    private ApiResponse<AutomationsAddSubscriberToWorkflowEmailResponse> addSubscriberToWorkflowEmailWithHttpInfo(String workflowId, String workflowEmailId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = addSubscriberToWorkflowEmailValidateBeforeCall(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest, null);
        Type localVarReturnType = new TypeToken<AutomationsAddSubscriberToWorkflowEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSubscriberToWorkflowEmailAsync(String workflowId, String workflowEmailId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest, final ApiCallback<AutomationsAddSubscriberToWorkflowEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSubscriberToWorkflowEmailValidateBeforeCall(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<AutomationsAddSubscriberToWorkflowEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddSubscriberToWorkflowEmailRequestBuilder {
        private final String emailAddress;
        private final String workflowId;
        private final String workflowEmailId;

        private AddSubscriberToWorkflowEmailRequestBuilder(String emailAddress, String workflowId, String workflowEmailId) {
            this.emailAddress = emailAddress;
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Build call for addSubscriberToWorkflowEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            return addSubscriberToWorkflowEmailCall(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest, _callback);
        }

        private AutomationsAddSubscriberToWorkflowEmailRequest buildBodyParams() {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = new AutomationsAddSubscriberToWorkflowEmailRequest();
            automationsAddSubscriberToWorkflowEmailRequest.emailAddress(this.emailAddress);
            return automationsAddSubscriberToWorkflowEmailRequest;
        }

        /**
         * Execute addSubscriberToWorkflowEmail request
         * @return AutomationsAddSubscriberToWorkflowEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsAddSubscriberToWorkflowEmailResponse execute() throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            ApiResponse<AutomationsAddSubscriberToWorkflowEmailResponse> localVarResp = addSubscriberToWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addSubscriberToWorkflowEmail request with HTTP info returned
         * @return ApiResponse&lt;AutomationsAddSubscriberToWorkflowEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsAddSubscriberToWorkflowEmailResponse> executeWithHttpInfo() throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            return addSubscriberToWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest);
        }

        /**
         * Execute addSubscriberToWorkflowEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsAddSubscriberToWorkflowEmailResponse> _callback) throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            return addSubscriberToWorkflowEmailAsync(workflowId, workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest, _callback);
        }
    }

    /**
     * Add subscriber to workflow email
     * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param automationsAddSubscriberToWorkflowEmailRequest  (required)
     * @return AddSubscriberToWorkflowEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddSubscriberToWorkflowEmailRequestBuilder addSubscriberToWorkflowEmail(String emailAddress, String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new AddSubscriberToWorkflowEmailRequestBuilder(emailAddress, workflowId, workflowEmailId);
    }
    private okhttp3.Call archiveActionCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/actions/archive"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveActionValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling archiveAction(Async)");
        }

        return archiveActionCall(workflowId, _callback);

    }


    private ApiResponse<Void> archiveActionWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = archiveActionValidateBeforeCall(workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call archiveActionAsync(String workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveActionValidateBeforeCall(workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ArchiveActionRequestBuilder {
        private final String workflowId;

        private ArchiveActionRequestBuilder(String workflowId) {
            this.workflowId = workflowId;
        }

        /**
         * Build call for archiveAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveActionCall(workflowId, _callback);
        }


        /**
         * Execute archiveAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            archiveActionWithHttpInfo(workflowId);
        }

        /**
         * Execute archiveAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return archiveActionWithHttpInfo(workflowId);
        }

        /**
         * Execute archiveAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return archiveActionAsync(workflowId, _callback);
        }
    }

    /**
     * Archive automation
     * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return ArchiveActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveActionRequestBuilder archiveAction(String workflowId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new ArchiveActionRequestBuilder(workflowId);
    }
    private okhttp3.Call classicAutomationSubscriberInfoCall(String workflowId, String workflowEmailId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classicAutomationSubscriberInfoValidateBeforeCall(String workflowId, String workflowEmailId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling classicAutomationSubscriberInfo(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling classicAutomationSubscriberInfo(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling classicAutomationSubscriberInfo(Async)");
        }

        return classicAutomationSubscriberInfoCall(workflowId, workflowEmailId, subscriberHash, _callback);

    }


    private ApiResponse<AutomationsClassicAutomationSubscriberInfoResponse> classicAutomationSubscriberInfoWithHttpInfo(String workflowId, String workflowEmailId, String subscriberHash) throws ApiException {
        okhttp3.Call localVarCall = classicAutomationSubscriberInfoValidateBeforeCall(workflowId, workflowEmailId, subscriberHash, null);
        Type localVarReturnType = new TypeToken<AutomationsClassicAutomationSubscriberInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call classicAutomationSubscriberInfoAsync(String workflowId, String workflowEmailId, String subscriberHash, final ApiCallback<AutomationsClassicAutomationSubscriberInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = classicAutomationSubscriberInfoValidateBeforeCall(workflowId, workflowEmailId, subscriberHash, _callback);
        Type localVarReturnType = new TypeToken<AutomationsClassicAutomationSubscriberInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClassicAutomationSubscriberInfoRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;
        private final String subscriberHash;

        private ClassicAutomationSubscriberInfoRequestBuilder(String workflowId, String workflowEmailId, String subscriberHash) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Build call for classicAutomationSubscriberInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return classicAutomationSubscriberInfoCall(workflowId, workflowEmailId, subscriberHash, _callback);
        }


        /**
         * Execute classicAutomationSubscriberInfo request
         * @return AutomationsClassicAutomationSubscriberInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsClassicAutomationSubscriberInfoResponse execute() throws ApiException {
            ApiResponse<AutomationsClassicAutomationSubscriberInfoResponse> localVarResp = classicAutomationSubscriberInfoWithHttpInfo(workflowId, workflowEmailId, subscriberHash);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute classicAutomationSubscriberInfo request with HTTP info returned
         * @return ApiResponse&lt;AutomationsClassicAutomationSubscriberInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsClassicAutomationSubscriberInfoResponse> executeWithHttpInfo() throws ApiException {
            return classicAutomationSubscriberInfoWithHttpInfo(workflowId, workflowEmailId, subscriberHash);
        }

        /**
         * Execute classicAutomationSubscriberInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsClassicAutomationSubscriberInfoResponse> _callback) throws ApiException {
            return classicAutomationSubscriberInfoAsync(workflowId, workflowEmailId, subscriberHash, _callback);
        }
    }

    /**
     * Get automated email subscriber
     * Get information about a specific subscriber in a classic automation email queue.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return ClassicAutomationSubscriberInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ClassicAutomationSubscriberInfoRequestBuilder classicAutomationSubscriberInfo(String workflowId, String workflowEmailId, String subscriberHash) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new ClassicAutomationSubscriberInfoRequestBuilder(workflowId, workflowEmailId, subscriberHash);
    }
    private okhttp3.Call createClassicCall(AutomationsCreateClassicRequest automationsCreateClassicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationsCreateClassicRequest;

        // create path and map variables
        String localVarPath = "/automations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClassicValidateBeforeCall(AutomationsCreateClassicRequest automationsCreateClassicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'automationsCreateClassicRequest' is set
        if (automationsCreateClassicRequest == null) {
            throw new ApiException("Missing the required parameter 'automationsCreateClassicRequest' when calling createClassic(Async)");
        }

        return createClassicCall(automationsCreateClassicRequest, _callback);

    }


    private ApiResponse<AutomationsCreateClassicResponse> createClassicWithHttpInfo(AutomationsCreateClassicRequest automationsCreateClassicRequest) throws ApiException {
        okhttp3.Call localVarCall = createClassicValidateBeforeCall(automationsCreateClassicRequest, null);
        Type localVarReturnType = new TypeToken<AutomationsCreateClassicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createClassicAsync(AutomationsCreateClassicRequest automationsCreateClassicRequest, final ApiCallback<AutomationsCreateClassicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClassicValidateBeforeCall(automationsCreateClassicRequest, _callback);
        Type localVarReturnType = new TypeToken<AutomationsCreateClassicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateClassicRequestBuilder {
        private final ListProperty recipients;
        private final AutomationTriggerProperty triggerSettings;
        private AutomationCampaignSettingsProperty settings;

        private CreateClassicRequestBuilder(ListProperty recipients, AutomationTriggerProperty triggerSettings) {
            this.recipients = recipients;
            this.triggerSettings = triggerSettings;
        }

        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateClassicRequestBuilder
         */
        public CreateClassicRequestBuilder settings(AutomationCampaignSettingsProperty settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Build call for createClassic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AutomationsCreateClassicRequest automationsCreateClassicRequest = buildBodyParams();
            return createClassicCall(automationsCreateClassicRequest, _callback);
        }

        private AutomationsCreateClassicRequest buildBodyParams() {
            AutomationsCreateClassicRequest automationsCreateClassicRequest = new AutomationsCreateClassicRequest();
            automationsCreateClassicRequest.recipients(this.recipients);
            automationsCreateClassicRequest.settings(this.settings);
            automationsCreateClassicRequest.triggerSettings(this.triggerSettings);
            return automationsCreateClassicRequest;
        }

        /**
         * Execute createClassic request
         * @return AutomationsCreateClassicResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsCreateClassicResponse execute() throws ApiException {
            AutomationsCreateClassicRequest automationsCreateClassicRequest = buildBodyParams();
            ApiResponse<AutomationsCreateClassicResponse> localVarResp = createClassicWithHttpInfo(automationsCreateClassicRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createClassic request with HTTP info returned
         * @return ApiResponse&lt;AutomationsCreateClassicResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsCreateClassicResponse> executeWithHttpInfo() throws ApiException {
            AutomationsCreateClassicRequest automationsCreateClassicRequest = buildBodyParams();
            return createClassicWithHttpInfo(automationsCreateClassicRequest);
        }

        /**
         * Execute createClassic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsCreateClassicResponse> _callback) throws ApiException {
            AutomationsCreateClassicRequest automationsCreateClassicRequest = buildBodyParams();
            return createClassicAsync(automationsCreateClassicRequest, _callback);
        }
    }

    /**
     * Add automation
     * Create a new classic automation in your Mailchimp account.
     * @param automationsCreateClassicRequest  (required)
     * @return CreateClassicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateClassicRequestBuilder createClassic(ListProperty recipients, AutomationTriggerProperty triggerSettings) throws IllegalArgumentException {
        if (recipients == null) throw new IllegalArgumentException("\"recipients\" is required but got null");
        if (triggerSettings == null) throw new IllegalArgumentException("\"triggerSettings\" is required but got null");
        return new CreateClassicRequestBuilder(recipients, triggerSettings);
    }
    private okhttp3.Call deleteWorkflowEmailCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkflowEmailValidateBeforeCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling deleteWorkflowEmail(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling deleteWorkflowEmail(Async)");
        }

        return deleteWorkflowEmailCall(workflowId, workflowEmailId, _callback);

    }


    private ApiResponse<Void> deleteWorkflowEmailWithHttpInfo(String workflowId, String workflowEmailId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkflowEmailValidateBeforeCall(workflowId, workflowEmailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkflowEmailAsync(String workflowId, String workflowEmailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkflowEmailValidateBeforeCall(workflowId, workflowEmailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteWorkflowEmailRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;

        private DeleteWorkflowEmailRequestBuilder(String workflowId, String workflowEmailId) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Build call for deleteWorkflowEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkflowEmailCall(workflowId, workflowEmailId, _callback);
        }


        /**
         * Execute deleteWorkflowEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkflowEmailWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute deleteWorkflowEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkflowEmailWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute deleteWorkflowEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkflowEmailAsync(workflowId, workflowEmailId, _callback);
        }
    }

    /**
     * Delete workflow email
     * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return DeleteWorkflowEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWorkflowEmailRequestBuilder deleteWorkflowEmail(String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new DeleteWorkflowEmailRequestBuilder(workflowId, workflowEmailId);
    }
    private okhttp3.Call getClassicWorkflowEmailsCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassicWorkflowEmailsValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling getClassicWorkflowEmails(Async)");
        }

        return getClassicWorkflowEmailsCall(workflowId, _callback);

    }


    private ApiResponse<AutomationsGetClassicWorkflowEmailsResponse> getClassicWorkflowEmailsWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = getClassicWorkflowEmailsValidateBeforeCall(workflowId, null);
        Type localVarReturnType = new TypeToken<AutomationsGetClassicWorkflowEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClassicWorkflowEmailsAsync(String workflowId, final ApiCallback<AutomationsGetClassicWorkflowEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassicWorkflowEmailsValidateBeforeCall(workflowId, _callback);
        Type localVarReturnType = new TypeToken<AutomationsGetClassicWorkflowEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClassicWorkflowEmailsRequestBuilder {
        private final String workflowId;

        private GetClassicWorkflowEmailsRequestBuilder(String workflowId) {
            this.workflowId = workflowId;
        }

        /**
         * Build call for getClassicWorkflowEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClassicWorkflowEmailsCall(workflowId, _callback);
        }


        /**
         * Execute getClassicWorkflowEmails request
         * @return AutomationsGetClassicWorkflowEmailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsGetClassicWorkflowEmailsResponse execute() throws ApiException {
            ApiResponse<AutomationsGetClassicWorkflowEmailsResponse> localVarResp = getClassicWorkflowEmailsWithHttpInfo(workflowId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClassicWorkflowEmails request with HTTP info returned
         * @return ApiResponse&lt;AutomationsGetClassicWorkflowEmailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsGetClassicWorkflowEmailsResponse> executeWithHttpInfo() throws ApiException {
            return getClassicWorkflowEmailsWithHttpInfo(workflowId);
        }

        /**
         * Execute getClassicWorkflowEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsGetClassicWorkflowEmailsResponse> _callback) throws ApiException {
            return getClassicWorkflowEmailsAsync(workflowId, _callback);
        }
    }

    /**
     * List automated emails
     * Get a summary of the emails in a classic automation workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return GetClassicWorkflowEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetClassicWorkflowEmailsRequestBuilder getClassicWorkflowEmails(String workflowId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new GetClassicWorkflowEmailsRequestBuilder(workflowId);
    }
    private okhttp3.Call getClassicWorkflowInfoCall(String workflowId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassicWorkflowInfoValidateBeforeCall(String workflowId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling getClassicWorkflowInfo(Async)");
        }

        return getClassicWorkflowInfoCall(workflowId, fields, excludeFields, _callback);

    }


    private ApiResponse<AutomationsGetClassicWorkflowInfoResponse> getClassicWorkflowInfoWithHttpInfo(String workflowId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getClassicWorkflowInfoValidateBeforeCall(workflowId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<AutomationsGetClassicWorkflowInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClassicWorkflowInfoAsync(String workflowId, List<String> fields, List<String> excludeFields, final ApiCallback<AutomationsGetClassicWorkflowInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassicWorkflowInfoValidateBeforeCall(workflowId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<AutomationsGetClassicWorkflowInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClassicWorkflowInfoRequestBuilder {
        private final String workflowId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetClassicWorkflowInfoRequestBuilder(String workflowId) {
            this.workflowId = workflowId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetClassicWorkflowInfoRequestBuilder
         */
        public GetClassicWorkflowInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetClassicWorkflowInfoRequestBuilder
         */
        public GetClassicWorkflowInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getClassicWorkflowInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClassicWorkflowInfoCall(workflowId, fields, excludeFields, _callback);
        }


        /**
         * Execute getClassicWorkflowInfo request
         * @return AutomationsGetClassicWorkflowInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsGetClassicWorkflowInfoResponse execute() throws ApiException {
            ApiResponse<AutomationsGetClassicWorkflowInfoResponse> localVarResp = getClassicWorkflowInfoWithHttpInfo(workflowId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClassicWorkflowInfo request with HTTP info returned
         * @return ApiResponse&lt;AutomationsGetClassicWorkflowInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsGetClassicWorkflowInfoResponse> executeWithHttpInfo() throws ApiException {
            return getClassicWorkflowInfoWithHttpInfo(workflowId, fields, excludeFields);
        }

        /**
         * Execute getClassicWorkflowInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsGetClassicWorkflowInfoResponse> _callback) throws ApiException {
            return getClassicWorkflowInfoAsync(workflowId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get automation info
     * Get a summary of an individual classic automation workflow&#39;s settings and content. The &#x60;trigger_settings&#x60; object returns information for the first email in the workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return GetClassicWorkflowInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetClassicWorkflowInfoRequestBuilder getClassicWorkflowInfo(String workflowId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new GetClassicWorkflowInfoRequestBuilder(workflowId);
    }
    private okhttp3.Call getEmailInfoCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailInfoValidateBeforeCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling getEmailInfo(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling getEmailInfo(Async)");
        }

        return getEmailInfoCall(workflowId, workflowEmailId, _callback);

    }


    private ApiResponse<AutomationsGetEmailInfoResponse> getEmailInfoWithHttpInfo(String workflowId, String workflowEmailId) throws ApiException {
        okhttp3.Call localVarCall = getEmailInfoValidateBeforeCall(workflowId, workflowEmailId, null);
        Type localVarReturnType = new TypeToken<AutomationsGetEmailInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailInfoAsync(String workflowId, String workflowEmailId, final ApiCallback<AutomationsGetEmailInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailInfoValidateBeforeCall(workflowId, workflowEmailId, _callback);
        Type localVarReturnType = new TypeToken<AutomationsGetEmailInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailInfoRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;

        private GetEmailInfoRequestBuilder(String workflowId, String workflowEmailId) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Build call for getEmailInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailInfoCall(workflowId, workflowEmailId, _callback);
        }


        /**
         * Execute getEmailInfo request
         * @return AutomationsGetEmailInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsGetEmailInfoResponse execute() throws ApiException {
            ApiResponse<AutomationsGetEmailInfoResponse> localVarResp = getEmailInfoWithHttpInfo(workflowId, workflowEmailId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailInfo request with HTTP info returned
         * @return ApiResponse&lt;AutomationsGetEmailInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsGetEmailInfoResponse> executeWithHttpInfo() throws ApiException {
            return getEmailInfoWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute getEmailInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsGetEmailInfoResponse> _callback) throws ApiException {
            return getEmailInfoAsync(workflowId, workflowEmailId, _callback);
        }
    }

    /**
     * Get workflow email info
     * Get information about an individual classic automation workflow email.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return GetEmailInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailInfoRequestBuilder getEmailInfo(String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new GetEmailInfoRequestBuilder(workflowId, workflowEmailId);
    }
    private okhttp3.Call getRemovedSubscriberInfoCall(String workflowId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/removed-subscribers/{subscriber_hash}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemovedSubscriberInfoValidateBeforeCall(String workflowId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling getRemovedSubscriberInfo(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getRemovedSubscriberInfo(Async)");
        }

        return getRemovedSubscriberInfoCall(workflowId, subscriberHash, _callback);

    }


    private ApiResponse<AutomationsGetRemovedSubscriberInfoResponse> getRemovedSubscriberInfoWithHttpInfo(String workflowId, String subscriberHash) throws ApiException {
        okhttp3.Call localVarCall = getRemovedSubscriberInfoValidateBeforeCall(workflowId, subscriberHash, null);
        Type localVarReturnType = new TypeToken<AutomationsGetRemovedSubscriberInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRemovedSubscriberInfoAsync(String workflowId, String subscriberHash, final ApiCallback<AutomationsGetRemovedSubscriberInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemovedSubscriberInfoValidateBeforeCall(workflowId, subscriberHash, _callback);
        Type localVarReturnType = new TypeToken<AutomationsGetRemovedSubscriberInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRemovedSubscriberInfoRequestBuilder {
        private final String workflowId;
        private final String subscriberHash;

        private GetRemovedSubscriberInfoRequestBuilder(String workflowId, String subscriberHash) {
            this.workflowId = workflowId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Build call for getRemovedSubscriberInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRemovedSubscriberInfoCall(workflowId, subscriberHash, _callback);
        }


        /**
         * Execute getRemovedSubscriberInfo request
         * @return AutomationsGetRemovedSubscriberInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsGetRemovedSubscriberInfoResponse execute() throws ApiException {
            ApiResponse<AutomationsGetRemovedSubscriberInfoResponse> localVarResp = getRemovedSubscriberInfoWithHttpInfo(workflowId, subscriberHash);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRemovedSubscriberInfo request with HTTP info returned
         * @return ApiResponse&lt;AutomationsGetRemovedSubscriberInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsGetRemovedSubscriberInfoResponse> executeWithHttpInfo() throws ApiException {
            return getRemovedSubscriberInfoWithHttpInfo(workflowId, subscriberHash);
        }

        /**
         * Execute getRemovedSubscriberInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsGetRemovedSubscriberInfoResponse> _callback) throws ApiException {
            return getRemovedSubscriberInfoAsync(workflowId, subscriberHash, _callback);
        }
    }

    /**
     * Get subscriber removed from workflow
     * Get information about a specific subscriber who was removed from a classic automation workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return GetRemovedSubscriberInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetRemovedSubscriberInfoRequestBuilder getRemovedSubscriberInfo(String workflowId, String subscriberHash) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetRemovedSubscriberInfoRequestBuilder(workflowId, subscriberHash);
    }
    private okhttp3.Call getRemovedSubscribersCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/removed-subscribers"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemovedSubscribersValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling getRemovedSubscribers(Async)");
        }

        return getRemovedSubscribersCall(workflowId, _callback);

    }


    private ApiResponse<AutomationsGetRemovedSubscribersResponse> getRemovedSubscribersWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = getRemovedSubscribersValidateBeforeCall(workflowId, null);
        Type localVarReturnType = new TypeToken<AutomationsGetRemovedSubscribersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRemovedSubscribersAsync(String workflowId, final ApiCallback<AutomationsGetRemovedSubscribersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemovedSubscribersValidateBeforeCall(workflowId, _callback);
        Type localVarReturnType = new TypeToken<AutomationsGetRemovedSubscribersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRemovedSubscribersRequestBuilder {
        private final String workflowId;

        private GetRemovedSubscribersRequestBuilder(String workflowId) {
            this.workflowId = workflowId;
        }

        /**
         * Build call for getRemovedSubscribers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRemovedSubscribersCall(workflowId, _callback);
        }


        /**
         * Execute getRemovedSubscribers request
         * @return AutomationsGetRemovedSubscribersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsGetRemovedSubscribersResponse execute() throws ApiException {
            ApiResponse<AutomationsGetRemovedSubscribersResponse> localVarResp = getRemovedSubscribersWithHttpInfo(workflowId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRemovedSubscribers request with HTTP info returned
         * @return ApiResponse&lt;AutomationsGetRemovedSubscribersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsGetRemovedSubscribersResponse> executeWithHttpInfo() throws ApiException {
            return getRemovedSubscribersWithHttpInfo(workflowId);
        }

        /**
         * Execute getRemovedSubscribers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsGetRemovedSubscribersResponse> _callback) throws ApiException {
            return getRemovedSubscribersAsync(workflowId, _callback);
        }
    }

    /**
     * List subscribers removed from workflow
     * Get information about subscribers who were removed from a classic automation workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return GetRemovedSubscribersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetRemovedSubscribersRequestBuilder getRemovedSubscribers(String workflowId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new GetRemovedSubscribersRequestBuilder(workflowId);
    }
    private okhttp3.Call listQueueEmailsCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}/queue"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listQueueEmailsValidateBeforeCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling listQueueEmails(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling listQueueEmails(Async)");
        }

        return listQueueEmailsCall(workflowId, workflowEmailId, _callback);

    }


    private ApiResponse<AutomationsListQueueEmailsResponse> listQueueEmailsWithHttpInfo(String workflowId, String workflowEmailId) throws ApiException {
        okhttp3.Call localVarCall = listQueueEmailsValidateBeforeCall(workflowId, workflowEmailId, null);
        Type localVarReturnType = new TypeToken<AutomationsListQueueEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listQueueEmailsAsync(String workflowId, String workflowEmailId, final ApiCallback<AutomationsListQueueEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listQueueEmailsValidateBeforeCall(workflowId, workflowEmailId, _callback);
        Type localVarReturnType = new TypeToken<AutomationsListQueueEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListQueueEmailsRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;

        private ListQueueEmailsRequestBuilder(String workflowId, String workflowEmailId) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Build call for listQueueEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listQueueEmailsCall(workflowId, workflowEmailId, _callback);
        }


        /**
         * Execute listQueueEmails request
         * @return AutomationsListQueueEmailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsListQueueEmailsResponse execute() throws ApiException {
            ApiResponse<AutomationsListQueueEmailsResponse> localVarResp = listQueueEmailsWithHttpInfo(workflowId, workflowEmailId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listQueueEmails request with HTTP info returned
         * @return ApiResponse&lt;AutomationsListQueueEmailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsListQueueEmailsResponse> executeWithHttpInfo() throws ApiException {
            return listQueueEmailsWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute listQueueEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsListQueueEmailsResponse> _callback) throws ApiException {
            return listQueueEmailsAsync(workflowId, workflowEmailId, _callback);
        }
    }

    /**
     * List automated email subscribers
     * Get information about a classic automation email queue.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return ListQueueEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListQueueEmailsRequestBuilder listQueueEmails(String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new ListQueueEmailsRequestBuilder(workflowId, workflowEmailId);
    }
    private okhttp3.Call listSummaryCall(Integer count, Integer offset, List<String> fields, List<String> excludeFields, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, OffsetDateTime beforeStartTime, OffsetDateTime sinceStartTime, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (beforeCreateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_create_time", beforeCreateTime));
        }

        if (sinceCreateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_create_time", sinceCreateTime));
        }

        if (beforeStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_start_time", beforeStartTime));
        }

        if (sinceStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_start_time", sinceStartTime));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSummaryValidateBeforeCall(Integer count, Integer offset, List<String> fields, List<String> excludeFields, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, OffsetDateTime beforeStartTime, OffsetDateTime sinceStartTime, String status, final ApiCallback _callback) throws ApiException {
        return listSummaryCall(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status, _callback);

    }


    private ApiResponse<AutomationsListSummaryResponse> listSummaryWithHttpInfo(Integer count, Integer offset, List<String> fields, List<String> excludeFields, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, OffsetDateTime beforeStartTime, OffsetDateTime sinceStartTime, String status) throws ApiException {
        okhttp3.Call localVarCall = listSummaryValidateBeforeCall(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status, null);
        Type localVarReturnType = new TypeToken<AutomationsListSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSummaryAsync(Integer count, Integer offset, List<String> fields, List<String> excludeFields, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, OffsetDateTime beforeStartTime, OffsetDateTime sinceStartTime, String status, final ApiCallback<AutomationsListSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSummaryValidateBeforeCall(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status, _callback);
        Type localVarReturnType = new TypeToken<AutomationsListSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSummaryRequestBuilder {
        private Integer count;
        private Integer offset;
        private List<String> fields;
        private List<String> excludeFields;
        private OffsetDateTime beforeCreateTime;
        private OffsetDateTime sinceCreateTime;
        private OffsetDateTime beforeStartTime;
        private OffsetDateTime sinceStartTime;
        private String status;

        private ListSummaryRequestBuilder() {
        }

        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set beforeCreateTime
         * @param beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder beforeCreateTime(OffsetDateTime beforeCreateTime) {
            this.beforeCreateTime = beforeCreateTime;
            return this;
        }
        
        /**
         * Set sinceCreateTime
         * @param sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder sinceCreateTime(OffsetDateTime sinceCreateTime) {
            this.sinceCreateTime = sinceCreateTime;
            return this;
        }
        
        /**
         * Set beforeStartTime
         * @param beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder beforeStartTime(OffsetDateTime beforeStartTime) {
            this.beforeStartTime = beforeStartTime;
            return this;
        }
        
        /**
         * Set sinceStartTime
         * @param sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder sinceStartTime(OffsetDateTime sinceStartTime) {
            this.sinceStartTime = sinceStartTime;
            return this;
        }
        
        /**
         * Set status
         * @param status Restrict the results to automations with the specified status. (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for listSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSummaryCall(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status, _callback);
        }


        /**
         * Execute listSummary request
         * @return AutomationsListSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsListSummaryResponse execute() throws ApiException {
            ApiResponse<AutomationsListSummaryResponse> localVarResp = listSummaryWithHttpInfo(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSummary request with HTTP info returned
         * @return ApiResponse&lt;AutomationsListSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsListSummaryResponse> executeWithHttpInfo() throws ApiException {
            return listSummaryWithHttpInfo(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status);
        }

        /**
         * Execute listSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsListSummaryResponse> _callback) throws ApiException {
            return listSummaryAsync(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status, _callback);
        }
    }

    /**
     * List automations
     * Get a summary of an account&#39;s classic automations.
     * @return ListSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListSummaryRequestBuilder listSummary() throws IllegalArgumentException {
        return new ListSummaryRequestBuilder();
    }
    private okhttp3.Call pauseAutomatedEmailCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseAutomatedEmailValidateBeforeCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling pauseAutomatedEmail(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling pauseAutomatedEmail(Async)");
        }

        return pauseAutomatedEmailCall(workflowId, workflowEmailId, _callback);

    }


    private ApiResponse<Void> pauseAutomatedEmailWithHttpInfo(String workflowId, String workflowEmailId) throws ApiException {
        okhttp3.Call localVarCall = pauseAutomatedEmailValidateBeforeCall(workflowId, workflowEmailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pauseAutomatedEmailAsync(String workflowId, String workflowEmailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseAutomatedEmailValidateBeforeCall(workflowId, workflowEmailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PauseAutomatedEmailRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;

        private PauseAutomatedEmailRequestBuilder(String workflowId, String workflowEmailId) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Build call for pauseAutomatedEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pauseAutomatedEmailCall(workflowId, workflowEmailId, _callback);
        }


        /**
         * Execute pauseAutomatedEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pauseAutomatedEmailWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute pauseAutomatedEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pauseAutomatedEmailWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute pauseAutomatedEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pauseAutomatedEmailAsync(workflowId, workflowEmailId, _callback);
        }
    }

    /**
     * Pause automated email
     * Pause an automated email.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return PauseAutomatedEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public PauseAutomatedEmailRequestBuilder pauseAutomatedEmail(String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new PauseAutomatedEmailRequestBuilder(workflowId, workflowEmailId);
    }
    private okhttp3.Call pauseWorkflowEmailsCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/actions/pause-all-emails"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseWorkflowEmailsValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling pauseWorkflowEmails(Async)");
        }

        return pauseWorkflowEmailsCall(workflowId, _callback);

    }


    private ApiResponse<Void> pauseWorkflowEmailsWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = pauseWorkflowEmailsValidateBeforeCall(workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pauseWorkflowEmailsAsync(String workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseWorkflowEmailsValidateBeforeCall(workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PauseWorkflowEmailsRequestBuilder {
        private final String workflowId;

        private PauseWorkflowEmailsRequestBuilder(String workflowId) {
            this.workflowId = workflowId;
        }

        /**
         * Build call for pauseWorkflowEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pauseWorkflowEmailsCall(workflowId, _callback);
        }


        /**
         * Execute pauseWorkflowEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pauseWorkflowEmailsWithHttpInfo(workflowId);
        }

        /**
         * Execute pauseWorkflowEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pauseWorkflowEmailsWithHttpInfo(workflowId);
        }

        /**
         * Execute pauseWorkflowEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pauseWorkflowEmailsAsync(workflowId, _callback);
        }
    }

    /**
     * Pause automation emails
     * Pause all emails in a specific classic automation workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return PauseWorkflowEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public PauseWorkflowEmailsRequestBuilder pauseWorkflowEmails(String workflowId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new PauseWorkflowEmailsRequestBuilder(workflowId);
    }
    private okhttp3.Call removeSubscriberFromWorkflowCall(String workflowId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationsAddSubscriberToWorkflowEmailRequest;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/removed-subscribers"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSubscriberFromWorkflowValidateBeforeCall(String workflowId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling removeSubscriberFromWorkflow(Async)");
        }

        // verify the required parameter 'automationsAddSubscriberToWorkflowEmailRequest' is set
        if (automationsAddSubscriberToWorkflowEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'automationsAddSubscriberToWorkflowEmailRequest' when calling removeSubscriberFromWorkflow(Async)");
        }

        return removeSubscriberFromWorkflowCall(workflowId, automationsAddSubscriberToWorkflowEmailRequest, _callback);

    }


    private ApiResponse<AutomationsRemoveSubscriberFromWorkflowResponse> removeSubscriberFromWorkflowWithHttpInfo(String workflowId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = removeSubscriberFromWorkflowValidateBeforeCall(workflowId, automationsAddSubscriberToWorkflowEmailRequest, null);
        Type localVarReturnType = new TypeToken<AutomationsRemoveSubscriberFromWorkflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSubscriberFromWorkflowAsync(String workflowId, AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest, final ApiCallback<AutomationsRemoveSubscriberFromWorkflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSubscriberFromWorkflowValidateBeforeCall(workflowId, automationsAddSubscriberToWorkflowEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<AutomationsRemoveSubscriberFromWorkflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSubscriberFromWorkflowRequestBuilder {
        private final String emailAddress;
        private final String workflowId;

        private RemoveSubscriberFromWorkflowRequestBuilder(String emailAddress, String workflowId) {
            this.emailAddress = emailAddress;
            this.workflowId = workflowId;
        }

        /**
         * Build call for removeSubscriberFromWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            return removeSubscriberFromWorkflowCall(workflowId, automationsAddSubscriberToWorkflowEmailRequest, _callback);
        }

        private AutomationsAddSubscriberToWorkflowEmailRequest buildBodyParams() {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = new AutomationsAddSubscriberToWorkflowEmailRequest();
            automationsAddSubscriberToWorkflowEmailRequest.emailAddress(this.emailAddress);
            return automationsAddSubscriberToWorkflowEmailRequest;
        }

        /**
         * Execute removeSubscriberFromWorkflow request
         * @return AutomationsRemoveSubscriberFromWorkflowResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsRemoveSubscriberFromWorkflowResponse execute() throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            ApiResponse<AutomationsRemoveSubscriberFromWorkflowResponse> localVarResp = removeSubscriberFromWorkflowWithHttpInfo(workflowId, automationsAddSubscriberToWorkflowEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSubscriberFromWorkflow request with HTTP info returned
         * @return ApiResponse&lt;AutomationsRemoveSubscriberFromWorkflowResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsRemoveSubscriberFromWorkflowResponse> executeWithHttpInfo() throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            return removeSubscriberFromWorkflowWithHttpInfo(workflowId, automationsAddSubscriberToWorkflowEmailRequest);
        }

        /**
         * Execute removeSubscriberFromWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsRemoveSubscriberFromWorkflowResponse> _callback) throws ApiException {
            AutomationsAddSubscriberToWorkflowEmailRequest automationsAddSubscriberToWorkflowEmailRequest = buildBodyParams();
            return removeSubscriberFromWorkflowAsync(workflowId, automationsAddSubscriberToWorkflowEmailRequest, _callback);
        }
    }

    /**
     * Remove subscriber from workflow
     * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they&#39;ve been sent from that workflow. Once they&#39;re removed, they can never be added back to the same workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param automationsAddSubscriberToWorkflowEmailRequest  (required)
     * @return RemoveSubscriberFromWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSubscriberFromWorkflowRequestBuilder removeSubscriberFromWorkflow(String emailAddress, String workflowId) throws IllegalArgumentException {
        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new RemoveSubscriberFromWorkflowRequestBuilder(emailAddress, workflowId);
    }
    private okhttp3.Call startAllEmailsCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/actions/start-all-emails"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startAllEmailsValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling startAllEmails(Async)");
        }

        return startAllEmailsCall(workflowId, _callback);

    }


    private ApiResponse<Void> startAllEmailsWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = startAllEmailsValidateBeforeCall(workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call startAllEmailsAsync(String workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startAllEmailsValidateBeforeCall(workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StartAllEmailsRequestBuilder {
        private final String workflowId;

        private StartAllEmailsRequestBuilder(String workflowId) {
            this.workflowId = workflowId;
        }

        /**
         * Build call for startAllEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startAllEmailsCall(workflowId, _callback);
        }


        /**
         * Execute startAllEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            startAllEmailsWithHttpInfo(workflowId);
        }

        /**
         * Execute startAllEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return startAllEmailsWithHttpInfo(workflowId);
        }

        /**
         * Execute startAllEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return startAllEmailsAsync(workflowId, _callback);
        }
    }

    /**
     * Start automation emails
     * Start all emails in a classic automation workflow.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return StartAllEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public StartAllEmailsRequestBuilder startAllEmails(String workflowId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        return new StartAllEmailsRequestBuilder(workflowId);
    }
    private okhttp3.Call startAutomatedEmailCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}/actions/start"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startAutomatedEmailValidateBeforeCall(String workflowId, String workflowEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling startAutomatedEmail(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling startAutomatedEmail(Async)");
        }

        return startAutomatedEmailCall(workflowId, workflowEmailId, _callback);

    }


    private ApiResponse<Void> startAutomatedEmailWithHttpInfo(String workflowId, String workflowEmailId) throws ApiException {
        okhttp3.Call localVarCall = startAutomatedEmailValidateBeforeCall(workflowId, workflowEmailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call startAutomatedEmailAsync(String workflowId, String workflowEmailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startAutomatedEmailValidateBeforeCall(workflowId, workflowEmailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StartAutomatedEmailRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;

        private StartAutomatedEmailRequestBuilder(String workflowId, String workflowEmailId) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Build call for startAutomatedEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startAutomatedEmailCall(workflowId, workflowEmailId, _callback);
        }


        /**
         * Execute startAutomatedEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            startAutomatedEmailWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute startAutomatedEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return startAutomatedEmailWithHttpInfo(workflowId, workflowEmailId);
        }

        /**
         * Execute startAutomatedEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return startAutomatedEmailAsync(workflowId, workflowEmailId, _callback);
        }
    }

    /**
     * Start automated email
     * Start an automated email.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return StartAutomatedEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public StartAutomatedEmailRequestBuilder startAutomatedEmail(String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new StartAutomatedEmailRequestBuilder(workflowId, workflowEmailId);
    }
    private okhttp3.Call updateWorkflowEmailCall(String workflowId, String workflowEmailId, AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationsUpdateWorkflowEmailRequest;

        // create path and map variables
        String localVarPath = "/automations/{workflow_id}/emails/{workflow_email_id}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_email_id" + "}", localVarApiClient.escapeString(workflowEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkflowEmailValidateBeforeCall(String workflowId, String workflowEmailId, AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling updateWorkflowEmail(Async)");
        }

        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new ApiException("Missing the required parameter 'workflowEmailId' when calling updateWorkflowEmail(Async)");
        }

        // verify the required parameter 'automationsUpdateWorkflowEmailRequest' is set
        if (automationsUpdateWorkflowEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'automationsUpdateWorkflowEmailRequest' when calling updateWorkflowEmail(Async)");
        }

        return updateWorkflowEmailCall(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest, _callback);

    }


    private ApiResponse<AutomationsUpdateWorkflowEmailResponse> updateWorkflowEmailWithHttpInfo(String workflowId, String workflowEmailId, AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkflowEmailValidateBeforeCall(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest, null);
        Type localVarReturnType = new TypeToken<AutomationsUpdateWorkflowEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkflowEmailAsync(String workflowId, String workflowEmailId, AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest, final ApiCallback<AutomationsUpdateWorkflowEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkflowEmailValidateBeforeCall(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<AutomationsUpdateWorkflowEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkflowEmailRequestBuilder {
        private final String workflowId;
        private final String workflowEmailId;
        private CampaignSettingsProperty settings;
        private AutomationDelayProperty delay;

        private UpdateWorkflowEmailRequestBuilder(String workflowId, String workflowEmailId) {
            this.workflowId = workflowId;
            this.workflowEmailId = workflowEmailId;
        }

        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateWorkflowEmailRequestBuilder
         */
        public UpdateWorkflowEmailRequestBuilder settings(CampaignSettingsProperty settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set delay
         * @param delay  (optional)
         * @return UpdateWorkflowEmailRequestBuilder
         */
        public UpdateWorkflowEmailRequestBuilder delay(AutomationDelayProperty delay) {
            this.delay = delay;
            return this;
        }
        
        /**
         * Build call for updateWorkflowEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest = buildBodyParams();
            return updateWorkflowEmailCall(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest, _callback);
        }

        private AutomationsUpdateWorkflowEmailRequest buildBodyParams() {
            AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest = new AutomationsUpdateWorkflowEmailRequest();
            automationsUpdateWorkflowEmailRequest.settings(this.settings);
            automationsUpdateWorkflowEmailRequest.delay(this.delay);
            return automationsUpdateWorkflowEmailRequest;
        }

        /**
         * Execute updateWorkflowEmail request
         * @return AutomationsUpdateWorkflowEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AutomationsUpdateWorkflowEmailResponse execute() throws ApiException {
            AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest = buildBodyParams();
            ApiResponse<AutomationsUpdateWorkflowEmailResponse> localVarResp = updateWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkflowEmail request with HTTP info returned
         * @return ApiResponse&lt;AutomationsUpdateWorkflowEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AutomationsUpdateWorkflowEmailResponse> executeWithHttpInfo() throws ApiException {
            AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest = buildBodyParams();
            return updateWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest);
        }

        /**
         * Execute updateWorkflowEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AutomationsUpdateWorkflowEmailResponse> _callback) throws ApiException {
            AutomationsUpdateWorkflowEmailRequest automationsUpdateWorkflowEmailRequest = buildBodyParams();
            return updateWorkflowEmailAsync(workflowId, workflowEmailId, automationsUpdateWorkflowEmailRequest, _callback);
        }
    }

    /**
     * Update workflow email
     * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param automationsUpdateWorkflowEmailRequest  (required)
     * @return UpdateWorkflowEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkflowEmailRequestBuilder updateWorkflowEmail(String workflowId, String workflowEmailId) throws IllegalArgumentException {
        if (workflowId == null) throw new IllegalArgumentException("\"workflowId\" is required but got null");
            

        if (workflowEmailId == null) throw new IllegalArgumentException("\"workflowEmailId\" is required but got null");
            

        return new UpdateWorkflowEmailRequestBuilder(workflowId, workflowEmailId);
    }
}
