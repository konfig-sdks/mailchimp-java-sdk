/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BatchWebhooksAddWebhook200Response;
import com.konfigthis.client.model.BatchWebhooksAddWebhookRequest;
import com.konfigthis.client.model.BatchWebhooksAddWebhookResponse;
import com.konfigthis.client.model.BatchWebhooksAddWebhookdefaultResponse;
import com.konfigthis.client.model.BatchWebhooksGetInfo200Response;
import com.konfigthis.client.model.BatchWebhooksGetInfoResponse;
import com.konfigthis.client.model.BatchWebhooksGetInfodefaultResponse;
import com.konfigthis.client.model.BatchWebhooksListWebhooks200Response;
import com.konfigthis.client.model.BatchWebhooksListWebhooksResponse;
import com.konfigthis.client.model.BatchWebhooksListWebhooksdefaultResponse;
import com.konfigthis.client.model.BatchWebhooksRemoveWebhookResponse;
import com.konfigthis.client.model.BatchWebhooksRemoveWebhookdefaultResponse;
import com.konfigthis.client.model.BatchWebhooksUpdateWebhook200Response;
import com.konfigthis.client.model.BatchWebhooksUpdateWebhookRequest;
import com.konfigthis.client.model.BatchWebhooksUpdateWebhookResponse;
import com.konfigthis.client.model.BatchWebhooksUpdateWebhookdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BatchWebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchWebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BatchWebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addWebhookCall(BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchWebhooksAddWebhookRequest;

        // create path and map variables
        String localVarPath = "/batch-webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addWebhookValidateBeforeCall(BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchWebhooksAddWebhookRequest' is set
        if (batchWebhooksAddWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'batchWebhooksAddWebhookRequest' when calling addWebhook(Async)");
        }

        return addWebhookCall(batchWebhooksAddWebhookRequest, _callback);

    }


    private ApiResponse<BatchWebhooksAddWebhookResponse> addWebhookWithHttpInfo(BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = addWebhookValidateBeforeCall(batchWebhooksAddWebhookRequest, null);
        Type localVarReturnType = new TypeToken<BatchWebhooksAddWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addWebhookAsync(BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest, final ApiCallback<BatchWebhooksAddWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addWebhookValidateBeforeCall(batchWebhooksAddWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchWebhooksAddWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddWebhookRequestBuilder {
        private final String url;
        private Boolean enabled;

        private AddWebhookRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Set enabled
         * @param enabled Whether the webhook receives requests or not. (optional)
         * @return AddWebhookRequestBuilder
         */
        public AddWebhookRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Build call for addWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest = buildBodyParams();
            return addWebhookCall(batchWebhooksAddWebhookRequest, _callback);
        }

        private BatchWebhooksAddWebhookRequest buildBodyParams() {
            BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest = new BatchWebhooksAddWebhookRequest();
            batchWebhooksAddWebhookRequest.url(this.url);
            batchWebhooksAddWebhookRequest.enabled(this.enabled);
            return batchWebhooksAddWebhookRequest;
        }

        /**
         * Execute addWebhook request
         * @return BatchWebhooksAddWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchWebhooksAddWebhookResponse execute() throws ApiException {
            BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest = buildBodyParams();
            ApiResponse<BatchWebhooksAddWebhookResponse> localVarResp = addWebhookWithHttpInfo(batchWebhooksAddWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addWebhook request with HTTP info returned
         * @return ApiResponse&lt;BatchWebhooksAddWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchWebhooksAddWebhookResponse> executeWithHttpInfo() throws ApiException {
            BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest = buildBodyParams();
            return addWebhookWithHttpInfo(batchWebhooksAddWebhookRequest);
        }

        /**
         * Execute addWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchWebhooksAddWebhookResponse> _callback) throws ApiException {
            BatchWebhooksAddWebhookRequest batchWebhooksAddWebhookRequest = buildBodyParams();
            return addWebhookAsync(batchWebhooksAddWebhookRequest, _callback);
        }
    }

    /**
     * Add batch webhook
     * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.
     * @param batchWebhooksAddWebhookRequest  (required)
     * @return AddWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddWebhookRequestBuilder addWebhook(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new AddWebhookRequestBuilder(url);
    }
    private okhttp3.Call getInfoCall(String batchWebhookId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batch-webhooks/{batch_webhook_id}"
            .replace("{" + "batch_webhook_id" + "}", localVarApiClient.escapeString(batchWebhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String batchWebhookId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchWebhookId' is set
        if (batchWebhookId == null) {
            throw new ApiException("Missing the required parameter 'batchWebhookId' when calling getInfo(Async)");
        }

        return getInfoCall(batchWebhookId, fields, excludeFields, _callback);

    }


    private ApiResponse<BatchWebhooksGetInfoResponse> getInfoWithHttpInfo(String batchWebhookId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(batchWebhookId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<BatchWebhooksGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String batchWebhookId, List<String> fields, List<String> excludeFields, final ApiCallback<BatchWebhooksGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(batchWebhookId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<BatchWebhooksGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String batchWebhookId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetInfoRequestBuilder(String batchWebhookId) {
            this.batchWebhookId = batchWebhookId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(batchWebhookId, fields, excludeFields, _callback);
        }


        /**
         * Execute getInfo request
         * @return BatchWebhooksGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchWebhooksGetInfoResponse execute() throws ApiException {
            ApiResponse<BatchWebhooksGetInfoResponse> localVarResp = getInfoWithHttpInfo(batchWebhookId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;BatchWebhooksGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchWebhooksGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(batchWebhookId, fields, excludeFields);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchWebhooksGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(batchWebhookId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get batch webhook info
     * Get information about a specific batch webhook.
     * @param batchWebhookId The unique id for the batch webhook. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String batchWebhookId) throws IllegalArgumentException {
        if (batchWebhookId == null) throw new IllegalArgumentException("\"batchWebhookId\" is required but got null");
            

        return new GetInfoRequestBuilder(batchWebhookId);
    }
    private okhttp3.Call listWebhooksCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batch-webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhooksValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listWebhooksCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<BatchWebhooksListWebhooksResponse> listWebhooksWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<BatchWebhooksListWebhooksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWebhooksAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<BatchWebhooksListWebhooksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<BatchWebhooksListWebhooksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWebhooksRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListWebhooksRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListWebhooksRequestBuilder
         */
        public ListWebhooksRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListWebhooksRequestBuilder
         */
        public ListWebhooksRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListWebhooksRequestBuilder
         */
        public ListWebhooksRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListWebhooksRequestBuilder
         */
        public ListWebhooksRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWebhooksCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listWebhooks request
         * @return BatchWebhooksListWebhooksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchWebhooksListWebhooksResponse execute() throws ApiException {
            ApiResponse<BatchWebhooksListWebhooksResponse> localVarResp = listWebhooksWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWebhooks request with HTTP info returned
         * @return ApiResponse&lt;BatchWebhooksListWebhooksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchWebhooksListWebhooksResponse> executeWithHttpInfo() throws ApiException {
            return listWebhooksWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchWebhooksListWebhooksResponse> _callback) throws ApiException {
            return listWebhooksAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List batch webhooks
     * Get all webhooks that have been configured for batches.
     * @return ListWebhooksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListWebhooksRequestBuilder listWebhooks() throws IllegalArgumentException {
        return new ListWebhooksRequestBuilder();
    }
    private okhttp3.Call removeWebhookCall(String batchWebhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batch-webhooks/{batch_webhook_id}"
            .replace("{" + "batch_webhook_id" + "}", localVarApiClient.escapeString(batchWebhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebhookValidateBeforeCall(String batchWebhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchWebhookId' is set
        if (batchWebhookId == null) {
            throw new ApiException("Missing the required parameter 'batchWebhookId' when calling removeWebhook(Async)");
        }

        return removeWebhookCall(batchWebhookId, _callback);

    }


    private ApiResponse<Void> removeWebhookWithHttpInfo(String batchWebhookId) throws ApiException {
        okhttp3.Call localVarCall = removeWebhookValidateBeforeCall(batchWebhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeWebhookAsync(String batchWebhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebhookValidateBeforeCall(batchWebhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveWebhookRequestBuilder {
        private final String batchWebhookId;

        private RemoveWebhookRequestBuilder(String batchWebhookId) {
            this.batchWebhookId = batchWebhookId;
        }

        /**
         * Build call for removeWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWebhookCall(batchWebhookId, _callback);
        }


        /**
         * Execute removeWebhook request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWebhookWithHttpInfo(batchWebhookId);
        }

        /**
         * Execute removeWebhook request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWebhookWithHttpInfo(batchWebhookId);
        }

        /**
         * Execute removeWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeWebhookAsync(batchWebhookId, _callback);
        }
    }

    /**
     * Delete batch webhook
     * Remove a batch webhook. Webhooks will no longer be sent to the given URL.
     * @param batchWebhookId The unique id for the batch webhook. (required)
     * @return RemoveWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWebhookRequestBuilder removeWebhook(String batchWebhookId) throws IllegalArgumentException {
        if (batchWebhookId == null) throw new IllegalArgumentException("\"batchWebhookId\" is required but got null");
            

        return new RemoveWebhookRequestBuilder(batchWebhookId);
    }
    private okhttp3.Call updateWebhookCall(String batchWebhookId, BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchWebhooksUpdateWebhookRequest;

        // create path and map variables
        String localVarPath = "/batch-webhooks/{batch_webhook_id}"
            .replace("{" + "batch_webhook_id" + "}", localVarApiClient.escapeString(batchWebhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(String batchWebhookId, BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchWebhookId' is set
        if (batchWebhookId == null) {
            throw new ApiException("Missing the required parameter 'batchWebhookId' when calling updateWebhook(Async)");
        }

        // verify the required parameter 'batchWebhooksUpdateWebhookRequest' is set
        if (batchWebhooksUpdateWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'batchWebhooksUpdateWebhookRequest' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(batchWebhookId, batchWebhooksUpdateWebhookRequest, _callback);

    }


    private ApiResponse<BatchWebhooksUpdateWebhookResponse> updateWebhookWithHttpInfo(String batchWebhookId, BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(batchWebhookId, batchWebhooksUpdateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<BatchWebhooksUpdateWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookAsync(String batchWebhookId, BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest, final ApiCallback<BatchWebhooksUpdateWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(batchWebhookId, batchWebhooksUpdateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchWebhooksUpdateWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebhookRequestBuilder {
        private final String batchWebhookId;
        private String url;
        private Boolean enabled;

        private UpdateWebhookRequestBuilder(String batchWebhookId) {
            this.batchWebhookId = batchWebhookId;
        }

        /**
         * Set url
         * @param url A valid URL for the Webhook. (optional)
         * @return UpdateWebhookRequestBuilder
         */
        public UpdateWebhookRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Whether the webhook receives requests or not. (optional)
         * @return UpdateWebhookRequestBuilder
         */
        public UpdateWebhookRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Build call for updateWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest = buildBodyParams();
            return updateWebhookCall(batchWebhookId, batchWebhooksUpdateWebhookRequest, _callback);
        }

        private BatchWebhooksUpdateWebhookRequest buildBodyParams() {
            BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest = new BatchWebhooksUpdateWebhookRequest();
            batchWebhooksUpdateWebhookRequest.url(this.url);
            batchWebhooksUpdateWebhookRequest.enabled(this.enabled);
            return batchWebhooksUpdateWebhookRequest;
        }

        /**
         * Execute updateWebhook request
         * @return BatchWebhooksUpdateWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public BatchWebhooksUpdateWebhookResponse execute() throws ApiException {
            BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest = buildBodyParams();
            ApiResponse<BatchWebhooksUpdateWebhookResponse> localVarResp = updateWebhookWithHttpInfo(batchWebhookId, batchWebhooksUpdateWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebhook request with HTTP info returned
         * @return ApiResponse&lt;BatchWebhooksUpdateWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchWebhooksUpdateWebhookResponse> executeWithHttpInfo() throws ApiException {
            BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest = buildBodyParams();
            return updateWebhookWithHttpInfo(batchWebhookId, batchWebhooksUpdateWebhookRequest);
        }

        /**
         * Execute updateWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchWebhooksUpdateWebhookResponse> _callback) throws ApiException {
            BatchWebhooksUpdateWebhookRequest batchWebhooksUpdateWebhookRequest = buildBodyParams();
            return updateWebhookAsync(batchWebhookId, batchWebhooksUpdateWebhookRequest, _callback);
        }
    }

    /**
     * Update batch webhook
     * Update a webhook that will fire whenever any batch request completes processing.
     * @param batchWebhookId The unique id for the batch webhook. (required)
     * @param batchWebhooksUpdateWebhookRequest  (required)
     * @return UpdateWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebhookRequestBuilder updateWebhook(String batchWebhookId) throws IllegalArgumentException {
        if (batchWebhookId == null) throw new IllegalArgumentException("\"batchWebhookId\" is required but got null");
            

        return new UpdateWebhookRequestBuilder(batchWebhookId);
    }
}
