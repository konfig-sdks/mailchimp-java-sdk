/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddListMembers;
import com.konfigthis.client.model.CampaignDefaultsProperty;
import com.konfigthis.client.model.CollectionOfContentForListSignupForms;
import com.konfigthis.client.model.CollectionOfElementStyleForListSignupForms;
import com.konfigthis.client.model.ConditionsProperty;
import com.konfigthis.client.model.ConditionsProperty1;
import com.konfigthis.client.model.EventsProperty;
import com.konfigthis.client.model.ListContactProperty;
import com.konfigthis.client.model.ListContactProperty1;
import com.konfigthis.client.model.ListsAddInterestCategory200Response;
import com.konfigthis.client.model.ListsAddInterestCategoryRequest;
import com.konfigthis.client.model.ListsAddInterestCategoryResponse;
import com.konfigthis.client.model.ListsAddInterestCategorydefaultResponse;
import com.konfigthis.client.model.ListsAddInterestInCategory200Response;
import com.konfigthis.client.model.ListsAddInterestInCategoryRequest;
import com.konfigthis.client.model.ListsAddInterestInCategoryResponse;
import com.konfigthis.client.model.ListsAddInterestInCategorydefaultResponse;
import com.konfigthis.client.model.ListsAddMemberEventRequest;
import com.konfigthis.client.model.ListsAddMemberEventResponse;
import com.konfigthis.client.model.ListsAddMemberEventdefaultResponse;
import com.konfigthis.client.model.ListsAddMemberNote200Response;
import com.konfigthis.client.model.ListsAddMemberNoteRequest;
import com.konfigthis.client.model.ListsAddMemberNoteResponse;
import com.konfigthis.client.model.ListsAddMemberNotedefaultResponse;
import com.konfigthis.client.model.ListsAddMemberTagsRequest;
import com.konfigthis.client.model.ListsAddMemberTagsResponse;
import com.konfigthis.client.model.ListsAddMemberTagsdefaultResponse;
import com.konfigthis.client.model.ListsAddMemberToList200Response;
import com.konfigthis.client.model.ListsAddMemberToListRequest;
import com.konfigthis.client.model.ListsAddMemberToListResponse;
import com.konfigthis.client.model.ListsAddMemberToListdefaultResponse;
import com.konfigthis.client.model.ListsAddMemberToSegment200Response;
import com.konfigthis.client.model.ListsAddMemberToSegmentRequest;
import com.konfigthis.client.model.ListsAddMemberToSegmentResponse;
import com.konfigthis.client.model.ListsAddMemberToSegmentdefaultResponse;
import com.konfigthis.client.model.ListsAddMergeField200Response;
import com.konfigthis.client.model.ListsAddMergeFieldRequest;
import com.konfigthis.client.model.ListsAddMergeFieldResponse;
import com.konfigthis.client.model.ListsAddMergeFielddefaultResponse;
import com.konfigthis.client.model.ListsAddNewSegment200Response;
import com.konfigthis.client.model.ListsAddNewSegmentRequest;
import com.konfigthis.client.model.ListsAddNewSegmentResponse;
import com.konfigthis.client.model.ListsAddNewSegmentdefaultResponse;
import com.konfigthis.client.model.ListsAddOrUpdateMember200Response;
import com.konfigthis.client.model.ListsAddOrUpdateMemberRequest;
import com.konfigthis.client.model.ListsAddOrUpdateMemberResponse;
import com.konfigthis.client.model.ListsAddOrUpdateMemberdefaultResponse;
import com.konfigthis.client.model.ListsArchiveMemberResponse;
import com.konfigthis.client.model.ListsArchiveMemberdefaultResponse;
import com.konfigthis.client.model.ListsBatchAddRemoveMembers200Response;
import com.konfigthis.client.model.ListsBatchAddRemoveMembersRequest;
import com.konfigthis.client.model.ListsBatchAddRemoveMembersResponse;
import com.konfigthis.client.model.ListsBatchAddRemoveMembersdefaultResponse;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribe200Response;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribeRequest;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribeResponse;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribedefaultResponse;
import com.konfigthis.client.model.ListsCreateNewList200Response;
import com.konfigthis.client.model.ListsCreateNewListRequest;
import com.konfigthis.client.model.ListsCreateNewListResponse;
import com.konfigthis.client.model.ListsCreateNewListdefaultResponse;
import com.konfigthis.client.model.ListsCreateWebhook200Response;
import com.konfigthis.client.model.ListsCreateWebhookRequest;
import com.konfigthis.client.model.ListsCreateWebhookResponse;
import com.konfigthis.client.model.ListsCreateWebhookdefaultResponse;
import com.konfigthis.client.model.ListsCustomizeSignupForm200Response;
import com.konfigthis.client.model.ListsCustomizeSignupFormRequest;
import com.konfigthis.client.model.ListsCustomizeSignupFormResponse;
import com.konfigthis.client.model.ListsCustomizeSignupFormdefaultResponse;
import com.konfigthis.client.model.ListsDeleteInterestCategoryResponse;
import com.konfigthis.client.model.ListsDeleteInterestCategorydefaultResponse;
import com.konfigthis.client.model.ListsDeleteInterestInCategoryResponse;
import com.konfigthis.client.model.ListsDeleteInterestInCategorydefaultResponse;
import com.konfigthis.client.model.ListsDeleteListResponse;
import com.konfigthis.client.model.ListsDeleteListdefaultResponse;
import com.konfigthis.client.model.ListsDeleteMergeFieldResponse;
import com.konfigthis.client.model.ListsDeleteMergeFielddefaultResponse;
import com.konfigthis.client.model.ListsDeleteNoteResponse;
import com.konfigthis.client.model.ListsDeleteNotedefaultResponse;
import com.konfigthis.client.model.ListsDeleteSegmentResponse;
import com.konfigthis.client.model.ListsDeleteSegmentdefaultResponse;
import com.konfigthis.client.model.ListsDeleteWebhookResponse;
import com.konfigthis.client.model.ListsDeleteWebhookdefaultResponse;
import com.konfigthis.client.model.ListsGetAbuseReport200Response;
import com.konfigthis.client.model.ListsGetAbuseReportResponse;
import com.konfigthis.client.model.ListsGetAbuseReportdefaultResponse;
import com.konfigthis.client.model.ListsGetAllAbuseReports200Response;
import com.konfigthis.client.model.ListsGetAllAbuseReportsResponse;
import com.konfigthis.client.model.ListsGetAllAbuseReportsdefaultResponse;
import com.konfigthis.client.model.ListsGetAllInfo200Response;
import com.konfigthis.client.model.ListsGetAllInfoResponse;
import com.konfigthis.client.model.ListsGetAllInfodefaultResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryByMonth200Response;
import com.konfigthis.client.model.ListsGetGrowthHistoryByMonthResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryByMonthdefaultResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryData200Response;
import com.konfigthis.client.model.ListsGetGrowthHistoryDataResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryDatadefaultResponse;
import com.konfigthis.client.model.ListsGetInterestCategoryInfo200Response;
import com.konfigthis.client.model.ListsGetInterestCategoryInfoResponse;
import com.konfigthis.client.model.ListsGetInterestCategoryInfodefaultResponse;
import com.konfigthis.client.model.ListsGetInterestInCategory200Response;
import com.konfigthis.client.model.ListsGetInterestInCategoryResponse;
import com.konfigthis.client.model.ListsGetInterestInCategorydefaultResponse;
import com.konfigthis.client.model.ListsGetListInfo200Response;
import com.konfigthis.client.model.ListsGetListInfoResponse;
import com.konfigthis.client.model.ListsGetListInfodefaultResponse;
import com.konfigthis.client.model.ListsGetLocations200Response;
import com.konfigthis.client.model.ListsGetLocationsResponse;
import com.konfigthis.client.model.ListsGetLocationsdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberEvents200Response;
import com.konfigthis.client.model.ListsGetMemberEventsResponse;
import com.konfigthis.client.model.ListsGetMemberEventsdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberGoals200Response;
import com.konfigthis.client.model.ListsGetMemberGoalsResponse;
import com.konfigthis.client.model.ListsGetMemberGoalsdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberInfo200Response;
import com.konfigthis.client.model.ListsGetMemberInfoResponse;
import com.konfigthis.client.model.ListsGetMemberInfodefaultResponse;
import com.konfigthis.client.model.ListsGetMemberNote200Response;
import com.konfigthis.client.model.ListsGetMemberNoteResponse;
import com.konfigthis.client.model.ListsGetMemberNotedefaultResponse;
import com.konfigthis.client.model.ListsGetMemberNotes200Response;
import com.konfigthis.client.model.ListsGetMemberNotesResponse;
import com.konfigthis.client.model.ListsGetMemberNotesdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberTags200Response;
import com.konfigthis.client.model.ListsGetMemberTagsResponse;
import com.konfigthis.client.model.ListsGetMemberTagsdefaultResponse;
import com.konfigthis.client.model.ListsGetMembersInfo200Response;
import com.konfigthis.client.model.ListsGetMembersInfoResponse;
import com.konfigthis.client.model.ListsGetMembersInfodefaultResponse;
import com.konfigthis.client.model.ListsGetMergeFieldInfo200Response;
import com.konfigthis.client.model.ListsGetMergeFieldInfoResponse;
import com.konfigthis.client.model.ListsGetMergeFieldInfodefaultResponse;
import com.konfigthis.client.model.ListsGetRecentActivityStats200Response;
import com.konfigthis.client.model.ListsGetRecentActivityStatsResponse;
import com.konfigthis.client.model.ListsGetRecentActivityStatsdefaultResponse;
import com.konfigthis.client.model.ListsGetSegmentInfo200Response;
import com.konfigthis.client.model.ListsGetSegmentInfoResponse;
import com.konfigthis.client.model.ListsGetSegmentInfodefaultResponse;
import com.konfigthis.client.model.ListsGetSegmentMembers200Response;
import com.konfigthis.client.model.ListsGetSegmentMembersResponse;
import com.konfigthis.client.model.ListsGetSegmentMembersdefaultResponse;
import com.konfigthis.client.model.ListsGetSegmentsInfo200Response;
import com.konfigthis.client.model.ListsGetSegmentsInfoResponse;
import com.konfigthis.client.model.ListsGetSegmentsInfodefaultResponse;
import com.konfigthis.client.model.ListsGetSignupForms200Response;
import com.konfigthis.client.model.ListsGetSignupFormsResponse;
import com.konfigthis.client.model.ListsGetSignupFormsdefaultResponse;
import com.konfigthis.client.model.ListsGetSurveyDetailsResponse;
import com.konfigthis.client.model.ListsGetSurveyDetailsdefaultResponse;
import com.konfigthis.client.model.ListsGetSurveysInfoResponse;
import com.konfigthis.client.model.ListsGetSurveysInfodefaultResponse;
import com.konfigthis.client.model.ListsGetWebhookInfo200Response;
import com.konfigthis.client.model.ListsGetWebhookInfoResponse;
import com.konfigthis.client.model.ListsGetWebhookInfodefaultResponse;
import com.konfigthis.client.model.ListsGetWebhooksInfo200Response;
import com.konfigthis.client.model.ListsGetWebhooksInfoResponse;
import com.konfigthis.client.model.ListsGetWebhooksInfodefaultResponse;
import com.konfigthis.client.model.ListsListCategoryInterests200Response;
import com.konfigthis.client.model.ListsListCategoryInterestsResponse;
import com.konfigthis.client.model.ListsListCategoryInterestsdefaultResponse;
import com.konfigthis.client.model.ListsListInterestCategories200Response;
import com.konfigthis.client.model.ListsListInterestCategoriesResponse;
import com.konfigthis.client.model.ListsListInterestCategoriesdefaultResponse;
import com.konfigthis.client.model.ListsListMergeFields200Response;
import com.konfigthis.client.model.ListsListMergeFieldsResponse;
import com.konfigthis.client.model.ListsListMergeFieldsdefaultResponse;
import com.konfigthis.client.model.ListsListTopEmailClients200Response;
import com.konfigthis.client.model.ListsListTopEmailClientsResponse;
import com.konfigthis.client.model.ListsListTopEmailClientsdefaultResponse;
import com.konfigthis.client.model.ListsRemoveMemberFromSegmentResponse;
import com.konfigthis.client.model.ListsRemoveMemberFromSegmentdefaultResponse;
import com.konfigthis.client.model.ListsRemoveMemberPermanentResponse;
import com.konfigthis.client.model.ListsRemoveMemberPermanentdefaultResponse;
import com.konfigthis.client.model.ListsSearchTagsByName200Response;
import com.konfigthis.client.model.ListsSearchTagsByNameResponse;
import com.konfigthis.client.model.ListsSearchTagsByNamedefaultResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategory200Response;
import com.konfigthis.client.model.ListsUpdateInterestCategoryInterest200Response;
import com.konfigthis.client.model.ListsUpdateInterestCategoryInterestResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategoryInterestdefaultResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategoryResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategorydefaultResponse;
import com.konfigthis.client.model.ListsUpdateMember200Response;
import com.konfigthis.client.model.ListsUpdateMemberRequest;
import com.konfigthis.client.model.ListsUpdateMemberResponse;
import com.konfigthis.client.model.ListsUpdateMemberdefaultResponse;
import com.konfigthis.client.model.ListsUpdateMergeField200Response;
import com.konfigthis.client.model.ListsUpdateMergeFieldRequest;
import com.konfigthis.client.model.ListsUpdateMergeFieldResponse;
import com.konfigthis.client.model.ListsUpdateMergeFielddefaultResponse;
import com.konfigthis.client.model.ListsUpdateNoteSpecificListMember200Response;
import com.konfigthis.client.model.ListsUpdateNoteSpecificListMemberResponse;
import com.konfigthis.client.model.ListsUpdateNoteSpecificListMemberdefaultResponse;
import com.konfigthis.client.model.ListsUpdateSegmentById200Response;
import com.konfigthis.client.model.ListsUpdateSegmentByIdRequest;
import com.konfigthis.client.model.ListsUpdateSegmentByIdResponse;
import com.konfigthis.client.model.ListsUpdateSegmentByIddefaultResponse;
import com.konfigthis.client.model.ListsUpdateSettings200Response;
import com.konfigthis.client.model.ListsUpdateSettingsRequest;
import com.konfigthis.client.model.ListsUpdateSettingsResponse;
import com.konfigthis.client.model.ListsUpdateSettingsdefaultResponse;
import com.konfigthis.client.model.ListsUpdateWebhookSettings200Response;
import com.konfigthis.client.model.ListsUpdateWebhookSettingsResponse;
import com.konfigthis.client.model.ListsUpdateWebhookSettingsdefaultResponse;
import com.konfigthis.client.model.ListsViewRecentActivity200Response;
import com.konfigthis.client.model.ListsViewRecentActivityEvents200Response;
import com.konfigthis.client.model.ListsViewRecentActivityEventsResponse;
import com.konfigthis.client.model.ListsViewRecentActivityEventsdefaultResponse;
import com.konfigthis.client.model.ListsViewRecentActivityResponse;
import com.konfigthis.client.model.ListsViewRecentActivitydefaultResponse;
import com.konfigthis.client.model.LocationProperty;
import com.konfigthis.client.model.MarketingPermission;
import com.konfigthis.client.model.MemberTag;
import com.konfigthis.client.model.MergeFieldOptionsProperty;
import com.konfigthis.client.model.MergeFieldOptionsProperty1;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SignupFormHeaderOptionsProperty;
import com.konfigthis.client.model.SourcesProperty;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ListsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ListsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addInterestCategoryCall(String listId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddInterestCategoryRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInterestCategoryValidateBeforeCall(String listId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addInterestCategory(Async)");
        }

        // verify the required parameter 'listsAddInterestCategoryRequest' is set
        if (listsAddInterestCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddInterestCategoryRequest' when calling addInterestCategory(Async)");
        }

        return addInterestCategoryCall(listId, listsAddInterestCategoryRequest, _callback);

    }


    private ApiResponse<ListsAddInterestCategoryResponse> addInterestCategoryWithHttpInfo(String listId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addInterestCategoryValidateBeforeCall(listId, listsAddInterestCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ListsAddInterestCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addInterestCategoryAsync(String listId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest, final ApiCallback<ListsAddInterestCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInterestCategoryValidateBeforeCall(listId, listsAddInterestCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsAddInterestCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddInterestCategoryRequestBuilder {
        private final String title;
        private final String type;
        private final String listId;
        private Integer displayOrder;

        private AddInterestCategoryRequestBuilder(String title, String type, String listId) {
            this.title = title;
            this.type = type;
            this.listId = listId;
        }

        /**
         * Set displayOrder
         * @param displayOrder The order that the categories are displayed in the list. Lower numbers display first. (optional)
         * @return AddInterestCategoryRequestBuilder
         */
        public AddInterestCategoryRequestBuilder displayOrder(Integer displayOrder) {
            this.displayOrder = displayOrder;
            return this;
        }
        
        /**
         * Build call for addInterestCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            return addInterestCategoryCall(listId, listsAddInterestCategoryRequest, _callback);
        }

        private ListsAddInterestCategoryRequest buildBodyParams() {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = new ListsAddInterestCategoryRequest();
            listsAddInterestCategoryRequest.title(this.title);
            listsAddInterestCategoryRequest.displayOrder(this.displayOrder);
            if (this.type != null)
            listsAddInterestCategoryRequest.type(ListsAddInterestCategoryRequest.TypeEnum.fromValue(this.type));
            return listsAddInterestCategoryRequest;
        }

        /**
         * Execute addInterestCategory request
         * @return ListsAddInterestCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddInterestCategoryResponse execute() throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            ApiResponse<ListsAddInterestCategoryResponse> localVarResp = addInterestCategoryWithHttpInfo(listId, listsAddInterestCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addInterestCategory request with HTTP info returned
         * @return ApiResponse&lt;ListsAddInterestCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddInterestCategoryResponse> executeWithHttpInfo() throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            return addInterestCategoryWithHttpInfo(listId, listsAddInterestCategoryRequest);
        }

        /**
         * Execute addInterestCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddInterestCategoryResponse> _callback) throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            return addInterestCategoryAsync(listId, listsAddInterestCategoryRequest, _callback);
        }
    }

    /**
     * Add interest category
     * Create a new interest category.
     * @param listId The unique ID for the list. (required)
     * @param listsAddInterestCategoryRequest  (required)
     * @return AddInterestCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddInterestCategoryRequestBuilder addInterestCategory(String title, String type, String listId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new AddInterestCategoryRequestBuilder(title, type, listId);
    }
    private okhttp3.Call addInterestInCategoryCall(String listId, String interestCategoryId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddInterestInCategoryRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}/interests"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInterestInCategoryValidateBeforeCall(String listId, String interestCategoryId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addInterestInCategory(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling addInterestInCategory(Async)");
        }

        // verify the required parameter 'listsAddInterestInCategoryRequest' is set
        if (listsAddInterestInCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddInterestInCategoryRequest' when calling addInterestInCategory(Async)");
        }

        return addInterestInCategoryCall(listId, interestCategoryId, listsAddInterestInCategoryRequest, _callback);

    }


    private ApiResponse<ListsAddInterestInCategoryResponse> addInterestInCategoryWithHttpInfo(String listId, String interestCategoryId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addInterestInCategoryValidateBeforeCall(listId, interestCategoryId, listsAddInterestInCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ListsAddInterestInCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addInterestInCategoryAsync(String listId, String interestCategoryId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest, final ApiCallback<ListsAddInterestInCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInterestInCategoryValidateBeforeCall(listId, interestCategoryId, listsAddInterestInCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsAddInterestInCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddInterestInCategoryRequestBuilder {
        private final String name;
        private final String listId;
        private final String interestCategoryId;
        private Integer displayOrder;

        private AddInterestInCategoryRequestBuilder(String name, String listId, String interestCategoryId) {
            this.name = name;
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
        }

        /**
         * Set displayOrder
         * @param displayOrder The display order for interests. (optional)
         * @return AddInterestInCategoryRequestBuilder
         */
        public AddInterestInCategoryRequestBuilder displayOrder(Integer displayOrder) {
            this.displayOrder = displayOrder;
            return this;
        }
        
        /**
         * Build call for addInterestInCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            return addInterestInCategoryCall(listId, interestCategoryId, listsAddInterestInCategoryRequest, _callback);
        }

        private ListsAddInterestInCategoryRequest buildBodyParams() {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = new ListsAddInterestInCategoryRequest();
            listsAddInterestInCategoryRequest.name(this.name);
            listsAddInterestInCategoryRequest.displayOrder(this.displayOrder);
            return listsAddInterestInCategoryRequest;
        }

        /**
         * Execute addInterestInCategory request
         * @return ListsAddInterestInCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddInterestInCategoryResponse execute() throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            ApiResponse<ListsAddInterestInCategoryResponse> localVarResp = addInterestInCategoryWithHttpInfo(listId, interestCategoryId, listsAddInterestInCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addInterestInCategory request with HTTP info returned
         * @return ApiResponse&lt;ListsAddInterestInCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddInterestInCategoryResponse> executeWithHttpInfo() throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            return addInterestInCategoryWithHttpInfo(listId, interestCategoryId, listsAddInterestInCategoryRequest);
        }

        /**
         * Execute addInterestInCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddInterestInCategoryResponse> _callback) throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            return addInterestInCategoryAsync(listId, interestCategoryId, listsAddInterestInCategoryRequest, _callback);
        }
    }

    /**
     * Add interest in category
     * Create a new interest or &#39;group name&#39; for a specific category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @param listsAddInterestInCategoryRequest  (required)
     * @return AddInterestInCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddInterestInCategoryRequestBuilder addInterestInCategory(String name, String listId, String interestCategoryId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        return new AddInterestInCategoryRequestBuilder(name, listId, interestCategoryId);
    }
    private okhttp3.Call addMemberEventCall(String listId, String subscriberHash, ListsAddMemberEventRequest listsAddMemberEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMemberEventRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/events"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberEventValidateBeforeCall(String listId, String subscriberHash, ListsAddMemberEventRequest listsAddMemberEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addMemberEvent(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling addMemberEvent(Async)");
        }

        // verify the required parameter 'listsAddMemberEventRequest' is set
        if (listsAddMemberEventRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMemberEventRequest' when calling addMemberEvent(Async)");
        }

        return addMemberEventCall(listId, subscriberHash, listsAddMemberEventRequest, _callback);

    }


    private ApiResponse<Void> addMemberEventWithHttpInfo(String listId, String subscriberHash, ListsAddMemberEventRequest listsAddMemberEventRequest) throws ApiException {
        okhttp3.Call localVarCall = addMemberEventValidateBeforeCall(listId, subscriberHash, listsAddMemberEventRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMemberEventAsync(String listId, String subscriberHash, ListsAddMemberEventRequest listsAddMemberEventRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberEventValidateBeforeCall(listId, subscriberHash, listsAddMemberEventRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMemberEventRequestBuilder {
        private final String name;
        private final String listId;
        private final String subscriberHash;
        private Map<String, String> properties;
        private Boolean isSyncing;
        private OffsetDateTime occurredAt;

        private AddMemberEventRequestBuilder(String name, String listId, String subscriberHash) {
            this.name = name;
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set properties
         * @param properties An optional list of properties (optional)
         * @return AddMemberEventRequestBuilder
         */
        public AddMemberEventRequestBuilder properties(Map<String, String> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set isSyncing
         * @param isSyncing Events created with the is_syncing value set to &#x60;true&#x60; will not trigger automations. (optional)
         * @return AddMemberEventRequestBuilder
         */
        public AddMemberEventRequestBuilder isSyncing(Boolean isSyncing) {
            this.isSyncing = isSyncing;
            return this;
        }
        
        /**
         * Set occurredAt
         * @param occurredAt The date and time the event occurred in ISO 8601 format. (optional)
         * @return AddMemberEventRequestBuilder
         */
        public AddMemberEventRequestBuilder occurredAt(OffsetDateTime occurredAt) {
            this.occurredAt = occurredAt;
            return this;
        }
        
        /**
         * Build call for addMemberEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMemberEventRequest listsAddMemberEventRequest = buildBodyParams();
            return addMemberEventCall(listId, subscriberHash, listsAddMemberEventRequest, _callback);
        }

        private ListsAddMemberEventRequest buildBodyParams() {
            ListsAddMemberEventRequest listsAddMemberEventRequest = new ListsAddMemberEventRequest();
            listsAddMemberEventRequest.name(this.name);
            listsAddMemberEventRequest.properties(this.properties);
            listsAddMemberEventRequest.isSyncing(this.isSyncing);
            listsAddMemberEventRequest.occurredAt(this.occurredAt);
            return listsAddMemberEventRequest;
        }

        /**
         * Execute addMemberEvent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsAddMemberEventRequest listsAddMemberEventRequest = buildBodyParams();
            addMemberEventWithHttpInfo(listId, subscriberHash, listsAddMemberEventRequest);
        }

        /**
         * Execute addMemberEvent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsAddMemberEventRequest listsAddMemberEventRequest = buildBodyParams();
            return addMemberEventWithHttpInfo(listId, subscriberHash, listsAddMemberEventRequest);
        }

        /**
         * Execute addMemberEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsAddMemberEventRequest listsAddMemberEventRequest = buildBodyParams();
            return addMemberEventAsync(listId, subscriberHash, listsAddMemberEventRequest, _callback);
        }
    }

    /**
     * Add event
     * Add an event for a list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @param listsAddMemberEventRequest  (required)
     * @return AddMemberEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddMemberEventRequestBuilder addMemberEvent(String name, String listId, String subscriberHash) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new AddMemberEventRequestBuilder(name, listId, subscriberHash);
    }
    private okhttp3.Call addMemberNoteCall(String listId, String subscriberHash, ListsAddMemberNoteRequest listsAddMemberNoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMemberNoteRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/notes"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberNoteValidateBeforeCall(String listId, String subscriberHash, ListsAddMemberNoteRequest listsAddMemberNoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addMemberNote(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling addMemberNote(Async)");
        }

        // verify the required parameter 'listsAddMemberNoteRequest' is set
        if (listsAddMemberNoteRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMemberNoteRequest' when calling addMemberNote(Async)");
        }

        return addMemberNoteCall(listId, subscriberHash, listsAddMemberNoteRequest, _callback);

    }


    private ApiResponse<ListsAddMemberNoteResponse> addMemberNoteWithHttpInfo(String listId, String subscriberHash, ListsAddMemberNoteRequest listsAddMemberNoteRequest) throws ApiException {
        okhttp3.Call localVarCall = addMemberNoteValidateBeforeCall(listId, subscriberHash, listsAddMemberNoteRequest, null);
        Type localVarReturnType = new TypeToken<ListsAddMemberNoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMemberNoteAsync(String listId, String subscriberHash, ListsAddMemberNoteRequest listsAddMemberNoteRequest, final ApiCallback<ListsAddMemberNoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberNoteValidateBeforeCall(listId, subscriberHash, listsAddMemberNoteRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsAddMemberNoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMemberNoteRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private String note;

        private AddMemberNoteRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set note
         * @param note The content of the note. Note length is limited to 1,000 characters. (optional)
         * @return AddMemberNoteRequestBuilder
         */
        public AddMemberNoteRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for addMemberNote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            return addMemberNoteCall(listId, subscriberHash, listsAddMemberNoteRequest, _callback);
        }

        private ListsAddMemberNoteRequest buildBodyParams() {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = new ListsAddMemberNoteRequest();
            listsAddMemberNoteRequest.note(this.note);
            return listsAddMemberNoteRequest;
        }

        /**
         * Execute addMemberNote request
         * @return ListsAddMemberNoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddMemberNoteResponse execute() throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            ApiResponse<ListsAddMemberNoteResponse> localVarResp = addMemberNoteWithHttpInfo(listId, subscriberHash, listsAddMemberNoteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMemberNote request with HTTP info returned
         * @return ApiResponse&lt;ListsAddMemberNoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddMemberNoteResponse> executeWithHttpInfo() throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            return addMemberNoteWithHttpInfo(listId, subscriberHash, listsAddMemberNoteRequest);
        }

        /**
         * Execute addMemberNote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddMemberNoteResponse> _callback) throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            return addMemberNoteAsync(listId, subscriberHash, listsAddMemberNoteRequest, _callback);
        }
    }

    /**
     * Add member note
     * Add a new note for a specific subscriber.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @param listsAddMemberNoteRequest  (required)
     * @return AddMemberNoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddMemberNoteRequestBuilder addMemberNote(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new AddMemberNoteRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call addMemberTagsCall(String listId, String subscriberHash, ListsAddMemberTagsRequest listsAddMemberTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMemberTagsRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/tags"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberTagsValidateBeforeCall(String listId, String subscriberHash, ListsAddMemberTagsRequest listsAddMemberTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addMemberTags(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling addMemberTags(Async)");
        }

        // verify the required parameter 'listsAddMemberTagsRequest' is set
        if (listsAddMemberTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMemberTagsRequest' when calling addMemberTags(Async)");
        }

        return addMemberTagsCall(listId, subscriberHash, listsAddMemberTagsRequest, _callback);

    }


    private ApiResponse<Void> addMemberTagsWithHttpInfo(String listId, String subscriberHash, ListsAddMemberTagsRequest listsAddMemberTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addMemberTagsValidateBeforeCall(listId, subscriberHash, listsAddMemberTagsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMemberTagsAsync(String listId, String subscriberHash, ListsAddMemberTagsRequest listsAddMemberTagsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberTagsValidateBeforeCall(listId, subscriberHash, listsAddMemberTagsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMemberTagsRequestBuilder {
        private final List<MemberTag> tags;
        private final String listId;
        private final String subscriberHash;
        private Boolean isSyncing;

        private AddMemberTagsRequestBuilder(List<MemberTag> tags, String listId, String subscriberHash) {
            this.tags = tags;
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set isSyncing
         * @param isSyncing When is_syncing is true, automations based on the tags in the request will not fire (optional)
         * @return AddMemberTagsRequestBuilder
         */
        public AddMemberTagsRequestBuilder isSyncing(Boolean isSyncing) {
            this.isSyncing = isSyncing;
            return this;
        }
        
        /**
         * Build call for addMemberTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMemberTagsRequest listsAddMemberTagsRequest = buildBodyParams();
            return addMemberTagsCall(listId, subscriberHash, listsAddMemberTagsRequest, _callback);
        }

        private ListsAddMemberTagsRequest buildBodyParams() {
            ListsAddMemberTagsRequest listsAddMemberTagsRequest = new ListsAddMemberTagsRequest();
            listsAddMemberTagsRequest.tags(this.tags);
            listsAddMemberTagsRequest.isSyncing(this.isSyncing);
            return listsAddMemberTagsRequest;
        }

        /**
         * Execute addMemberTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsAddMemberTagsRequest listsAddMemberTagsRequest = buildBodyParams();
            addMemberTagsWithHttpInfo(listId, subscriberHash, listsAddMemberTagsRequest);
        }

        /**
         * Execute addMemberTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsAddMemberTagsRequest listsAddMemberTagsRequest = buildBodyParams();
            return addMemberTagsWithHttpInfo(listId, subscriberHash, listsAddMemberTagsRequest);
        }

        /**
         * Execute addMemberTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsAddMemberTagsRequest listsAddMemberTagsRequest = buildBodyParams();
            return addMemberTagsAsync(listId, subscriberHash, listsAddMemberTagsRequest, _callback);
        }
    }

    /**
     * Add or remove member tags
     * Add or remove tags from a list member. If a tag that does not exist is passed in and set as &#39;active&#39;, a new tag will be created.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @param listsAddMemberTagsRequest  (required)
     * @return AddMemberTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddMemberTagsRequestBuilder addMemberTags(List<MemberTag> tags, String listId, String subscriberHash) throws IllegalArgumentException {
        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new AddMemberTagsRequestBuilder(tags, listId, subscriberHash);
    }
    private okhttp3.Call addMemberToListCall(String listId, ListsAddMemberToListRequest listsAddMemberToListRequest, Boolean skipMergeValidation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMemberToListRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipMergeValidation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_merge_validation", skipMergeValidation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberToListValidateBeforeCall(String listId, ListsAddMemberToListRequest listsAddMemberToListRequest, Boolean skipMergeValidation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addMemberToList(Async)");
        }

        // verify the required parameter 'listsAddMemberToListRequest' is set
        if (listsAddMemberToListRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMemberToListRequest' when calling addMemberToList(Async)");
        }

        return addMemberToListCall(listId, listsAddMemberToListRequest, skipMergeValidation, _callback);

    }


    private ApiResponse<ListsAddMemberToListResponse> addMemberToListWithHttpInfo(String listId, ListsAddMemberToListRequest listsAddMemberToListRequest, Boolean skipMergeValidation) throws ApiException {
        okhttp3.Call localVarCall = addMemberToListValidateBeforeCall(listId, listsAddMemberToListRequest, skipMergeValidation, null);
        Type localVarReturnType = new TypeToken<ListsAddMemberToListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMemberToListAsync(String listId, ListsAddMemberToListRequest listsAddMemberToListRequest, Boolean skipMergeValidation, final ApiCallback<ListsAddMemberToListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberToListValidateBeforeCall(listId, listsAddMemberToListRequest, skipMergeValidation, _callback);
        Type localVarReturnType = new TypeToken<ListsAddMemberToListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMemberToListRequestBuilder {
        private final String emailAddress;
        private final String status;
        private final String listId;
        private List<String> tags;
        private String emailType;
        private Map<String, Object> mergeFields;
        private Map<String, Boolean> interests;
        private String language;
        private Boolean vip;
        private LocationProperty location;
        private List<MarketingPermission> marketingPermissions;
        private String ipSignup;
        private OffsetDateTime timestampSignup;
        private String ipOpt;
        private OffsetDateTime timestampOpt;
        private Boolean skipMergeValidation;

        private AddMemberToListRequestBuilder(String emailAddress, String status, String listId) {
            this.emailAddress = emailAddress;
            this.status = status;
            this.listId = listId;
        }

        /**
         * Set tags
         * @param tags The tags that are associated with a member. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set emailType
         * @param emailType Type of email this member asked to get (&#39;html&#39; or &#39;text&#39;). (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder emailType(String emailType) {
            this.emailType = emailType;
            return this;
        }
        
        /**
         * Set mergeFields
         * @param mergeFields A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder mergeFields(Map<String, Object> mergeFields) {
            this.mergeFields = mergeFields;
            return this;
        }
        
        /**
         * Set interests
         * @param interests The key of this object&#39;s properties is the ID of the interest in question. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder interests(Map<String, Boolean> interests) {
            this.interests = interests;
            return this;
        }
        
        /**
         * Set language
         * @param language If set/detected, the [subscriber&#39;s language](https://mailchimp.com/help/view-and-edit-contact-languages/). (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set vip
         * @param vip [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder vip(Boolean vip) {
            this.vip = vip;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder location(LocationProperty location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set marketingPermissions
         * @param marketingPermissions The marketing permissions for the subscriber. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder marketingPermissions(List<MarketingPermission> marketingPermissions) {
            this.marketingPermissions = marketingPermissions;
            return this;
        }
        
        /**
         * Set ipSignup
         * @param ipSignup IP address the subscriber signed up from. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder ipSignup(String ipSignup) {
            this.ipSignup = ipSignup;
            return this;
        }
        
        /**
         * Set timestampSignup
         * @param timestampSignup The date and time the subscriber signed up for the list in ISO 8601 format. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder timestampSignup(OffsetDateTime timestampSignup) {
            this.timestampSignup = timestampSignup;
            return this;
        }
        
        /**
         * Set ipOpt
         * @param ipOpt The IP address the subscriber used to confirm their opt-in status. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder ipOpt(String ipOpt) {
            this.ipOpt = ipOpt;
            return this;
        }
        
        /**
         * Set timestampOpt
         * @param timestampOpt The date and time the subscriber confirmed their opt-in status in ISO 8601 format. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder timestampOpt(OffsetDateTime timestampOpt) {
            this.timestampOpt = timestampOpt;
            return this;
        }
        
        /**
         * Set skipMergeValidation
         * @param skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false. (optional)
         * @return AddMemberToListRequestBuilder
         */
        public AddMemberToListRequestBuilder skipMergeValidation(Boolean skipMergeValidation) {
            this.skipMergeValidation = skipMergeValidation;
            return this;
        }
        
        /**
         * Build call for addMemberToList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMemberToListRequest listsAddMemberToListRequest = buildBodyParams();
            return addMemberToListCall(listId, listsAddMemberToListRequest, skipMergeValidation, _callback);
        }

        private ListsAddMemberToListRequest buildBodyParams() {
            ListsAddMemberToListRequest listsAddMemberToListRequest = new ListsAddMemberToListRequest();
            listsAddMemberToListRequest.tags(this.tags);
            listsAddMemberToListRequest.emailAddress(this.emailAddress);
            listsAddMemberToListRequest.emailType(this.emailType);
            if (this.status != null)
            listsAddMemberToListRequest.status(ListsAddMemberToListRequest.StatusEnum.fromValue(this.status));
            listsAddMemberToListRequest.mergeFields(this.mergeFields);
            listsAddMemberToListRequest.interests(this.interests);
            listsAddMemberToListRequest.language(this.language);
            listsAddMemberToListRequest.vip(this.vip);
            listsAddMemberToListRequest.location(this.location);
            listsAddMemberToListRequest.marketingPermissions(this.marketingPermissions);
            listsAddMemberToListRequest.ipSignup(this.ipSignup);
            listsAddMemberToListRequest.timestampSignup(this.timestampSignup);
            listsAddMemberToListRequest.ipOpt(this.ipOpt);
            listsAddMemberToListRequest.timestampOpt(this.timestampOpt);
            return listsAddMemberToListRequest;
        }

        /**
         * Execute addMemberToList request
         * @return ListsAddMemberToListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddMemberToListResponse execute() throws ApiException {
            ListsAddMemberToListRequest listsAddMemberToListRequest = buildBodyParams();
            ApiResponse<ListsAddMemberToListResponse> localVarResp = addMemberToListWithHttpInfo(listId, listsAddMemberToListRequest, skipMergeValidation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMemberToList request with HTTP info returned
         * @return ApiResponse&lt;ListsAddMemberToListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddMemberToListResponse> executeWithHttpInfo() throws ApiException {
            ListsAddMemberToListRequest listsAddMemberToListRequest = buildBodyParams();
            return addMemberToListWithHttpInfo(listId, listsAddMemberToListRequest, skipMergeValidation);
        }

        /**
         * Execute addMemberToList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddMemberToListResponse> _callback) throws ApiException {
            ListsAddMemberToListRequest listsAddMemberToListRequest = buildBodyParams();
            return addMemberToListAsync(listId, listsAddMemberToListRequest, skipMergeValidation, _callback);
        }
    }

    /**
     * Add member to list
     * Add a new member to the list.
     * @param listId The unique ID for the list. (required)
     * @param listsAddMemberToListRequest  (required)
     * @return AddMemberToListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddMemberToListRequestBuilder addMemberToList(String emailAddress, String status, String listId) throws IllegalArgumentException {
        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new AddMemberToListRequestBuilder(emailAddress, status, listId);
    }
    private okhttp3.Call addMemberToSegmentCall(String listId, String segmentId, ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMemberToSegmentRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}/members"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberToSegmentValidateBeforeCall(String listId, String segmentId, ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addMemberToSegment(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling addMemberToSegment(Async)");
        }

        // verify the required parameter 'listsAddMemberToSegmentRequest' is set
        if (listsAddMemberToSegmentRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMemberToSegmentRequest' when calling addMemberToSegment(Async)");
        }

        return addMemberToSegmentCall(listId, segmentId, listsAddMemberToSegmentRequest, _callback);

    }


    private ApiResponse<ListsAddMemberToSegmentResponse> addMemberToSegmentWithHttpInfo(String listId, String segmentId, ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest) throws ApiException {
        okhttp3.Call localVarCall = addMemberToSegmentValidateBeforeCall(listId, segmentId, listsAddMemberToSegmentRequest, null);
        Type localVarReturnType = new TypeToken<ListsAddMemberToSegmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMemberToSegmentAsync(String listId, String segmentId, ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest, final ApiCallback<ListsAddMemberToSegmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberToSegmentValidateBeforeCall(listId, segmentId, listsAddMemberToSegmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsAddMemberToSegmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMemberToSegmentRequestBuilder {
        private final String emailAddress;
        private final String listId;
        private final String segmentId;

        private AddMemberToSegmentRequestBuilder(String emailAddress, String listId, String segmentId) {
            this.emailAddress = emailAddress;
            this.listId = listId;
            this.segmentId = segmentId;
        }

        /**
         * Build call for addMemberToSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest = buildBodyParams();
            return addMemberToSegmentCall(listId, segmentId, listsAddMemberToSegmentRequest, _callback);
        }

        private ListsAddMemberToSegmentRequest buildBodyParams() {
            ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest = new ListsAddMemberToSegmentRequest();
            listsAddMemberToSegmentRequest.emailAddress(this.emailAddress);
            return listsAddMemberToSegmentRequest;
        }

        /**
         * Execute addMemberToSegment request
         * @return ListsAddMemberToSegmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddMemberToSegmentResponse execute() throws ApiException {
            ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest = buildBodyParams();
            ApiResponse<ListsAddMemberToSegmentResponse> localVarResp = addMemberToSegmentWithHttpInfo(listId, segmentId, listsAddMemberToSegmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMemberToSegment request with HTTP info returned
         * @return ApiResponse&lt;ListsAddMemberToSegmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddMemberToSegmentResponse> executeWithHttpInfo() throws ApiException {
            ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest = buildBodyParams();
            return addMemberToSegmentWithHttpInfo(listId, segmentId, listsAddMemberToSegmentRequest);
        }

        /**
         * Execute addMemberToSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddMemberToSegmentResponse> _callback) throws ApiException {
            ListsAddMemberToSegmentRequest listsAddMemberToSegmentRequest = buildBodyParams();
            return addMemberToSegmentAsync(listId, segmentId, listsAddMemberToSegmentRequest, _callback);
        }
    }

    /**
     * Add member to segment
     * Add a member to a static segment.
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @param listsAddMemberToSegmentRequest  (required)
     * @return AddMemberToSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddMemberToSegmentRequestBuilder addMemberToSegment(String emailAddress, String listId, String segmentId) throws IllegalArgumentException {
        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        return new AddMemberToSegmentRequestBuilder(emailAddress, listId, segmentId);
    }
    private okhttp3.Call addMergeFieldCall(String listId, ListsAddMergeFieldRequest listsAddMergeFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMergeFieldRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/merge-fields"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMergeFieldValidateBeforeCall(String listId, ListsAddMergeFieldRequest listsAddMergeFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addMergeField(Async)");
        }

        // verify the required parameter 'listsAddMergeFieldRequest' is set
        if (listsAddMergeFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMergeFieldRequest' when calling addMergeField(Async)");
        }

        return addMergeFieldCall(listId, listsAddMergeFieldRequest, _callback);

    }


    private ApiResponse<ListsAddMergeFieldResponse> addMergeFieldWithHttpInfo(String listId, ListsAddMergeFieldRequest listsAddMergeFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = addMergeFieldValidateBeforeCall(listId, listsAddMergeFieldRequest, null);
        Type localVarReturnType = new TypeToken<ListsAddMergeFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMergeFieldAsync(String listId, ListsAddMergeFieldRequest listsAddMergeFieldRequest, final ApiCallback<ListsAddMergeFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMergeFieldValidateBeforeCall(listId, listsAddMergeFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsAddMergeFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMergeFieldRequestBuilder {
        private final String name;
        private final String type;
        private final String listId;
        private String tag;
        private Boolean required;
        private String defaultValue;
        private Boolean _public;
        private Integer displayOrder;
        private MergeFieldOptionsProperty options;
        private String helpText;

        private AddMergeFieldRequestBuilder(String name, String type, String listId) {
            this.name = name;
            this.type = type;
            this.listId = listId;
        }

        /**
         * Set tag
         * @param tag The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set required
         * @param required Whether the merge field is required to import a contact. (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set defaultValue
         * @param defaultValue The default value for the merge field if &#x60;null&#x60;. (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder defaultValue(String defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Whether the merge field is displayed on the signup form. (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set displayOrder
         * @param displayOrder The order that the merge field displays on the list signup form. (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder displayOrder(Integer displayOrder) {
            this.displayOrder = displayOrder;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder options(MergeFieldOptionsProperty options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set helpText
         * @param helpText Extra text to help the subscriber fill out the form. (optional)
         * @return AddMergeFieldRequestBuilder
         */
        public AddMergeFieldRequestBuilder helpText(String helpText) {
            this.helpText = helpText;
            return this;
        }
        
        /**
         * Build call for addMergeField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMergeFieldRequest listsAddMergeFieldRequest = buildBodyParams();
            return addMergeFieldCall(listId, listsAddMergeFieldRequest, _callback);
        }

        private ListsAddMergeFieldRequest buildBodyParams() {
            ListsAddMergeFieldRequest listsAddMergeFieldRequest = new ListsAddMergeFieldRequest();
            listsAddMergeFieldRequest.tag(this.tag);
            listsAddMergeFieldRequest.name(this.name);
            if (this.type != null)
            listsAddMergeFieldRequest.type(ListsAddMergeFieldRequest.TypeEnum.fromValue(this.type));
            listsAddMergeFieldRequest.required(this.required);
            listsAddMergeFieldRequest.defaultValue(this.defaultValue);
            listsAddMergeFieldRequest._public(this._public);
            listsAddMergeFieldRequest.displayOrder(this.displayOrder);
            listsAddMergeFieldRequest.options(this.options);
            listsAddMergeFieldRequest.helpText(this.helpText);
            return listsAddMergeFieldRequest;
        }

        /**
         * Execute addMergeField request
         * @return ListsAddMergeFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddMergeFieldResponse execute() throws ApiException {
            ListsAddMergeFieldRequest listsAddMergeFieldRequest = buildBodyParams();
            ApiResponse<ListsAddMergeFieldResponse> localVarResp = addMergeFieldWithHttpInfo(listId, listsAddMergeFieldRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMergeField request with HTTP info returned
         * @return ApiResponse&lt;ListsAddMergeFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddMergeFieldResponse> executeWithHttpInfo() throws ApiException {
            ListsAddMergeFieldRequest listsAddMergeFieldRequest = buildBodyParams();
            return addMergeFieldWithHttpInfo(listId, listsAddMergeFieldRequest);
        }

        /**
         * Execute addMergeField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddMergeFieldResponse> _callback) throws ApiException {
            ListsAddMergeFieldRequest listsAddMergeFieldRequest = buildBodyParams();
            return addMergeFieldAsync(listId, listsAddMergeFieldRequest, _callback);
        }
    }

    /**
     * Add merge field
     * Add a new merge field for a specific audience.
     * @param listId The unique ID for the list. (required)
     * @param listsAddMergeFieldRequest  (required)
     * @return AddMergeFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddMergeFieldRequestBuilder addMergeField(String name, String type, String listId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new AddMergeFieldRequestBuilder(name, type, listId);
    }
    private okhttp3.Call addNewSegmentCall(String listId, ListsAddNewSegmentRequest listsAddNewSegmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddNewSegmentRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewSegmentValidateBeforeCall(String listId, ListsAddNewSegmentRequest listsAddNewSegmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addNewSegment(Async)");
        }

        // verify the required parameter 'listsAddNewSegmentRequest' is set
        if (listsAddNewSegmentRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddNewSegmentRequest' when calling addNewSegment(Async)");
        }

        return addNewSegmentCall(listId, listsAddNewSegmentRequest, _callback);

    }


    private ApiResponse<ListsAddNewSegmentResponse> addNewSegmentWithHttpInfo(String listId, ListsAddNewSegmentRequest listsAddNewSegmentRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewSegmentValidateBeforeCall(listId, listsAddNewSegmentRequest, null);
        Type localVarReturnType = new TypeToken<ListsAddNewSegmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewSegmentAsync(String listId, ListsAddNewSegmentRequest listsAddNewSegmentRequest, final ApiCallback<ListsAddNewSegmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewSegmentValidateBeforeCall(listId, listsAddNewSegmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsAddNewSegmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewSegmentRequestBuilder {
        private final String name;
        private final String listId;
        private List<String> staticSegment;
        private ConditionsProperty options;

        private AddNewSegmentRequestBuilder(String name, String listId) {
            this.name = name;
            this.listId = listId;
        }

        /**
         * Set staticSegment
         * @param staticSegment An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field. (optional)
         * @return AddNewSegmentRequestBuilder
         */
        public AddNewSegmentRequestBuilder staticSegment(List<String> staticSegment) {
            this.staticSegment = staticSegment;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return AddNewSegmentRequestBuilder
         */
        public AddNewSegmentRequestBuilder options(ConditionsProperty options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for addNewSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddNewSegmentRequest listsAddNewSegmentRequest = buildBodyParams();
            return addNewSegmentCall(listId, listsAddNewSegmentRequest, _callback);
        }

        private ListsAddNewSegmentRequest buildBodyParams() {
            ListsAddNewSegmentRequest listsAddNewSegmentRequest = new ListsAddNewSegmentRequest();
            listsAddNewSegmentRequest.name(this.name);
            listsAddNewSegmentRequest.staticSegment(this.staticSegment);
            listsAddNewSegmentRequest.options(this.options);
            return listsAddNewSegmentRequest;
        }

        /**
         * Execute addNewSegment request
         * @return ListsAddNewSegmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddNewSegmentResponse execute() throws ApiException {
            ListsAddNewSegmentRequest listsAddNewSegmentRequest = buildBodyParams();
            ApiResponse<ListsAddNewSegmentResponse> localVarResp = addNewSegmentWithHttpInfo(listId, listsAddNewSegmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewSegment request with HTTP info returned
         * @return ApiResponse&lt;ListsAddNewSegmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddNewSegmentResponse> executeWithHttpInfo() throws ApiException {
            ListsAddNewSegmentRequest listsAddNewSegmentRequest = buildBodyParams();
            return addNewSegmentWithHttpInfo(listId, listsAddNewSegmentRequest);
        }

        /**
         * Execute addNewSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddNewSegmentResponse> _callback) throws ApiException {
            ListsAddNewSegmentRequest listsAddNewSegmentRequest = buildBodyParams();
            return addNewSegmentAsync(listId, listsAddNewSegmentRequest, _callback);
        }
    }

    /**
     * Add segment
     * Create a new segment in a specific list.
     * @param listId The unique ID for the list. (required)
     * @param listsAddNewSegmentRequest  (required)
     * @return AddNewSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewSegmentRequestBuilder addNewSegment(String name, String listId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new AddNewSegmentRequestBuilder(name, listId);
    }
    private okhttp3.Call addOrUpdateMemberCall(String listId, String subscriberHash, ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest, Boolean skipMergeValidation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddOrUpdateMemberRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipMergeValidation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_merge_validation", skipMergeValidation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateMemberValidateBeforeCall(String listId, String subscriberHash, ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest, Boolean skipMergeValidation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addOrUpdateMember(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling addOrUpdateMember(Async)");
        }

        // verify the required parameter 'listsAddOrUpdateMemberRequest' is set
        if (listsAddOrUpdateMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddOrUpdateMemberRequest' when calling addOrUpdateMember(Async)");
        }

        return addOrUpdateMemberCall(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation, _callback);

    }


    private ApiResponse<ListsAddOrUpdateMemberResponse> addOrUpdateMemberWithHttpInfo(String listId, String subscriberHash, ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest, Boolean skipMergeValidation) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateMemberValidateBeforeCall(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation, null);
        Type localVarReturnType = new TypeToken<ListsAddOrUpdateMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrUpdateMemberAsync(String listId, String subscriberHash, ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest, Boolean skipMergeValidation, final ApiCallback<ListsAddOrUpdateMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateMemberValidateBeforeCall(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation, _callback);
        Type localVarReturnType = new TypeToken<ListsAddOrUpdateMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrUpdateMemberRequestBuilder {
        private final String emailAddress;
        private final String statusIfNew;
        private final String listId;
        private final String subscriberHash;
        private String emailType;
        private String status;
        private Map<String, Object> mergeFields;
        private Map<String, Boolean> interests;
        private String language;
        private Boolean vip;
        private LocationProperty location;
        private List<MarketingPermission> marketingPermissions;
        private String ipSignup;
        private OffsetDateTime timestampSignup;
        private String ipOpt;
        private OffsetDateTime timestampOpt;
        private Boolean skipMergeValidation;

        private AddOrUpdateMemberRequestBuilder(String emailAddress, String statusIfNew, String listId, String subscriberHash) {
            this.emailAddress = emailAddress;
            this.statusIfNew = statusIfNew;
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set emailType
         * @param emailType Type of email this member asked to get (&#39;html&#39; or &#39;text&#39;). (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder emailType(String emailType) {
            this.emailType = emailType;
            return this;
        }
        
        /**
         * Set status
         * @param status Subscriber&#39;s current status. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set mergeFields
         * @param mergeFields A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder mergeFields(Map<String, Object> mergeFields) {
            this.mergeFields = mergeFields;
            return this;
        }
        
        /**
         * Set interests
         * @param interests The key of this object&#39;s properties is the ID of the interest in question. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder interests(Map<String, Boolean> interests) {
            this.interests = interests;
            return this;
        }
        
        /**
         * Set language
         * @param language If set/detected, the [subscriber&#39;s language](https://mailchimp.com/help/view-and-edit-contact-languages/). (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set vip
         * @param vip [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder vip(Boolean vip) {
            this.vip = vip;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder location(LocationProperty location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set marketingPermissions
         * @param marketingPermissions The marketing permissions for the subscriber. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder marketingPermissions(List<MarketingPermission> marketingPermissions) {
            this.marketingPermissions = marketingPermissions;
            return this;
        }
        
        /**
         * Set ipSignup
         * @param ipSignup IP address the subscriber signed up from. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder ipSignup(String ipSignup) {
            this.ipSignup = ipSignup;
            return this;
        }
        
        /**
         * Set timestampSignup
         * @param timestampSignup The date and time the subscriber signed up for the list in ISO 8601 format. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder timestampSignup(OffsetDateTime timestampSignup) {
            this.timestampSignup = timestampSignup;
            return this;
        }
        
        /**
         * Set ipOpt
         * @param ipOpt The IP address the subscriber used to confirm their opt-in status. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder ipOpt(String ipOpt) {
            this.ipOpt = ipOpt;
            return this;
        }
        
        /**
         * Set timestampOpt
         * @param timestampOpt The date and time the subscriber confirmed their opt-in status in ISO 8601 format. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder timestampOpt(OffsetDateTime timestampOpt) {
            this.timestampOpt = timestampOpt;
            return this;
        }
        
        /**
         * Set skipMergeValidation
         * @param skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false. (optional)
         * @return AddOrUpdateMemberRequestBuilder
         */
        public AddOrUpdateMemberRequestBuilder skipMergeValidation(Boolean skipMergeValidation) {
            this.skipMergeValidation = skipMergeValidation;
            return this;
        }
        
        /**
         * Build call for addOrUpdateMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest = buildBodyParams();
            return addOrUpdateMemberCall(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation, _callback);
        }

        private ListsAddOrUpdateMemberRequest buildBodyParams() {
            ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest = new ListsAddOrUpdateMemberRequest();
            listsAddOrUpdateMemberRequest.emailAddress(this.emailAddress);
            if (this.statusIfNew != null)
            listsAddOrUpdateMemberRequest.statusIfNew(ListsAddOrUpdateMemberRequest.StatusIfNewEnum.fromValue(this.statusIfNew));
            listsAddOrUpdateMemberRequest.emailType(this.emailType);
            if (this.status != null)
            listsAddOrUpdateMemberRequest.status(ListsAddOrUpdateMemberRequest.StatusEnum.fromValue(this.status));
            listsAddOrUpdateMemberRequest.mergeFields(this.mergeFields);
            listsAddOrUpdateMemberRequest.interests(this.interests);
            listsAddOrUpdateMemberRequest.language(this.language);
            listsAddOrUpdateMemberRequest.vip(this.vip);
            listsAddOrUpdateMemberRequest.location(this.location);
            listsAddOrUpdateMemberRequest.marketingPermissions(this.marketingPermissions);
            listsAddOrUpdateMemberRequest.ipSignup(this.ipSignup);
            listsAddOrUpdateMemberRequest.timestampSignup(this.timestampSignup);
            listsAddOrUpdateMemberRequest.ipOpt(this.ipOpt);
            listsAddOrUpdateMemberRequest.timestampOpt(this.timestampOpt);
            return listsAddOrUpdateMemberRequest;
        }

        /**
         * Execute addOrUpdateMember request
         * @return ListsAddOrUpdateMemberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsAddOrUpdateMemberResponse execute() throws ApiException {
            ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest = buildBodyParams();
            ApiResponse<ListsAddOrUpdateMemberResponse> localVarResp = addOrUpdateMemberWithHttpInfo(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrUpdateMember request with HTTP info returned
         * @return ApiResponse&lt;ListsAddOrUpdateMemberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsAddOrUpdateMemberResponse> executeWithHttpInfo() throws ApiException {
            ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest = buildBodyParams();
            return addOrUpdateMemberWithHttpInfo(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation);
        }

        /**
         * Execute addOrUpdateMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsAddOrUpdateMemberResponse> _callback) throws ApiException {
            ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest = buildBodyParams();
            return addOrUpdateMemberAsync(listId, subscriberHash, listsAddOrUpdateMemberRequest, skipMergeValidation, _callback);
        }
    }

    /**
     * Add or update list member
     * Add or update a list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @param listsAddOrUpdateMemberRequest  (required)
     * @return AddOrUpdateMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateMemberRequestBuilder addOrUpdateMember(String emailAddress, String statusIfNew, String listId, String subscriberHash) throws IllegalArgumentException {
        if (emailAddress == null) throw new IllegalArgumentException("\"emailAddress\" is required but got null");
            

        if (statusIfNew == null) throw new IllegalArgumentException("\"statusIfNew\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new AddOrUpdateMemberRequestBuilder(emailAddress, statusIfNew, listId, subscriberHash);
    }
    private okhttp3.Call archiveMemberCall(String listId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveMemberValidateBeforeCall(String listId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling archiveMember(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling archiveMember(Async)");
        }

        return archiveMemberCall(listId, subscriberHash, _callback);

    }


    private ApiResponse<Void> archiveMemberWithHttpInfo(String listId, String subscriberHash) throws ApiException {
        okhttp3.Call localVarCall = archiveMemberValidateBeforeCall(listId, subscriberHash, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call archiveMemberAsync(String listId, String subscriberHash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveMemberValidateBeforeCall(listId, subscriberHash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ArchiveMemberRequestBuilder {
        private final String listId;
        private final String subscriberHash;

        private ArchiveMemberRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Build call for archiveMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveMemberCall(listId, subscriberHash, _callback);
        }


        /**
         * Execute archiveMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            archiveMemberWithHttpInfo(listId, subscriberHash);
        }

        /**
         * Execute archiveMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return archiveMemberWithHttpInfo(listId, subscriberHash);
        }

        /**
         * Execute archiveMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return archiveMemberAsync(listId, subscriberHash, _callback);
        }
    }

    /**
     * Archive list member
     * Archive a list member. To permanently delete, use the delete-permanent action.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return ArchiveMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveMemberRequestBuilder archiveMember(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new ArchiveMemberRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call batchAddRemoveMembersCall(String listId, String segmentId, ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsBatchAddRemoveMembersRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchAddRemoveMembersValidateBeforeCall(String listId, String segmentId, ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling batchAddRemoveMembers(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling batchAddRemoveMembers(Async)");
        }

        // verify the required parameter 'listsBatchAddRemoveMembersRequest' is set
        if (listsBatchAddRemoveMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'listsBatchAddRemoveMembersRequest' when calling batchAddRemoveMembers(Async)");
        }

        return batchAddRemoveMembersCall(listId, segmentId, listsBatchAddRemoveMembersRequest, _callback);

    }


    private ApiResponse<ListsBatchAddRemoveMembersResponse> batchAddRemoveMembersWithHttpInfo(String listId, String segmentId, ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = batchAddRemoveMembersValidateBeforeCall(listId, segmentId, listsBatchAddRemoveMembersRequest, null);
        Type localVarReturnType = new TypeToken<ListsBatchAddRemoveMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchAddRemoveMembersAsync(String listId, String segmentId, ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest, final ApiCallback<ListsBatchAddRemoveMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchAddRemoveMembersValidateBeforeCall(listId, segmentId, listsBatchAddRemoveMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsBatchAddRemoveMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchAddRemoveMembersRequestBuilder {
        private final String listId;
        private final String segmentId;
        private List<String> membersToAdd;
        private List<String> membersToRemove;

        private BatchAddRemoveMembersRequestBuilder(String listId, String segmentId) {
            this.listId = listId;
            this.segmentId = segmentId;
        }

        /**
         * Set membersToAdd
         * @param membersToAdd An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent. (optional)
         * @return BatchAddRemoveMembersRequestBuilder
         */
        public BatchAddRemoveMembersRequestBuilder membersToAdd(List<String> membersToAdd) {
            this.membersToAdd = membersToAdd;
            return this;
        }
        
        /**
         * Set membersToRemove
         * @param membersToRemove An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent. (optional)
         * @return BatchAddRemoveMembersRequestBuilder
         */
        public BatchAddRemoveMembersRequestBuilder membersToRemove(List<String> membersToRemove) {
            this.membersToRemove = membersToRemove;
            return this;
        }
        
        /**
         * Build call for batchAddRemoveMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest = buildBodyParams();
            return batchAddRemoveMembersCall(listId, segmentId, listsBatchAddRemoveMembersRequest, _callback);
        }

        private ListsBatchAddRemoveMembersRequest buildBodyParams() {
            ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest = new ListsBatchAddRemoveMembersRequest();
            listsBatchAddRemoveMembersRequest.membersToAdd(this.membersToAdd);
            listsBatchAddRemoveMembersRequest.membersToRemove(this.membersToRemove);
            return listsBatchAddRemoveMembersRequest;
        }

        /**
         * Execute batchAddRemoveMembers request
         * @return ListsBatchAddRemoveMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsBatchAddRemoveMembersResponse execute() throws ApiException {
            ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest = buildBodyParams();
            ApiResponse<ListsBatchAddRemoveMembersResponse> localVarResp = batchAddRemoveMembersWithHttpInfo(listId, segmentId, listsBatchAddRemoveMembersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batchAddRemoveMembers request with HTTP info returned
         * @return ApiResponse&lt;ListsBatchAddRemoveMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsBatchAddRemoveMembersResponse> executeWithHttpInfo() throws ApiException {
            ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest = buildBodyParams();
            return batchAddRemoveMembersWithHttpInfo(listId, segmentId, listsBatchAddRemoveMembersRequest);
        }

        /**
         * Execute batchAddRemoveMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsBatchAddRemoveMembersResponse> _callback) throws ApiException {
            ListsBatchAddRemoveMembersRequest listsBatchAddRemoveMembersRequest = buildBodyParams();
            return batchAddRemoveMembersAsync(listId, segmentId, listsBatchAddRemoveMembersRequest, _callback);
        }
    }

    /**
     * Batch add or remove members
     * Batch add/remove list members to static segment
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @param listsBatchAddRemoveMembersRequest  (required)
     * @return BatchAddRemoveMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public BatchAddRemoveMembersRequestBuilder batchAddRemoveMembers(String listId, String segmentId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        return new BatchAddRemoveMembersRequestBuilder(listId, segmentId);
    }
    private okhttp3.Call batchSubscribeOrUnsubscribeCall(String listId, ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest, Boolean skipMergeValidation, Boolean skipDuplicateCheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsBatchSubscribeOrUnsubscribeRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipMergeValidation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_merge_validation", skipMergeValidation));
        }

        if (skipDuplicateCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_duplicate_check", skipDuplicateCheck));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchSubscribeOrUnsubscribeValidateBeforeCall(String listId, ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest, Boolean skipMergeValidation, Boolean skipDuplicateCheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling batchSubscribeOrUnsubscribe(Async)");
        }

        // verify the required parameter 'listsBatchSubscribeOrUnsubscribeRequest' is set
        if (listsBatchSubscribeOrUnsubscribeRequest == null) {
            throw new ApiException("Missing the required parameter 'listsBatchSubscribeOrUnsubscribeRequest' when calling batchSubscribeOrUnsubscribe(Async)");
        }

        return batchSubscribeOrUnsubscribeCall(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck, _callback);

    }


    private ApiResponse<ListsBatchSubscribeOrUnsubscribeResponse> batchSubscribeOrUnsubscribeWithHttpInfo(String listId, ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest, Boolean skipMergeValidation, Boolean skipDuplicateCheck) throws ApiException {
        okhttp3.Call localVarCall = batchSubscribeOrUnsubscribeValidateBeforeCall(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck, null);
        Type localVarReturnType = new TypeToken<ListsBatchSubscribeOrUnsubscribeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchSubscribeOrUnsubscribeAsync(String listId, ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest, Boolean skipMergeValidation, Boolean skipDuplicateCheck, final ApiCallback<ListsBatchSubscribeOrUnsubscribeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchSubscribeOrUnsubscribeValidateBeforeCall(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck, _callback);
        Type localVarReturnType = new TypeToken<ListsBatchSubscribeOrUnsubscribeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchSubscribeOrUnsubscribeRequestBuilder {
        private final List<AddListMembers> members;
        private final String listId;
        private Boolean syncTags;
        private Boolean updateExisting;
        private Boolean skipMergeValidation;
        private Boolean skipDuplicateCheck;

        private BatchSubscribeOrUnsubscribeRequestBuilder(List<AddListMembers> members, String listId) {
            this.members = members;
            this.listId = listId;
        }

        /**
         * Set syncTags
         * @param syncTags Whether this batch operation will replace all existing tags with tags in request. (optional)
         * @return BatchSubscribeOrUnsubscribeRequestBuilder
         */
        public BatchSubscribeOrUnsubscribeRequestBuilder syncTags(Boolean syncTags) {
            this.syncTags = syncTags;
            return this;
        }
        
        /**
         * Set updateExisting
         * @param updateExisting Whether this batch operation will change existing members&#39; subscription status. (optional)
         * @return BatchSubscribeOrUnsubscribeRequestBuilder
         */
        public BatchSubscribeOrUnsubscribeRequestBuilder updateExisting(Boolean updateExisting) {
            this.updateExisting = updateExisting;
            return this;
        }
        
        /**
         * Set skipMergeValidation
         * @param skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false. (optional)
         * @return BatchSubscribeOrUnsubscribeRequestBuilder
         */
        public BatchSubscribeOrUnsubscribeRequestBuilder skipMergeValidation(Boolean skipMergeValidation) {
            this.skipMergeValidation = skipMergeValidation;
            return this;
        }
        
        /**
         * Set skipDuplicateCheck
         * @param skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false. (optional)
         * @return BatchSubscribeOrUnsubscribeRequestBuilder
         */
        public BatchSubscribeOrUnsubscribeRequestBuilder skipDuplicateCheck(Boolean skipDuplicateCheck) {
            this.skipDuplicateCheck = skipDuplicateCheck;
            return this;
        }
        
        /**
         * Build call for batchSubscribeOrUnsubscribe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest = buildBodyParams();
            return batchSubscribeOrUnsubscribeCall(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck, _callback);
        }

        private ListsBatchSubscribeOrUnsubscribeRequest buildBodyParams() {
            ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest = new ListsBatchSubscribeOrUnsubscribeRequest();
            listsBatchSubscribeOrUnsubscribeRequest.members(this.members);
            listsBatchSubscribeOrUnsubscribeRequest.syncTags(this.syncTags);
            listsBatchSubscribeOrUnsubscribeRequest.updateExisting(this.updateExisting);
            return listsBatchSubscribeOrUnsubscribeRequest;
        }

        /**
         * Execute batchSubscribeOrUnsubscribe request
         * @return ListsBatchSubscribeOrUnsubscribeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsBatchSubscribeOrUnsubscribeResponse execute() throws ApiException {
            ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest = buildBodyParams();
            ApiResponse<ListsBatchSubscribeOrUnsubscribeResponse> localVarResp = batchSubscribeOrUnsubscribeWithHttpInfo(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batchSubscribeOrUnsubscribe request with HTTP info returned
         * @return ApiResponse&lt;ListsBatchSubscribeOrUnsubscribeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsBatchSubscribeOrUnsubscribeResponse> executeWithHttpInfo() throws ApiException {
            ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest = buildBodyParams();
            return batchSubscribeOrUnsubscribeWithHttpInfo(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck);
        }

        /**
         * Execute batchSubscribeOrUnsubscribe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsBatchSubscribeOrUnsubscribeResponse> _callback) throws ApiException {
            ListsBatchSubscribeOrUnsubscribeRequest listsBatchSubscribeOrUnsubscribeRequest = buildBodyParams();
            return batchSubscribeOrUnsubscribeAsync(listId, listsBatchSubscribeOrUnsubscribeRequest, skipMergeValidation, skipDuplicateCheck, _callback);
        }
    }

    /**
     * Batch subscribe or unsubscribe
     * Batch subscribe or unsubscribe list members.
     * @param listId The unique ID for the list. (required)
     * @param listsBatchSubscribeOrUnsubscribeRequest  (required)
     * @return BatchSubscribeOrUnsubscribeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public BatchSubscribeOrUnsubscribeRequestBuilder batchSubscribeOrUnsubscribe(List<AddListMembers> members, String listId) throws IllegalArgumentException {
        if (members == null) throw new IllegalArgumentException("\"members\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new BatchSubscribeOrUnsubscribeRequestBuilder(members, listId);
    }
    private okhttp3.Call createNewListCall(ListsCreateNewListRequest listsCreateNewListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsCreateNewListRequest;

        // create path and map variables
        String localVarPath = "/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewListValidateBeforeCall(ListsCreateNewListRequest listsCreateNewListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listsCreateNewListRequest' is set
        if (listsCreateNewListRequest == null) {
            throw new ApiException("Missing the required parameter 'listsCreateNewListRequest' when calling createNewList(Async)");
        }

        return createNewListCall(listsCreateNewListRequest, _callback);

    }


    private ApiResponse<ListsCreateNewListResponse> createNewListWithHttpInfo(ListsCreateNewListRequest listsCreateNewListRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewListValidateBeforeCall(listsCreateNewListRequest, null);
        Type localVarReturnType = new TypeToken<ListsCreateNewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewListAsync(ListsCreateNewListRequest listsCreateNewListRequest, final ApiCallback<ListsCreateNewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewListValidateBeforeCall(listsCreateNewListRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsCreateNewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewListRequestBuilder {
        private final String name;
        private final ListContactProperty contact;
        private final String permissionReminder;
        private final CampaignDefaultsProperty campaignDefaults;
        private final Boolean emailTypeOption;
        private Boolean useArchiveBar;
        private String notifyOnSubscribe;
        private String notifyOnUnsubscribe;
        private Boolean doubleOptin;
        private Boolean marketingPermissions;

        private CreateNewListRequestBuilder(String name, ListContactProperty contact, String permissionReminder, CampaignDefaultsProperty campaignDefaults, Boolean emailTypeOption) {
            this.name = name;
            this.contact = contact;
            this.permissionReminder = permissionReminder;
            this.campaignDefaults = campaignDefaults;
            this.emailTypeOption = emailTypeOption;
        }

        /**
         * Set useArchiveBar
         * @param useArchiveBar Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. (optional, default to false)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder useArchiveBar(Boolean useArchiveBar) {
            this.useArchiveBar = useArchiveBar;
            return this;
        }
        
        /**
         * Set notifyOnSubscribe
         * @param notifyOnSubscribe The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. (optional, default to false)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder notifyOnSubscribe(String notifyOnSubscribe) {
            this.notifyOnSubscribe = notifyOnSubscribe;
            return this;
        }
        
        /**
         * Set notifyOnUnsubscribe
         * @param notifyOnUnsubscribe The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. (optional, default to false)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder notifyOnUnsubscribe(String notifyOnUnsubscribe) {
            this.notifyOnUnsubscribe = notifyOnUnsubscribe;
            return this;
        }
        
        /**
         * Set doubleOptin
         * @param doubleOptin Whether or not to require the subscriber to confirm subscription via email. (optional, default to false)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder doubleOptin(Boolean doubleOptin) {
            this.doubleOptin = doubleOptin;
            return this;
        }
        
        /**
         * Set marketingPermissions
         * @param marketingPermissions Whether or not the list has marketing permissions (eg. GDPR) enabled. (optional, default to false)
         * @return CreateNewListRequestBuilder
         */
        public CreateNewListRequestBuilder marketingPermissions(Boolean marketingPermissions) {
            this.marketingPermissions = marketingPermissions;
            return this;
        }
        
        /**
         * Build call for createNewList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsCreateNewListRequest listsCreateNewListRequest = buildBodyParams();
            return createNewListCall(listsCreateNewListRequest, _callback);
        }

        private ListsCreateNewListRequest buildBodyParams() {
            ListsCreateNewListRequest listsCreateNewListRequest = new ListsCreateNewListRequest();
            listsCreateNewListRequest.name(this.name);
            listsCreateNewListRequest.contact(this.contact);
            listsCreateNewListRequest.permissionReminder(this.permissionReminder);
            listsCreateNewListRequest.useArchiveBar(this.useArchiveBar);
            listsCreateNewListRequest.campaignDefaults(this.campaignDefaults);
            listsCreateNewListRequest.notifyOnSubscribe(this.notifyOnSubscribe);
            listsCreateNewListRequest.notifyOnUnsubscribe(this.notifyOnUnsubscribe);
            listsCreateNewListRequest.emailTypeOption(this.emailTypeOption);
            listsCreateNewListRequest.doubleOptin(this.doubleOptin);
            listsCreateNewListRequest.marketingPermissions(this.marketingPermissions);
            return listsCreateNewListRequest;
        }

        /**
         * Execute createNewList request
         * @return ListsCreateNewListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsCreateNewListResponse execute() throws ApiException {
            ListsCreateNewListRequest listsCreateNewListRequest = buildBodyParams();
            ApiResponse<ListsCreateNewListResponse> localVarResp = createNewListWithHttpInfo(listsCreateNewListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewList request with HTTP info returned
         * @return ApiResponse&lt;ListsCreateNewListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsCreateNewListResponse> executeWithHttpInfo() throws ApiException {
            ListsCreateNewListRequest listsCreateNewListRequest = buildBodyParams();
            return createNewListWithHttpInfo(listsCreateNewListRequest);
        }

        /**
         * Execute createNewList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsCreateNewListResponse> _callback) throws ApiException {
            ListsCreateNewListRequest listsCreateNewListRequest = buildBodyParams();
            return createNewListAsync(listsCreateNewListRequest, _callback);
        }
    }

    /**
     * Add list
     * Create a new list in your Mailchimp account.
     * @param listsCreateNewListRequest  (required)
     * @return CreateNewListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewListRequestBuilder createNewList(String name, ListContactProperty contact, String permissionReminder, CampaignDefaultsProperty campaignDefaults, Boolean emailTypeOption) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (contact == null) throw new IllegalArgumentException("\"contact\" is required but got null");
        if (permissionReminder == null) throw new IllegalArgumentException("\"permissionReminder\" is required but got null");
            

        if (campaignDefaults == null) throw new IllegalArgumentException("\"campaignDefaults\" is required but got null");
        if (emailTypeOption == null) throw new IllegalArgumentException("\"emailTypeOption\" is required but got null");
        return new CreateNewListRequestBuilder(name, contact, permissionReminder, campaignDefaults, emailTypeOption);
    }
    private okhttp3.Call createWebhookCall(String listId, ListsCreateWebhookRequest listsCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsCreateWebhookRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/webhooks"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(String listId, ListsCreateWebhookRequest listsCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling createWebhook(Async)");
        }

        // verify the required parameter 'listsCreateWebhookRequest' is set
        if (listsCreateWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'listsCreateWebhookRequest' when calling createWebhook(Async)");
        }

        return createWebhookCall(listId, listsCreateWebhookRequest, _callback);

    }


    private ApiResponse<ListsCreateWebhookResponse> createWebhookWithHttpInfo(String listId, ListsCreateWebhookRequest listsCreateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(listId, listsCreateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<ListsCreateWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebhookAsync(String listId, ListsCreateWebhookRequest listsCreateWebhookRequest, final ApiCallback<ListsCreateWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(listId, listsCreateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsCreateWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebhookRequestBuilder {
        private final String listId;
        private String url;
        private EventsProperty events;
        private SourcesProperty sources;

        private CreateWebhookRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set url
         * @param url A valid URL for the Webhook. (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set events
         * @param events  (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder events(EventsProperty events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder sources(SourcesProperty sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Build call for createWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            return createWebhookCall(listId, listsCreateWebhookRequest, _callback);
        }

        private ListsCreateWebhookRequest buildBodyParams() {
            ListsCreateWebhookRequest listsCreateWebhookRequest = new ListsCreateWebhookRequest();
            listsCreateWebhookRequest.url(this.url);
            listsCreateWebhookRequest.events(this.events);
            listsCreateWebhookRequest.sources(this.sources);
            return listsCreateWebhookRequest;
        }

        /**
         * Execute createWebhook request
         * @return ListsCreateWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsCreateWebhookResponse execute() throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            ApiResponse<ListsCreateWebhookResponse> localVarResp = createWebhookWithHttpInfo(listId, listsCreateWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebhook request with HTTP info returned
         * @return ApiResponse&lt;ListsCreateWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsCreateWebhookResponse> executeWithHttpInfo() throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            return createWebhookWithHttpInfo(listId, listsCreateWebhookRequest);
        }

        /**
         * Execute createWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsCreateWebhookResponse> _callback) throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            return createWebhookAsync(listId, listsCreateWebhookRequest, _callback);
        }
    }

    /**
     * Add webhook
     * Create a new webhook for a specific list.
     * @param listId The unique ID for the list. (required)
     * @param listsCreateWebhookRequest  (required)
     * @return CreateWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebhookRequestBuilder createWebhook(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new CreateWebhookRequestBuilder(listId);
    }
    private okhttp3.Call customizeSignupFormCall(String listId, ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsCustomizeSignupFormRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/signup-forms"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customizeSignupFormValidateBeforeCall(String listId, ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling customizeSignupForm(Async)");
        }

        // verify the required parameter 'listsCustomizeSignupFormRequest' is set
        if (listsCustomizeSignupFormRequest == null) {
            throw new ApiException("Missing the required parameter 'listsCustomizeSignupFormRequest' when calling customizeSignupForm(Async)");
        }

        return customizeSignupFormCall(listId, listsCustomizeSignupFormRequest, _callback);

    }


    private ApiResponse<ListsCustomizeSignupFormResponse> customizeSignupFormWithHttpInfo(String listId, ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest) throws ApiException {
        okhttp3.Call localVarCall = customizeSignupFormValidateBeforeCall(listId, listsCustomizeSignupFormRequest, null);
        Type localVarReturnType = new TypeToken<ListsCustomizeSignupFormResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call customizeSignupFormAsync(String listId, ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest, final ApiCallback<ListsCustomizeSignupFormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customizeSignupFormValidateBeforeCall(listId, listsCustomizeSignupFormRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsCustomizeSignupFormResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CustomizeSignupFormRequestBuilder {
        private final String listId;
        private SignupFormHeaderOptionsProperty header;
        private List<CollectionOfContentForListSignupForms> contents;
        private List<CollectionOfElementStyleForListSignupForms> styles;

        private CustomizeSignupFormRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set header
         * @param header  (optional)
         * @return CustomizeSignupFormRequestBuilder
         */
        public CustomizeSignupFormRequestBuilder header(SignupFormHeaderOptionsProperty header) {
            this.header = header;
            return this;
        }
        
        /**
         * Set contents
         * @param contents The signup form body content. (optional)
         * @return CustomizeSignupFormRequestBuilder
         */
        public CustomizeSignupFormRequestBuilder contents(List<CollectionOfContentForListSignupForms> contents) {
            this.contents = contents;
            return this;
        }
        
        /**
         * Set styles
         * @param styles An array of objects, each representing an element style for the signup form. (optional)
         * @return CustomizeSignupFormRequestBuilder
         */
        public CustomizeSignupFormRequestBuilder styles(List<CollectionOfElementStyleForListSignupForms> styles) {
            this.styles = styles;
            return this;
        }
        
        /**
         * Build call for customizeSignupForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest = buildBodyParams();
            return customizeSignupFormCall(listId, listsCustomizeSignupFormRequest, _callback);
        }

        private ListsCustomizeSignupFormRequest buildBodyParams() {
            ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest = new ListsCustomizeSignupFormRequest();
            listsCustomizeSignupFormRequest.header(this.header);
            listsCustomizeSignupFormRequest.contents(this.contents);
            listsCustomizeSignupFormRequest.styles(this.styles);
            return listsCustomizeSignupFormRequest;
        }

        /**
         * Execute customizeSignupForm request
         * @return ListsCustomizeSignupFormResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsCustomizeSignupFormResponse execute() throws ApiException {
            ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest = buildBodyParams();
            ApiResponse<ListsCustomizeSignupFormResponse> localVarResp = customizeSignupFormWithHttpInfo(listId, listsCustomizeSignupFormRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute customizeSignupForm request with HTTP info returned
         * @return ApiResponse&lt;ListsCustomizeSignupFormResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsCustomizeSignupFormResponse> executeWithHttpInfo() throws ApiException {
            ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest = buildBodyParams();
            return customizeSignupFormWithHttpInfo(listId, listsCustomizeSignupFormRequest);
        }

        /**
         * Execute customizeSignupForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsCustomizeSignupFormResponse> _callback) throws ApiException {
            ListsCustomizeSignupFormRequest listsCustomizeSignupFormRequest = buildBodyParams();
            return customizeSignupFormAsync(listId, listsCustomizeSignupFormRequest, _callback);
        }
    }

    /**
     * Customize signup form
     * Customize a list&#39;s default signup form.
     * @param listId The unique ID for the list. (required)
     * @param listsCustomizeSignupFormRequest  (required)
     * @return CustomizeSignupFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CustomizeSignupFormRequestBuilder customizeSignupForm(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new CustomizeSignupFormRequestBuilder(listId);
    }
    private okhttp3.Call deleteInterestCategoryCall(String listId, String interestCategoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInterestCategoryValidateBeforeCall(String listId, String interestCategoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteInterestCategory(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling deleteInterestCategory(Async)");
        }

        return deleteInterestCategoryCall(listId, interestCategoryId, _callback);

    }


    private ApiResponse<Void> deleteInterestCategoryWithHttpInfo(String listId, String interestCategoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteInterestCategoryValidateBeforeCall(listId, interestCategoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInterestCategoryAsync(String listId, String interestCategoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInterestCategoryValidateBeforeCall(listId, interestCategoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteInterestCategoryRequestBuilder {
        private final String listId;
        private final String interestCategoryId;

        private DeleteInterestCategoryRequestBuilder(String listId, String interestCategoryId) {
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
        }

        /**
         * Build call for deleteInterestCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInterestCategoryCall(listId, interestCategoryId, _callback);
        }


        /**
         * Execute deleteInterestCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInterestCategoryWithHttpInfo(listId, interestCategoryId);
        }

        /**
         * Execute deleteInterestCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInterestCategoryWithHttpInfo(listId, interestCategoryId);
        }

        /**
         * Execute deleteInterestCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInterestCategoryAsync(listId, interestCategoryId, _callback);
        }
    }

    /**
     * Delete interest category
     * Delete a specific interest category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @return DeleteInterestCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInterestCategoryRequestBuilder deleteInterestCategory(String listId, String interestCategoryId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        return new DeleteInterestCategoryRequestBuilder(listId, interestCategoryId);
    }
    private okhttp3.Call deleteInterestInCategoryCall(String listId, String interestCategoryId, String interestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()))
            .replace("{" + "interest_id" + "}", localVarApiClient.escapeString(interestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInterestInCategoryValidateBeforeCall(String listId, String interestCategoryId, String interestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteInterestInCategory(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling deleteInterestInCategory(Async)");
        }

        // verify the required parameter 'interestId' is set
        if (interestId == null) {
            throw new ApiException("Missing the required parameter 'interestId' when calling deleteInterestInCategory(Async)");
        }

        return deleteInterestInCategoryCall(listId, interestCategoryId, interestId, _callback);

    }


    private ApiResponse<Void> deleteInterestInCategoryWithHttpInfo(String listId, String interestCategoryId, String interestId) throws ApiException {
        okhttp3.Call localVarCall = deleteInterestInCategoryValidateBeforeCall(listId, interestCategoryId, interestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInterestInCategoryAsync(String listId, String interestCategoryId, String interestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInterestInCategoryValidateBeforeCall(listId, interestCategoryId, interestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteInterestInCategoryRequestBuilder {
        private final String listId;
        private final String interestCategoryId;
        private final String interestId;

        private DeleteInterestInCategoryRequestBuilder(String listId, String interestCategoryId, String interestId) {
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
            this.interestId = interestId;
        }

        /**
         * Build call for deleteInterestInCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInterestInCategoryCall(listId, interestCategoryId, interestId, _callback);
        }


        /**
         * Execute deleteInterestInCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInterestInCategoryWithHttpInfo(listId, interestCategoryId, interestId);
        }

        /**
         * Execute deleteInterestInCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInterestInCategoryWithHttpInfo(listId, interestCategoryId, interestId);
        }

        /**
         * Execute deleteInterestInCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInterestInCategoryAsync(listId, interestCategoryId, interestId, _callback);
        }
    }

    /**
     * Delete interest in category
     * Delete interests or group names in a specific category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @param interestId The specific interest or &#39;group name&#39;. (required)
     * @return DeleteInterestInCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInterestInCategoryRequestBuilder deleteInterestInCategory(String listId, String interestCategoryId, String interestId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        if (interestId == null) throw new IllegalArgumentException("\"interestId\" is required but got null");
            

        return new DeleteInterestInCategoryRequestBuilder(listId, interestCategoryId, interestId);
    }
    private okhttp3.Call deleteListCall(String listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteListValidateBeforeCall(String listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteList(Async)");
        }

        return deleteListCall(listId, _callback);

    }


    private ApiResponse<Void> deleteListWithHttpInfo(String listId) throws ApiException {
        okhttp3.Call localVarCall = deleteListValidateBeforeCall(listId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteListAsync(String listId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteListValidateBeforeCall(listId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteListRequestBuilder {
        private final String listId;

        private DeleteListRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Build call for deleteList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteListCall(listId, _callback);
        }


        /**
         * Execute deleteList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteListWithHttpInfo(listId);
        }

        /**
         * Execute deleteList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteListWithHttpInfo(listId);
        }

        /**
         * Execute deleteList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteListAsync(listId, _callback);
        }
    }

    /**
     * Delete list
     * Delete a list from your Mailchimp account. If you delete a list, you&#39;ll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.
     * @param listId The unique ID for the list. (required)
     * @return DeleteListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteListRequestBuilder deleteList(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new DeleteListRequestBuilder(listId);
    }
    private okhttp3.Call deleteMergeFieldCall(String listId, String mergeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/merge-fields/{merge_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "merge_id" + "}", localVarApiClient.escapeString(mergeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMergeFieldValidateBeforeCall(String listId, String mergeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteMergeField(Async)");
        }

        // verify the required parameter 'mergeId' is set
        if (mergeId == null) {
            throw new ApiException("Missing the required parameter 'mergeId' when calling deleteMergeField(Async)");
        }

        return deleteMergeFieldCall(listId, mergeId, _callback);

    }


    private ApiResponse<Void> deleteMergeFieldWithHttpInfo(String listId, String mergeId) throws ApiException {
        okhttp3.Call localVarCall = deleteMergeFieldValidateBeforeCall(listId, mergeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMergeFieldAsync(String listId, String mergeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMergeFieldValidateBeforeCall(listId, mergeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMergeFieldRequestBuilder {
        private final String listId;
        private final String mergeId;

        private DeleteMergeFieldRequestBuilder(String listId, String mergeId) {
            this.listId = listId;
            this.mergeId = mergeId;
        }

        /**
         * Build call for deleteMergeField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMergeFieldCall(listId, mergeId, _callback);
        }


        /**
         * Execute deleteMergeField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMergeFieldWithHttpInfo(listId, mergeId);
        }

        /**
         * Execute deleteMergeField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMergeFieldWithHttpInfo(listId, mergeId);
        }

        /**
         * Execute deleteMergeField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMergeFieldAsync(listId, mergeId, _callback);
        }
    }

    /**
     * Delete merge field
     * Delete a specific merge field.
     * @param listId The unique ID for the list. (required)
     * @param mergeId The id for the merge field. (required)
     * @return DeleteMergeFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMergeFieldRequestBuilder deleteMergeField(String listId, String mergeId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (mergeId == null) throw new IllegalArgumentException("\"mergeId\" is required but got null");
            

        return new DeleteMergeFieldRequestBuilder(listId, mergeId);
    }
    private okhttp3.Call deleteNoteCall(String listId, String subscriberHash, String noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNoteValidateBeforeCall(String listId, String subscriberHash, String noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteNote(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling deleteNote(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteNote(Async)");
        }

        return deleteNoteCall(listId, subscriberHash, noteId, _callback);

    }


    private ApiResponse<Void> deleteNoteWithHttpInfo(String listId, String subscriberHash, String noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteNoteValidateBeforeCall(listId, subscriberHash, noteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteNoteAsync(String listId, String subscriberHash, String noteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNoteValidateBeforeCall(listId, subscriberHash, noteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteNoteRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private final String noteId;

        private DeleteNoteRequestBuilder(String listId, String subscriberHash, String noteId) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
            this.noteId = noteId;
        }

        /**
         * Build call for deleteNote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteNoteCall(listId, subscriberHash, noteId, _callback);
        }


        /**
         * Execute deleteNote request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteNoteWithHttpInfo(listId, subscriberHash, noteId);
        }

        /**
         * Execute deleteNote request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteNoteWithHttpInfo(listId, subscriberHash, noteId);
        }

        /**
         * Execute deleteNote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteNoteAsync(listId, subscriberHash, noteId, _callback);
        }
    }

    /**
     * Delete note
     * Delete a specific note for a specific list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @param noteId The id for the note. (required)
     * @return DeleteNoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteNoteRequestBuilder deleteNote(String listId, String subscriberHash, String noteId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        if (noteId == null) throw new IllegalArgumentException("\"noteId\" is required but got null");
            

        return new DeleteNoteRequestBuilder(listId, subscriberHash, noteId);
    }
    private okhttp3.Call deleteSegmentCall(String listId, String segmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSegmentValidateBeforeCall(String listId, String segmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteSegment(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling deleteSegment(Async)");
        }

        return deleteSegmentCall(listId, segmentId, _callback);

    }


    private ApiResponse<Void> deleteSegmentWithHttpInfo(String listId, String segmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteSegmentValidateBeforeCall(listId, segmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSegmentAsync(String listId, String segmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSegmentValidateBeforeCall(listId, segmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSegmentRequestBuilder {
        private final String listId;
        private final String segmentId;

        private DeleteSegmentRequestBuilder(String listId, String segmentId) {
            this.listId = listId;
            this.segmentId = segmentId;
        }

        /**
         * Build call for deleteSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSegmentCall(listId, segmentId, _callback);
        }


        /**
         * Execute deleteSegment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSegmentWithHttpInfo(listId, segmentId);
        }

        /**
         * Execute deleteSegment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSegmentWithHttpInfo(listId, segmentId);
        }

        /**
         * Execute deleteSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSegmentAsync(listId, segmentId, _callback);
        }
    }

    /**
     * Delete segment
     * Delete a specific segment in a list.
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @return DeleteSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSegmentRequestBuilder deleteSegment(String listId, String segmentId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        return new DeleteSegmentRequestBuilder(listId, segmentId);
    }
    private okhttp3.Call deleteWebhookCall(String listId, String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/webhooks/{webhook_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String listId, String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteWebhook(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(listId, webhookId, _callback);

    }


    private ApiResponse<Void> deleteWebhookWithHttpInfo(String listId, String webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(listId, webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWebhookAsync(String listId, String webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(listId, webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteWebhookRequestBuilder {
        private final String listId;
        private final String webhookId;

        private DeleteWebhookRequestBuilder(String listId, String webhookId) {
            this.listId = listId;
            this.webhookId = webhookId;
        }

        /**
         * Build call for deleteWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWebhookCall(listId, webhookId, _callback);
        }


        /**
         * Execute deleteWebhook request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWebhookWithHttpInfo(listId, webhookId);
        }

        /**
         * Execute deleteWebhook request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWebhookWithHttpInfo(listId, webhookId);
        }

        /**
         * Execute deleteWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWebhookAsync(listId, webhookId, _callback);
        }
    }

    /**
     * Delete webhook
     * Delete a specific webhook in a list.
     * @param listId The unique ID for the list. (required)
     * @param webhookId The webhook&#39;s id. (required)
     * @return DeleteWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWebhookRequestBuilder deleteWebhook(String listId, String webhookId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new DeleteWebhookRequestBuilder(listId, webhookId);
    }
    private okhttp3.Call getAbuseReportCall(String listId, String reportId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/abuse-reports/{report_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAbuseReportValidateBeforeCall(String listId, String reportId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getAbuseReport(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getAbuseReport(Async)");
        }

        return getAbuseReportCall(listId, reportId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ListsGetAbuseReportResponse> getAbuseReportWithHttpInfo(String listId, String reportId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAbuseReportValidateBeforeCall(listId, reportId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ListsGetAbuseReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAbuseReportAsync(String listId, String reportId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ListsGetAbuseReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAbuseReportValidateBeforeCall(listId, reportId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ListsGetAbuseReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAbuseReportRequestBuilder {
        private final String listId;
        private final String reportId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetAbuseReportRequestBuilder(String listId, String reportId) {
            this.listId = listId;
            this.reportId = reportId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAbuseReportRequestBuilder
         */
        public GetAbuseReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAbuseReportRequestBuilder
         */
        public GetAbuseReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetAbuseReportRequestBuilder
         */
        public GetAbuseReportRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetAbuseReportRequestBuilder
         */
        public GetAbuseReportRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAbuseReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAbuseReportCall(listId, reportId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getAbuseReport request
         * @return ListsGetAbuseReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetAbuseReportResponse execute() throws ApiException {
            ApiResponse<ListsGetAbuseReportResponse> localVarResp = getAbuseReportWithHttpInfo(listId, reportId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAbuseReport request with HTTP info returned
         * @return ApiResponse&lt;ListsGetAbuseReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetAbuseReportResponse> executeWithHttpInfo() throws ApiException {
            return getAbuseReportWithHttpInfo(listId, reportId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getAbuseReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetAbuseReportResponse> _callback) throws ApiException {
            return getAbuseReportAsync(listId, reportId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * Get abuse report
     * Get details about a specific abuse report.
     * @param listId The unique ID for the list. (required)
     * @param reportId The id for the abuse report. (required)
     * @return GetAbuseReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetAbuseReportRequestBuilder getAbuseReport(String listId, String reportId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetAbuseReportRequestBuilder(listId, reportId);
    }
    private okhttp3.Call getAllAbuseReportsCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/abuse-reports"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAbuseReportsValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getAllAbuseReports(Async)");
        }

        return getAllAbuseReportsCall(listId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ListsGetAllAbuseReportsResponse> getAllAbuseReportsWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAllAbuseReportsValidateBeforeCall(listId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ListsGetAllAbuseReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAbuseReportsAsync(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ListsGetAllAbuseReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAbuseReportsValidateBeforeCall(listId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ListsGetAllAbuseReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAbuseReportsRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetAllAbuseReportsRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllAbuseReportsRequestBuilder
         */
        public GetAllAbuseReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllAbuseReportsRequestBuilder
         */
        public GetAllAbuseReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetAllAbuseReportsRequestBuilder
         */
        public GetAllAbuseReportsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetAllAbuseReportsRequestBuilder
         */
        public GetAllAbuseReportsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAllAbuseReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAbuseReportsCall(listId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getAllAbuseReports request
         * @return ListsGetAllAbuseReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetAllAbuseReportsResponse execute() throws ApiException {
            ApiResponse<ListsGetAllAbuseReportsResponse> localVarResp = getAllAbuseReportsWithHttpInfo(listId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAbuseReports request with HTTP info returned
         * @return ApiResponse&lt;ListsGetAllAbuseReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetAllAbuseReportsResponse> executeWithHttpInfo() throws ApiException {
            return getAllAbuseReportsWithHttpInfo(listId, fields, excludeFields, count, offset);
        }

        /**
         * Execute getAllAbuseReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetAllAbuseReportsResponse> _callback) throws ApiException {
            return getAllAbuseReportsAsync(listId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List abuse reports
     * Get all abuse reports for a specific list.
     * @param listId The unique ID for the list. (required)
     * @return GetAllAbuseReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAbuseReportsRequestBuilder getAllAbuseReports(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetAllAbuseReportsRequestBuilder(listId);
    }
    private okhttp3.Call getAllInfoCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String beforeDateCreated, String sinceDateCreated, String beforeCampaignLastSent, String sinceCampaignLastSent, String email, String sortField, String sortDir, Boolean hasEcommerceStore, Boolean includeTotalContacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (beforeDateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_date_created", beforeDateCreated));
        }

        if (sinceDateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_date_created", sinceDateCreated));
        }

        if (beforeCampaignLastSent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_campaign_last_sent", beforeCampaignLastSent));
        }

        if (sinceCampaignLastSent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_campaign_last_sent", sinceCampaignLastSent));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (hasEcommerceStore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_ecommerce_store", hasEcommerceStore));
        }

        if (includeTotalContacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_total_contacts", includeTotalContacts));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInfoValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String beforeDateCreated, String sinceDateCreated, String beforeCampaignLastSent, String sinceCampaignLastSent, String email, String sortField, String sortDir, Boolean hasEcommerceStore, Boolean includeTotalContacts, final ApiCallback _callback) throws ApiException {
        return getAllInfoCall(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts, _callback);

    }


    private ApiResponse<ListsGetAllInfoResponse> getAllInfoWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String beforeDateCreated, String sinceDateCreated, String beforeCampaignLastSent, String sinceCampaignLastSent, String email, String sortField, String sortDir, Boolean hasEcommerceStore, Boolean includeTotalContacts) throws ApiException {
        okhttp3.Call localVarCall = getAllInfoValidateBeforeCall(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts, null);
        Type localVarReturnType = new TypeToken<ListsGetAllInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInfoAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String beforeDateCreated, String sinceDateCreated, String beforeCampaignLastSent, String sinceCampaignLastSent, String email, String sortField, String sortDir, Boolean hasEcommerceStore, Boolean includeTotalContacts, final ApiCallback<ListsGetAllInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInfoValidateBeforeCall(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts, _callback);
        Type localVarReturnType = new TypeToken<ListsGetAllInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllInfoRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String beforeDateCreated;
        private String sinceDateCreated;
        private String beforeCampaignLastSent;
        private String sinceCampaignLastSent;
        private String email;
        private String sortField;
        private String sortDir;
        private Boolean hasEcommerceStore;
        private Boolean includeTotalContacts;

        private GetAllInfoRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set beforeDateCreated
         * @param beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder beforeDateCreated(String beforeDateCreated) {
            this.beforeDateCreated = beforeDateCreated;
            return this;
        }
        
        /**
         * Set sinceDateCreated
         * @param sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder sinceDateCreated(String sinceDateCreated) {
            this.sinceDateCreated = sinceDateCreated;
            return this;
        }
        
        /**
         * Set beforeCampaignLastSent
         * @param beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder beforeCampaignLastSent(String beforeCampaignLastSent) {
            this.beforeCampaignLastSent = beforeCampaignLastSent;
            return this;
        }
        
        /**
         * Set sinceCampaignLastSent
         * @param sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder sinceCampaignLastSent(String sinceCampaignLastSent) {
            this.sinceCampaignLastSent = sinceCampaignLastSent;
            return this;
        }
        
        /**
         * Set email
         * @param email Restrict results to lists that include a specific subscriber&#39;s email address. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set hasEcommerceStore
         * @param hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder hasEcommerceStore(Boolean hasEcommerceStore) {
            this.hasEcommerceStore = hasEcommerceStore;
            return this;
        }
        
        /**
         * Set includeTotalContacts
         * @param includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state. (optional)
         * @return GetAllInfoRequestBuilder
         */
        public GetAllInfoRequestBuilder includeTotalContacts(Boolean includeTotalContacts) {
            this.includeTotalContacts = includeTotalContacts;
            return this;
        }
        
        /**
         * Build call for getAllInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInfoCall(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts, _callback);
        }


        /**
         * Execute getAllInfo request
         * @return ListsGetAllInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetAllInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetAllInfoResponse> localVarResp = getAllInfoWithHttpInfo(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetAllInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetAllInfoResponse> executeWithHttpInfo() throws ApiException {
            return getAllInfoWithHttpInfo(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts);
        }

        /**
         * Execute getAllInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetAllInfoResponse> _callback) throws ApiException {
            return getAllInfoAsync(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts, _callback);
        }
    }

    /**
     * Get lists info
     * Get information about all lists in the account.
     * @return GetAllInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllInfoRequestBuilder getAllInfo() throws IllegalArgumentException {
        return new GetAllInfoRequestBuilder();
    }
    private okhttp3.Call getGrowthHistoryByMonthCall(String listId, String month, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/growth-history/{month}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrowthHistoryByMonthValidateBeforeCall(String listId, String month, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getGrowthHistoryByMonth(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getGrowthHistoryByMonth(Async)");
        }

        return getGrowthHistoryByMonthCall(listId, month, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetGrowthHistoryByMonthResponse> getGrowthHistoryByMonthWithHttpInfo(String listId, String month, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getGrowthHistoryByMonthValidateBeforeCall(listId, month, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetGrowthHistoryByMonthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrowthHistoryByMonthAsync(String listId, String month, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetGrowthHistoryByMonthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrowthHistoryByMonthValidateBeforeCall(listId, month, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetGrowthHistoryByMonthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGrowthHistoryByMonthRequestBuilder {
        private final String listId;
        private final String month;
        private List<String> fields;
        private List<String> excludeFields;

        private GetGrowthHistoryByMonthRequestBuilder(String listId, String month) {
            this.listId = listId;
            this.month = month;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetGrowthHistoryByMonthRequestBuilder
         */
        public GetGrowthHistoryByMonthRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetGrowthHistoryByMonthRequestBuilder
         */
        public GetGrowthHistoryByMonthRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getGrowthHistoryByMonth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrowthHistoryByMonthCall(listId, month, fields, excludeFields, _callback);
        }


        /**
         * Execute getGrowthHistoryByMonth request
         * @return ListsGetGrowthHistoryByMonthResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetGrowthHistoryByMonthResponse execute() throws ApiException {
            ApiResponse<ListsGetGrowthHistoryByMonthResponse> localVarResp = getGrowthHistoryByMonthWithHttpInfo(listId, month, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGrowthHistoryByMonth request with HTTP info returned
         * @return ApiResponse&lt;ListsGetGrowthHistoryByMonthResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetGrowthHistoryByMonthResponse> executeWithHttpInfo() throws ApiException {
            return getGrowthHistoryByMonthWithHttpInfo(listId, month, fields, excludeFields);
        }

        /**
         * Execute getGrowthHistoryByMonth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetGrowthHistoryByMonthResponse> _callback) throws ApiException {
            return getGrowthHistoryByMonthAsync(listId, month, fields, excludeFields, _callback);
        }
    }

    /**
     * Get growth history by month
     * Get a summary of a specific list&#39;s growth activity for a specific month and year.
     * @param listId The unique ID for the list. (required)
     * @param month A specific month of list growth history. (required)
     * @return GetGrowthHistoryByMonthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetGrowthHistoryByMonthRequestBuilder getGrowthHistoryByMonth(String listId, String month) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        return new GetGrowthHistoryByMonthRequestBuilder(listId, month);
    }
    private okhttp3.Call getGrowthHistoryDataCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/growth-history"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrowthHistoryDataValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getGrowthHistoryData(Async)");
        }

        return getGrowthHistoryDataCall(listId, fields, excludeFields, count, offset, sortField, sortDir, _callback);

    }


    private ApiResponse<ListsGetGrowthHistoryDataResponse> getGrowthHistoryDataWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = getGrowthHistoryDataValidateBeforeCall(listId, fields, excludeFields, count, offset, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<ListsGetGrowthHistoryDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrowthHistoryDataAsync(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback<ListsGetGrowthHistoryDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrowthHistoryDataValidateBeforeCall(listId, fields, excludeFields, count, offset, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ListsGetGrowthHistoryDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGrowthHistoryDataRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String sortField;
        private String sortDir;

        private GetGrowthHistoryDataRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetGrowthHistoryDataRequestBuilder
         */
        public GetGrowthHistoryDataRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetGrowthHistoryDataRequestBuilder
         */
        public GetGrowthHistoryDataRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetGrowthHistoryDataRequestBuilder
         */
        public GetGrowthHistoryDataRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetGrowthHistoryDataRequestBuilder
         */
        public GetGrowthHistoryDataRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return GetGrowthHistoryDataRequestBuilder
         */
        public GetGrowthHistoryDataRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return GetGrowthHistoryDataRequestBuilder
         */
        public GetGrowthHistoryDataRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for getGrowthHistoryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrowthHistoryDataCall(listId, fields, excludeFields, count, offset, sortField, sortDir, _callback);
        }


        /**
         * Execute getGrowthHistoryData request
         * @return ListsGetGrowthHistoryDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetGrowthHistoryDataResponse execute() throws ApiException {
            ApiResponse<ListsGetGrowthHistoryDataResponse> localVarResp = getGrowthHistoryDataWithHttpInfo(listId, fields, excludeFields, count, offset, sortField, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGrowthHistoryData request with HTTP info returned
         * @return ApiResponse&lt;ListsGetGrowthHistoryDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetGrowthHistoryDataResponse> executeWithHttpInfo() throws ApiException {
            return getGrowthHistoryDataWithHttpInfo(listId, fields, excludeFields, count, offset, sortField, sortDir);
        }

        /**
         * Execute getGrowthHistoryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetGrowthHistoryDataResponse> _callback) throws ApiException {
            return getGrowthHistoryDataAsync(listId, fields, excludeFields, count, offset, sortField, sortDir, _callback);
        }
    }

    /**
     * List growth history data
     * Get a month-by-month summary of a specific list&#39;s growth activity.
     * @param listId The unique ID for the list. (required)
     * @return GetGrowthHistoryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetGrowthHistoryDataRequestBuilder getGrowthHistoryData(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetGrowthHistoryDataRequestBuilder(listId);
    }
    private okhttp3.Call getInterestCategoryInfoCall(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInterestCategoryInfoValidateBeforeCall(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getInterestCategoryInfo(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling getInterestCategoryInfo(Async)");
        }

        return getInterestCategoryInfoCall(listId, interestCategoryId, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetInterestCategoryInfoResponse> getInterestCategoryInfoWithHttpInfo(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getInterestCategoryInfoValidateBeforeCall(listId, interestCategoryId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetInterestCategoryInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInterestCategoryInfoAsync(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetInterestCategoryInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInterestCategoryInfoValidateBeforeCall(listId, interestCategoryId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetInterestCategoryInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInterestCategoryInfoRequestBuilder {
        private final String listId;
        private final String interestCategoryId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetInterestCategoryInfoRequestBuilder(String listId, String interestCategoryId) {
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInterestCategoryInfoRequestBuilder
         */
        public GetInterestCategoryInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInterestCategoryInfoRequestBuilder
         */
        public GetInterestCategoryInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getInterestCategoryInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInterestCategoryInfoCall(listId, interestCategoryId, fields, excludeFields, _callback);
        }


        /**
         * Execute getInterestCategoryInfo request
         * @return ListsGetInterestCategoryInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetInterestCategoryInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetInterestCategoryInfoResponse> localVarResp = getInterestCategoryInfoWithHttpInfo(listId, interestCategoryId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInterestCategoryInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetInterestCategoryInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetInterestCategoryInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInterestCategoryInfoWithHttpInfo(listId, interestCategoryId, fields, excludeFields);
        }

        /**
         * Execute getInterestCategoryInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetInterestCategoryInfoResponse> _callback) throws ApiException {
            return getInterestCategoryInfoAsync(listId, interestCategoryId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get interest category info
     * Get information about a specific interest category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @return GetInterestCategoryInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInterestCategoryInfoRequestBuilder getInterestCategoryInfo(String listId, String interestCategoryId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        return new GetInterestCategoryInfoRequestBuilder(listId, interestCategoryId);
    }
    private okhttp3.Call getInterestInCategoryCall(String listId, String interestCategoryId, String interestId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()))
            .replace("{" + "interest_id" + "}", localVarApiClient.escapeString(interestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInterestInCategoryValidateBeforeCall(String listId, String interestCategoryId, String interestId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getInterestInCategory(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling getInterestInCategory(Async)");
        }

        // verify the required parameter 'interestId' is set
        if (interestId == null) {
            throw new ApiException("Missing the required parameter 'interestId' when calling getInterestInCategory(Async)");
        }

        return getInterestInCategoryCall(listId, interestCategoryId, interestId, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetInterestInCategoryResponse> getInterestInCategoryWithHttpInfo(String listId, String interestCategoryId, String interestId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getInterestInCategoryValidateBeforeCall(listId, interestCategoryId, interestId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetInterestInCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInterestInCategoryAsync(String listId, String interestCategoryId, String interestId, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetInterestInCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInterestInCategoryValidateBeforeCall(listId, interestCategoryId, interestId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetInterestInCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInterestInCategoryRequestBuilder {
        private final String listId;
        private final String interestCategoryId;
        private final String interestId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetInterestInCategoryRequestBuilder(String listId, String interestCategoryId, String interestId) {
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
            this.interestId = interestId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInterestInCategoryRequestBuilder
         */
        public GetInterestInCategoryRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInterestInCategoryRequestBuilder
         */
        public GetInterestInCategoryRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getInterestInCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInterestInCategoryCall(listId, interestCategoryId, interestId, fields, excludeFields, _callback);
        }


        /**
         * Execute getInterestInCategory request
         * @return ListsGetInterestInCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetInterestInCategoryResponse execute() throws ApiException {
            ApiResponse<ListsGetInterestInCategoryResponse> localVarResp = getInterestInCategoryWithHttpInfo(listId, interestCategoryId, interestId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInterestInCategory request with HTTP info returned
         * @return ApiResponse&lt;ListsGetInterestInCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetInterestInCategoryResponse> executeWithHttpInfo() throws ApiException {
            return getInterestInCategoryWithHttpInfo(listId, interestCategoryId, interestId, fields, excludeFields);
        }

        /**
         * Execute getInterestInCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetInterestInCategoryResponse> _callback) throws ApiException {
            return getInterestInCategoryAsync(listId, interestCategoryId, interestId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get interest in category
     * Get interests or &#39;group names&#39; for a specific category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @param interestId The specific interest or &#39;group name&#39;. (required)
     * @return GetInterestInCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInterestInCategoryRequestBuilder getInterestInCategory(String listId, String interestCategoryId, String interestId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        if (interestId == null) throw new IllegalArgumentException("\"interestId\" is required but got null");
            

        return new GetInterestInCategoryRequestBuilder(listId, interestCategoryId, interestId);
    }
    private okhttp3.Call getListInfoCall(String listId, List<String> fields, List<String> excludeFields, Boolean includeTotalContacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (includeTotalContacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_total_contacts", includeTotalContacts));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListInfoValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Boolean includeTotalContacts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListInfo(Async)");
        }

        return getListInfoCall(listId, fields, excludeFields, includeTotalContacts, _callback);

    }


    private ApiResponse<ListsGetListInfoResponse> getListInfoWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Boolean includeTotalContacts) throws ApiException {
        okhttp3.Call localVarCall = getListInfoValidateBeforeCall(listId, fields, excludeFields, includeTotalContacts, null);
        Type localVarReturnType = new TypeToken<ListsGetListInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListInfoAsync(String listId, List<String> fields, List<String> excludeFields, Boolean includeTotalContacts, final ApiCallback<ListsGetListInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListInfoValidateBeforeCall(listId, fields, excludeFields, includeTotalContacts, _callback);
        Type localVarReturnType = new TypeToken<ListsGetListInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListInfoRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Boolean includeTotalContacts;

        private GetListInfoRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetListInfoRequestBuilder
         */
        public GetListInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetListInfoRequestBuilder
         */
        public GetListInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set includeTotalContacts
         * @param includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state. (optional)
         * @return GetListInfoRequestBuilder
         */
        public GetListInfoRequestBuilder includeTotalContacts(Boolean includeTotalContacts) {
            this.includeTotalContacts = includeTotalContacts;
            return this;
        }
        
        /**
         * Build call for getListInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListInfoCall(listId, fields, excludeFields, includeTotalContacts, _callback);
        }


        /**
         * Execute getListInfo request
         * @return ListsGetListInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetListInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetListInfoResponse> localVarResp = getListInfoWithHttpInfo(listId, fields, excludeFields, includeTotalContacts);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetListInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetListInfoResponse> executeWithHttpInfo() throws ApiException {
            return getListInfoWithHttpInfo(listId, fields, excludeFields, includeTotalContacts);
        }

        /**
         * Execute getListInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetListInfoResponse> _callback) throws ApiException {
            return getListInfoAsync(listId, fields, excludeFields, includeTotalContacts, _callback);
        }
    }

    /**
     * Get list info
     * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven&#39;t confirmed their subscription yet and unsubscribed or cleaned.
     * @param listId The unique ID for the list. (required)
     * @return GetListInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetListInfoRequestBuilder getListInfo(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetListInfoRequestBuilder(listId);
    }
    private okhttp3.Call getLocationsCall(String listId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/locations"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationsValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getLocations(Async)");
        }

        return getLocationsCall(listId, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetLocationsResponse> getLocationsWithHttpInfo(String listId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(listId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetLocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationsAsync(String listId, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetLocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(listId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetLocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationsRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetLocationsRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationsCall(listId, fields, excludeFields, _callback);
        }


        /**
         * Execute getLocations request
         * @return ListsGetLocationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetLocationsResponse execute() throws ApiException {
            ApiResponse<ListsGetLocationsResponse> localVarResp = getLocationsWithHttpInfo(listId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocations request with HTTP info returned
         * @return ApiResponse&lt;ListsGetLocationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetLocationsResponse> executeWithHttpInfo() throws ApiException {
            return getLocationsWithHttpInfo(listId, fields, excludeFields);
        }

        /**
         * Execute getLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetLocationsResponse> _callback) throws ApiException {
            return getLocationsAsync(listId, fields, excludeFields, _callback);
        }
    }

    /**
     * List locations
     * Get the locations (countries) that the list&#39;s subscribers have been tagged to based on geocoding their IP address.
     * @param listId The unique ID for the list. (required)
     * @return GetLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationsRequestBuilder getLocations(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetLocationsRequestBuilder(listId);
    }
    private okhttp3.Call getMemberEventsCall(String listId, String subscriberHash, Integer count, Integer offset, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/events"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberEventsValidateBeforeCall(String listId, String subscriberHash, Integer count, Integer offset, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMemberEvents(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getMemberEvents(Async)");
        }

        return getMemberEventsCall(listId, subscriberHash, count, offset, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetMemberEventsResponse> getMemberEventsWithHttpInfo(String listId, String subscriberHash, Integer count, Integer offset, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getMemberEventsValidateBeforeCall(listId, subscriberHash, count, offset, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetMemberEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberEventsAsync(String listId, String subscriberHash, Integer count, Integer offset, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetMemberEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberEventsValidateBeforeCall(listId, subscriberHash, count, offset, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMemberEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberEventsRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private Integer count;
        private Integer offset;
        private List<String> fields;
        private List<String> excludeFields;

        private GetMemberEventsRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetMemberEventsRequestBuilder
         */
        public GetMemberEventsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetMemberEventsRequestBuilder
         */
        public GetMemberEventsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberEventsRequestBuilder
         */
        public GetMemberEventsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberEventsRequestBuilder
         */
        public GetMemberEventsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getMemberEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberEventsCall(listId, subscriberHash, count, offset, fields, excludeFields, _callback);
        }


        /**
         * Execute getMemberEvents request
         * @return ListsGetMemberEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMemberEventsResponse execute() throws ApiException {
            ApiResponse<ListsGetMemberEventsResponse> localVarResp = getMemberEventsWithHttpInfo(listId, subscriberHash, count, offset, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberEvents request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMemberEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMemberEventsResponse> executeWithHttpInfo() throws ApiException {
            return getMemberEventsWithHttpInfo(listId, subscriberHash, count, offset, fields, excludeFields);
        }

        /**
         * Execute getMemberEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMemberEventsResponse> _callback) throws ApiException {
            return getMemberEventsAsync(listId, subscriberHash, count, offset, fields, excludeFields, _callback);
        }
    }

    /**
     * List member events
     * Get events for a contact.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return GetMemberEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberEventsRequestBuilder getMemberEvents(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetMemberEventsRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call getMemberGoalsCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/goals"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberGoalsValidateBeforeCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMemberGoals(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getMemberGoals(Async)");
        }

        return getMemberGoalsCall(listId, subscriberHash, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetMemberGoalsResponse> getMemberGoalsWithHttpInfo(String listId, String subscriberHash, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getMemberGoalsValidateBeforeCall(listId, subscriberHash, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetMemberGoalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberGoalsAsync(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetMemberGoalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberGoalsValidateBeforeCall(listId, subscriberHash, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMemberGoalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberGoalsRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;

        private GetMemberGoalsRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberGoalsRequestBuilder
         */
        public GetMemberGoalsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberGoalsRequestBuilder
         */
        public GetMemberGoalsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getMemberGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberGoalsCall(listId, subscriberHash, fields, excludeFields, _callback);
        }


        /**
         * Execute getMemberGoals request
         * @return ListsGetMemberGoalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMemberGoalsResponse execute() throws ApiException {
            ApiResponse<ListsGetMemberGoalsResponse> localVarResp = getMemberGoalsWithHttpInfo(listId, subscriberHash, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberGoals request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMemberGoalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMemberGoalsResponse> executeWithHttpInfo() throws ApiException {
            return getMemberGoalsWithHttpInfo(listId, subscriberHash, fields, excludeFields);
        }

        /**
         * Execute getMemberGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMemberGoalsResponse> _callback) throws ApiException {
            return getMemberGoalsAsync(listId, subscriberHash, fields, excludeFields, _callback);
        }
    }

    /**
     * List member goal events
     * Get the last 50 Goal events for a member on a specific list.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return GetMemberGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberGoalsRequestBuilder getMemberGoals(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetMemberGoalsRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call getMemberInfoCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberInfoValidateBeforeCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMemberInfo(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getMemberInfo(Async)");
        }

        return getMemberInfoCall(listId, subscriberHash, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetMemberInfoResponse> getMemberInfoWithHttpInfo(String listId, String subscriberHash, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getMemberInfoValidateBeforeCall(listId, subscriberHash, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetMemberInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberInfoAsync(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetMemberInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberInfoValidateBeforeCall(listId, subscriberHash, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMemberInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberInfoRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;

        private GetMemberInfoRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberInfoRequestBuilder
         */
        public GetMemberInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberInfoRequestBuilder
         */
        public GetMemberInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getMemberInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberInfoCall(listId, subscriberHash, fields, excludeFields, _callback);
        }


        /**
         * Execute getMemberInfo request
         * @return ListsGetMemberInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMemberInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetMemberInfoResponse> localVarResp = getMemberInfoWithHttpInfo(listId, subscriberHash, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMemberInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMemberInfoResponse> executeWithHttpInfo() throws ApiException {
            return getMemberInfoWithHttpInfo(listId, subscriberHash, fields, excludeFields);
        }

        /**
         * Execute getMemberInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMemberInfoResponse> _callback) throws ApiException {
            return getMemberInfoAsync(listId, subscriberHash, fields, excludeFields, _callback);
        }
    }

    /**
     * Get member info
     * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return GetMemberInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberInfoRequestBuilder getMemberInfo(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetMemberInfoRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call getMemberNoteCall(String listId, String subscriberHash, String noteId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberNoteValidateBeforeCall(String listId, String subscriberHash, String noteId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMemberNote(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getMemberNote(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getMemberNote(Async)");
        }

        return getMemberNoteCall(listId, subscriberHash, noteId, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetMemberNoteResponse> getMemberNoteWithHttpInfo(String listId, String subscriberHash, String noteId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getMemberNoteValidateBeforeCall(listId, subscriberHash, noteId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetMemberNoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberNoteAsync(String listId, String subscriberHash, String noteId, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetMemberNoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberNoteValidateBeforeCall(listId, subscriberHash, noteId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMemberNoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberNoteRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private final String noteId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetMemberNoteRequestBuilder(String listId, String subscriberHash, String noteId) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
            this.noteId = noteId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberNoteRequestBuilder
         */
        public GetMemberNoteRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberNoteRequestBuilder
         */
        public GetMemberNoteRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getMemberNote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberNoteCall(listId, subscriberHash, noteId, fields, excludeFields, _callback);
        }


        /**
         * Execute getMemberNote request
         * @return ListsGetMemberNoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMemberNoteResponse execute() throws ApiException {
            ApiResponse<ListsGetMemberNoteResponse> localVarResp = getMemberNoteWithHttpInfo(listId, subscriberHash, noteId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberNote request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMemberNoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMemberNoteResponse> executeWithHttpInfo() throws ApiException {
            return getMemberNoteWithHttpInfo(listId, subscriberHash, noteId, fields, excludeFields);
        }

        /**
         * Execute getMemberNote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMemberNoteResponse> _callback) throws ApiException {
            return getMemberNoteAsync(listId, subscriberHash, noteId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get member note
     * Get a specific note for a specific list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @param noteId The id for the note. (required)
     * @return GetMemberNoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberNoteRequestBuilder getMemberNote(String listId, String subscriberHash, String noteId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        if (noteId == null) throw new IllegalArgumentException("\"noteId\" is required but got null");
            

        return new GetMemberNoteRequestBuilder(listId, subscriberHash, noteId);
    }
    private okhttp3.Call getMemberNotesCall(String listId, String subscriberHash, String sortField, String sortDir, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/notes"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberNotesValidateBeforeCall(String listId, String subscriberHash, String sortField, String sortDir, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMemberNotes(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getMemberNotes(Async)");
        }

        return getMemberNotesCall(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ListsGetMemberNotesResponse> getMemberNotesWithHttpInfo(String listId, String subscriberHash, String sortField, String sortDir, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getMemberNotesValidateBeforeCall(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ListsGetMemberNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberNotesAsync(String listId, String subscriberHash, String sortField, String sortDir, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ListsGetMemberNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberNotesValidateBeforeCall(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMemberNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberNotesRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private String sortField;
        private String sortDir;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetMemberNotesRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set sortField
         * @param sortField Returns notes sorted by the specified field. (optional)
         * @return GetMemberNotesRequestBuilder
         */
        public GetMemberNotesRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return GetMemberNotesRequestBuilder
         */
        public GetMemberNotesRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberNotesRequestBuilder
         */
        public GetMemberNotesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberNotesRequestBuilder
         */
        public GetMemberNotesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetMemberNotesRequestBuilder
         */
        public GetMemberNotesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetMemberNotesRequestBuilder
         */
        public GetMemberNotesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getMemberNotes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberNotesCall(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getMemberNotes request
         * @return ListsGetMemberNotesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMemberNotesResponse execute() throws ApiException {
            ApiResponse<ListsGetMemberNotesResponse> localVarResp = getMemberNotesWithHttpInfo(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberNotes request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMemberNotesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMemberNotesResponse> executeWithHttpInfo() throws ApiException {
            return getMemberNotesWithHttpInfo(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset);
        }

        /**
         * Execute getMemberNotes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMemberNotesResponse> _callback) throws ApiException {
            return getMemberNotesAsync(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List recent member notes
     * Get recent notes for a specific list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return GetMemberNotesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberNotesRequestBuilder getMemberNotes(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetMemberNotesRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call getMemberTagsCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/tags"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberTagsValidateBeforeCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMemberTags(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getMemberTags(Async)");
        }

        return getMemberTagsCall(listId, subscriberHash, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ListsGetMemberTagsResponse> getMemberTagsWithHttpInfo(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getMemberTagsValidateBeforeCall(listId, subscriberHash, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ListsGetMemberTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberTagsAsync(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ListsGetMemberTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberTagsValidateBeforeCall(listId, subscriberHash, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMemberTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberTagsRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private GetMemberTagsRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberTagsRequestBuilder
         */
        public GetMemberTagsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMemberTagsRequestBuilder
         */
        public GetMemberTagsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetMemberTagsRequestBuilder
         */
        public GetMemberTagsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetMemberTagsRequestBuilder
         */
        public GetMemberTagsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getMemberTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberTagsCall(listId, subscriberHash, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute getMemberTags request
         * @return ListsGetMemberTagsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMemberTagsResponse execute() throws ApiException {
            ApiResponse<ListsGetMemberTagsResponse> localVarResp = getMemberTagsWithHttpInfo(listId, subscriberHash, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMemberTags request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMemberTagsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMemberTagsResponse> executeWithHttpInfo() throws ApiException {
            return getMemberTagsWithHttpInfo(listId, subscriberHash, fields, excludeFields, count, offset);
        }

        /**
         * Execute getMemberTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMemberTagsResponse> _callback) throws ApiException {
            return getMemberTagsAsync(listId, subscriberHash, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List member tags
     * Get the tags on a list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return GetMemberTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberTagsRequestBuilder getMemberTags(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetMemberTagsRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call getMembersInfoCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailType, String status, String sinceTimestampOpt, String beforeTimestampOpt, String sinceLastChanged, String beforeLastChanged, String uniqueEmailId, Boolean vipOnly, String interestCategoryId, String interestIds, String interestMatch, String sortField, String sortDir, Boolean sinceLastCampaign, String unsubscribedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (emailType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email_type", emailType));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sinceTimestampOpt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_timestamp_opt", sinceTimestampOpt));
        }

        if (beforeTimestampOpt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_timestamp_opt", beforeTimestampOpt));
        }

        if (sinceLastChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_last_changed", sinceLastChanged));
        }

        if (beforeLastChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_last_changed", beforeLastChanged));
        }

        if (uniqueEmailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique_email_id", uniqueEmailId));
        }

        if (vipOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vip_only", vipOnly));
        }

        if (interestCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interest_category_id", interestCategoryId));
        }

        if (interestIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interest_ids", interestIds));
        }

        if (interestMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interest_match", interestMatch));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (sinceLastCampaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_last_campaign", sinceLastCampaign));
        }

        if (unsubscribedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unsubscribed_since", unsubscribedSince));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersInfoValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailType, String status, String sinceTimestampOpt, String beforeTimestampOpt, String sinceLastChanged, String beforeLastChanged, String uniqueEmailId, Boolean vipOnly, String interestCategoryId, String interestIds, String interestMatch, String sortField, String sortDir, Boolean sinceLastCampaign, String unsubscribedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMembersInfo(Async)");
        }

        return getMembersInfoCall(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince, _callback);

    }


    private ApiResponse<ListsGetMembersInfoResponse> getMembersInfoWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailType, String status, String sinceTimestampOpt, String beforeTimestampOpt, String sinceLastChanged, String beforeLastChanged, String uniqueEmailId, Boolean vipOnly, String interestCategoryId, String interestIds, String interestMatch, String sortField, String sortDir, Boolean sinceLastCampaign, String unsubscribedSince) throws ApiException {
        okhttp3.Call localVarCall = getMembersInfoValidateBeforeCall(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince, null);
        Type localVarReturnType = new TypeToken<ListsGetMembersInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMembersInfoAsync(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String emailType, String status, String sinceTimestampOpt, String beforeTimestampOpt, String sinceLastChanged, String beforeLastChanged, String uniqueEmailId, Boolean vipOnly, String interestCategoryId, String interestIds, String interestMatch, String sortField, String sortDir, Boolean sinceLastCampaign, String unsubscribedSince, final ApiCallback<ListsGetMembersInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersInfoValidateBeforeCall(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMembersInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMembersInfoRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String emailType;
        private String status;
        private String sinceTimestampOpt;
        private String beforeTimestampOpt;
        private String sinceLastChanged;
        private String beforeLastChanged;
        private String uniqueEmailId;
        private Boolean vipOnly;
        private String interestCategoryId;
        private String interestIds;
        private String interestMatch;
        private String sortField;
        private String sortDir;
        private Boolean sinceLastCampaign;
        private String unsubscribedSince;

        private GetMembersInfoRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set emailType
         * @param emailType The email type. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder emailType(String emailType) {
            this.emailType = emailType;
            return this;
        }
        
        /**
         * Set status
         * @param status The subscriber&#39;s status. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set sinceTimestampOpt
         * @param sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder sinceTimestampOpt(String sinceTimestampOpt) {
            this.sinceTimestampOpt = sinceTimestampOpt;
            return this;
        }
        
        /**
         * Set beforeTimestampOpt
         * @param beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder beforeTimestampOpt(String beforeTimestampOpt) {
            this.beforeTimestampOpt = beforeTimestampOpt;
            return this;
        }
        
        /**
         * Set sinceLastChanged
         * @param sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder sinceLastChanged(String sinceLastChanged) {
            this.sinceLastChanged = sinceLastChanged;
            return this;
        }
        
        /**
         * Set beforeLastChanged
         * @param beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder beforeLastChanged(String beforeLastChanged) {
            this.beforeLastChanged = beforeLastChanged;
            return this;
        }
        
        /**
         * Set uniqueEmailId
         * @param uniqueEmailId A unique identifier for the email address across all Mailchimp lists. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder uniqueEmailId(String uniqueEmailId) {
            this.uniqueEmailId = uniqueEmailId;
            return this;
        }
        
        /**
         * Set vipOnly
         * @param vipOnly A filter to return only the list&#39;s VIP members. Passing &#x60;true&#x60; will restrict results to VIP list members, passing &#x60;false&#x60; will return all list members. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder vipOnly(Boolean vipOnly) {
            this.vipOnly = vipOnly;
            return this;
        }
        
        /**
         * Set interestCategoryId
         * @param interestCategoryId The unique id for the interest category. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder interestCategoryId(String interestCategoryId) {
            this.interestCategoryId = interestCategoryId;
            return this;
        }
        
        /**
         * Set interestIds
         * @param interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder interestIds(String interestIds) {
            this.interestIds = interestIds;
            return this;
        }
        
        /**
         * Set interestMatch
         * @param interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \&quot;any\&quot; will match a member with any of the interest supplied, \&quot;all\&quot; will only match members with every interest supplied, and \&quot;none\&quot; will match members without any of the interest supplied. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder interestMatch(String interestMatch) {
            this.interestMatch = interestMatch;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set sinceLastCampaign
         * @param sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder sinceLastCampaign(Boolean sinceLastCampaign) {
            this.sinceLastCampaign = sinceLastCampaign;
            return this;
        }
        
        /**
         * Set unsubscribedSince
         * @param unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error. (optional)
         * @return GetMembersInfoRequestBuilder
         */
        public GetMembersInfoRequestBuilder unsubscribedSince(String unsubscribedSince) {
            this.unsubscribedSince = unsubscribedSince;
            return this;
        }
        
        /**
         * Build call for getMembersInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersInfoCall(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince, _callback);
        }


        /**
         * Execute getMembersInfo request
         * @return ListsGetMembersInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMembersInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetMembersInfoResponse> localVarResp = getMembersInfoWithHttpInfo(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMembersInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMembersInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMembersInfoResponse> executeWithHttpInfo() throws ApiException {
            return getMembersInfoWithHttpInfo(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince);
        }

        /**
         * Execute getMembersInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMembersInfoResponse> _callback) throws ApiException {
            return getMembersInfoAsync(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince, _callback);
        }
    }

    /**
     * List members info
     * Get information about members in a specific Mailchimp list.
     * @param listId The unique ID for the list. (required)
     * @return GetMembersInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersInfoRequestBuilder getMembersInfo(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetMembersInfoRequestBuilder(listId);
    }
    private okhttp3.Call getMergeFieldInfoCall(String listId, String mergeId, List<String> excludeFields, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/merge-fields/{merge_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "merge_id" + "}", localVarApiClient.escapeString(mergeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMergeFieldInfoValidateBeforeCall(String listId, String mergeId, List<String> excludeFields, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getMergeFieldInfo(Async)");
        }

        // verify the required parameter 'mergeId' is set
        if (mergeId == null) {
            throw new ApiException("Missing the required parameter 'mergeId' when calling getMergeFieldInfo(Async)");
        }

        return getMergeFieldInfoCall(listId, mergeId, excludeFields, fields, _callback);

    }


    private ApiResponse<ListsGetMergeFieldInfoResponse> getMergeFieldInfoWithHttpInfo(String listId, String mergeId, List<String> excludeFields, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getMergeFieldInfoValidateBeforeCall(listId, mergeId, excludeFields, fields, null);
        Type localVarReturnType = new TypeToken<ListsGetMergeFieldInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMergeFieldInfoAsync(String listId, String mergeId, List<String> excludeFields, List<String> fields, final ApiCallback<ListsGetMergeFieldInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMergeFieldInfoValidateBeforeCall(listId, mergeId, excludeFields, fields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetMergeFieldInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMergeFieldInfoRequestBuilder {
        private final String listId;
        private final String mergeId;
        private List<String> excludeFields;
        private List<String> fields;

        private GetMergeFieldInfoRequestBuilder(String listId, String mergeId) {
            this.listId = listId;
            this.mergeId = mergeId;
        }

        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMergeFieldInfoRequestBuilder
         */
        public GetMergeFieldInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMergeFieldInfoRequestBuilder
         */
        public GetMergeFieldInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMergeFieldInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMergeFieldInfoCall(listId, mergeId, excludeFields, fields, _callback);
        }


        /**
         * Execute getMergeFieldInfo request
         * @return ListsGetMergeFieldInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetMergeFieldInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetMergeFieldInfoResponse> localVarResp = getMergeFieldInfoWithHttpInfo(listId, mergeId, excludeFields, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMergeFieldInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetMergeFieldInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetMergeFieldInfoResponse> executeWithHttpInfo() throws ApiException {
            return getMergeFieldInfoWithHttpInfo(listId, mergeId, excludeFields, fields);
        }

        /**
         * Execute getMergeFieldInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetMergeFieldInfoResponse> _callback) throws ApiException {
            return getMergeFieldInfoAsync(listId, mergeId, excludeFields, fields, _callback);
        }
    }

    /**
     * Get merge field
     * Get information about a specific merge field.
     * @param listId The unique ID for the list. (required)
     * @param mergeId The id for the merge field. (required)
     * @return GetMergeFieldInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetMergeFieldInfoRequestBuilder getMergeFieldInfo(String listId, String mergeId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (mergeId == null) throw new IllegalArgumentException("\"mergeId\" is required but got null");
            

        return new GetMergeFieldInfoRequestBuilder(listId, mergeId);
    }
    private okhttp3.Call getRecentActivityStatsCall(String listId, Integer count, Integer offset, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/activity"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentActivityStatsValidateBeforeCall(String listId, Integer count, Integer offset, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getRecentActivityStats(Async)");
        }

        return getRecentActivityStatsCall(listId, count, offset, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsGetRecentActivityStatsResponse> getRecentActivityStatsWithHttpInfo(String listId, Integer count, Integer offset, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getRecentActivityStatsValidateBeforeCall(listId, count, offset, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsGetRecentActivityStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentActivityStatsAsync(String listId, Integer count, Integer offset, List<String> fields, List<String> excludeFields, final ApiCallback<ListsGetRecentActivityStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentActivityStatsValidateBeforeCall(listId, count, offset, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsGetRecentActivityStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentActivityStatsRequestBuilder {
        private final String listId;
        private Integer count;
        private Integer offset;
        private List<String> fields;
        private List<String> excludeFields;

        private GetRecentActivityStatsRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetRecentActivityStatsRequestBuilder
         */
        public GetRecentActivityStatsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetRecentActivityStatsRequestBuilder
         */
        public GetRecentActivityStatsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetRecentActivityStatsRequestBuilder
         */
        public GetRecentActivityStatsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetRecentActivityStatsRequestBuilder
         */
        public GetRecentActivityStatsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getRecentActivityStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentActivityStatsCall(listId, count, offset, fields, excludeFields, _callback);
        }


        /**
         * Execute getRecentActivityStats request
         * @return ListsGetRecentActivityStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetRecentActivityStatsResponse execute() throws ApiException {
            ApiResponse<ListsGetRecentActivityStatsResponse> localVarResp = getRecentActivityStatsWithHttpInfo(listId, count, offset, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentActivityStats request with HTTP info returned
         * @return ApiResponse&lt;ListsGetRecentActivityStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetRecentActivityStatsResponse> executeWithHttpInfo() throws ApiException {
            return getRecentActivityStatsWithHttpInfo(listId, count, offset, fields, excludeFields);
        }

        /**
         * Execute getRecentActivityStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetRecentActivityStatsResponse> _callback) throws ApiException {
            return getRecentActivityStatsAsync(listId, count, offset, fields, excludeFields, _callback);
        }
    }

    /**
     * List recent activity
     * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.
     * @param listId The unique ID for the list. (required)
     * @return GetRecentActivityStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentActivityStatsRequestBuilder getRecentActivityStats(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetRecentActivityStatsRequestBuilder(listId);
    }
    private okhttp3.Call getSegmentInfoCall(String listId, String segmentId, List<String> fields, List<String> excludeFields, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (includeCleaned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_cleaned", includeCleaned));
        }

        if (includeTransactional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_transactional", includeTransactional));
        }

        if (includeUnsubscribed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unsubscribed", includeUnsubscribed));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSegmentInfoValidateBeforeCall(String listId, String segmentId, List<String> fields, List<String> excludeFields, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSegmentInfo(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling getSegmentInfo(Async)");
        }

        return getSegmentInfoCall(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed, _callback);

    }


    private ApiResponse<ListsGetSegmentInfoResponse> getSegmentInfoWithHttpInfo(String listId, String segmentId, List<String> fields, List<String> excludeFields, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed) throws ApiException {
        okhttp3.Call localVarCall = getSegmentInfoValidateBeforeCall(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed, null);
        Type localVarReturnType = new TypeToken<ListsGetSegmentInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSegmentInfoAsync(String listId, String segmentId, List<String> fields, List<String> excludeFields, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, final ApiCallback<ListsGetSegmentInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSegmentInfoValidateBeforeCall(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed, _callback);
        Type localVarReturnType = new TypeToken<ListsGetSegmentInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSegmentInfoRequestBuilder {
        private final String listId;
        private final String segmentId;
        private List<String> fields;
        private List<String> excludeFields;
        private Boolean includeCleaned;
        private Boolean includeTransactional;
        private Boolean includeUnsubscribed;

        private GetSegmentInfoRequestBuilder(String listId, String segmentId) {
            this.listId = listId;
            this.segmentId = segmentId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSegmentInfoRequestBuilder
         */
        public GetSegmentInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSegmentInfoRequestBuilder
         */
        public GetSegmentInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set includeCleaned
         * @param includeCleaned Include cleaned members in response (optional)
         * @return GetSegmentInfoRequestBuilder
         */
        public GetSegmentInfoRequestBuilder includeCleaned(Boolean includeCleaned) {
            this.includeCleaned = includeCleaned;
            return this;
        }
        
        /**
         * Set includeTransactional
         * @param includeTransactional Include transactional members in response (optional)
         * @return GetSegmentInfoRequestBuilder
         */
        public GetSegmentInfoRequestBuilder includeTransactional(Boolean includeTransactional) {
            this.includeTransactional = includeTransactional;
            return this;
        }
        
        /**
         * Set includeUnsubscribed
         * @param includeUnsubscribed Include unsubscribed members in response (optional)
         * @return GetSegmentInfoRequestBuilder
         */
        public GetSegmentInfoRequestBuilder includeUnsubscribed(Boolean includeUnsubscribed) {
            this.includeUnsubscribed = includeUnsubscribed;
            return this;
        }
        
        /**
         * Build call for getSegmentInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSegmentInfoCall(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed, _callback);
        }


        /**
         * Execute getSegmentInfo request
         * @return ListsGetSegmentInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetSegmentInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetSegmentInfoResponse> localVarResp = getSegmentInfoWithHttpInfo(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSegmentInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetSegmentInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetSegmentInfoResponse> executeWithHttpInfo() throws ApiException {
            return getSegmentInfoWithHttpInfo(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed);
        }

        /**
         * Execute getSegmentInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetSegmentInfoResponse> _callback) throws ApiException {
            return getSegmentInfoAsync(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed, _callback);
        }
    }

    /**
     * Get segment info
     * Get information about a specific segment.
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @return GetSegmentInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSegmentInfoRequestBuilder getSegmentInfo(String listId, String segmentId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        return new GetSegmentInfoRequestBuilder(listId, segmentId);
    }
    private okhttp3.Call getSegmentMembersCall(String listId, String segmentId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}/members"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (includeCleaned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_cleaned", includeCleaned));
        }

        if (includeTransactional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_transactional", includeTransactional));
        }

        if (includeUnsubscribed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unsubscribed", includeUnsubscribed));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSegmentMembersValidateBeforeCall(String listId, String segmentId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSegmentMembers(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling getSegmentMembers(Async)");
        }

        return getSegmentMembersCall(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed, _callback);

    }


    private ApiResponse<ListsGetSegmentMembersResponse> getSegmentMembersWithHttpInfo(String listId, String segmentId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed) throws ApiException {
        okhttp3.Call localVarCall = getSegmentMembersValidateBeforeCall(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed, null);
        Type localVarReturnType = new TypeToken<ListsGetSegmentMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSegmentMembersAsync(String listId, String segmentId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, final ApiCallback<ListsGetSegmentMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSegmentMembersValidateBeforeCall(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed, _callback);
        Type localVarReturnType = new TypeToken<ListsGetSegmentMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSegmentMembersRequestBuilder {
        private final String listId;
        private final String segmentId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private Boolean includeCleaned;
        private Boolean includeTransactional;
        private Boolean includeUnsubscribed;

        private GetSegmentMembersRequestBuilder(String listId, String segmentId) {
            this.listId = listId;
            this.segmentId = segmentId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set includeCleaned
         * @param includeCleaned Include cleaned members in response (optional)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder includeCleaned(Boolean includeCleaned) {
            this.includeCleaned = includeCleaned;
            return this;
        }
        
        /**
         * Set includeTransactional
         * @param includeTransactional Include transactional members in response (optional)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder includeTransactional(Boolean includeTransactional) {
            this.includeTransactional = includeTransactional;
            return this;
        }
        
        /**
         * Set includeUnsubscribed
         * @param includeUnsubscribed Include unsubscribed members in response (optional)
         * @return GetSegmentMembersRequestBuilder
         */
        public GetSegmentMembersRequestBuilder includeUnsubscribed(Boolean includeUnsubscribed) {
            this.includeUnsubscribed = includeUnsubscribed;
            return this;
        }
        
        /**
         * Build call for getSegmentMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSegmentMembersCall(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed, _callback);
        }


        /**
         * Execute getSegmentMembers request
         * @return ListsGetSegmentMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetSegmentMembersResponse execute() throws ApiException {
            ApiResponse<ListsGetSegmentMembersResponse> localVarResp = getSegmentMembersWithHttpInfo(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSegmentMembers request with HTTP info returned
         * @return ApiResponse&lt;ListsGetSegmentMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetSegmentMembersResponse> executeWithHttpInfo() throws ApiException {
            return getSegmentMembersWithHttpInfo(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed);
        }

        /**
         * Execute getSegmentMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetSegmentMembersResponse> _callback) throws ApiException {
            return getSegmentMembersAsync(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed, _callback);
        }
    }

    /**
     * List members in segment
     * Get information about members in a saved segment.
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @return GetSegmentMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSegmentMembersRequestBuilder getSegmentMembers(String listId, String segmentId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        return new GetSegmentMembersRequestBuilder(listId, segmentId);
    }
    private okhttp3.Call getSegmentsInfoCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String sinceCreatedAt, String beforeCreatedAt, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, String sinceUpdatedAt, String beforeUpdatedAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (sinceCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_created_at", sinceCreatedAt));
        }

        if (beforeCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_created_at", beforeCreatedAt));
        }

        if (includeCleaned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_cleaned", includeCleaned));
        }

        if (includeTransactional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_transactional", includeTransactional));
        }

        if (includeUnsubscribed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unsubscribed", includeUnsubscribed));
        }

        if (sinceUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_updated_at", sinceUpdatedAt));
        }

        if (beforeUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_updated_at", beforeUpdatedAt));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSegmentsInfoValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String sinceCreatedAt, String beforeCreatedAt, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, String sinceUpdatedAt, String beforeUpdatedAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSegmentsInfo(Async)");
        }

        return getSegmentsInfoCall(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt, _callback);

    }


    private ApiResponse<ListsGetSegmentsInfoResponse> getSegmentsInfoWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String sinceCreatedAt, String beforeCreatedAt, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, String sinceUpdatedAt, String beforeUpdatedAt) throws ApiException {
        okhttp3.Call localVarCall = getSegmentsInfoValidateBeforeCall(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt, null);
        Type localVarReturnType = new TypeToken<ListsGetSegmentsInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSegmentsInfoAsync(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String sinceCreatedAt, String beforeCreatedAt, Boolean includeCleaned, Boolean includeTransactional, Boolean includeUnsubscribed, String sinceUpdatedAt, String beforeUpdatedAt, final ApiCallback<ListsGetSegmentsInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSegmentsInfoValidateBeforeCall(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt, _callback);
        Type localVarReturnType = new TypeToken<ListsGetSegmentsInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSegmentsInfoRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;
        private String sinceCreatedAt;
        private String beforeCreatedAt;
        private Boolean includeCleaned;
        private Boolean includeTransactional;
        private Boolean includeUnsubscribed;
        private String sinceUpdatedAt;
        private String beforeUpdatedAt;

        private GetSegmentsInfoRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type Limit results based on segment type. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set sinceCreatedAt
         * @param sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder sinceCreatedAt(String sinceCreatedAt) {
            this.sinceCreatedAt = sinceCreatedAt;
            return this;
        }
        
        /**
         * Set beforeCreatedAt
         * @param beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder beforeCreatedAt(String beforeCreatedAt) {
            this.beforeCreatedAt = beforeCreatedAt;
            return this;
        }
        
        /**
         * Set includeCleaned
         * @param includeCleaned Include cleaned members in response (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder includeCleaned(Boolean includeCleaned) {
            this.includeCleaned = includeCleaned;
            return this;
        }
        
        /**
         * Set includeTransactional
         * @param includeTransactional Include transactional members in response (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder includeTransactional(Boolean includeTransactional) {
            this.includeTransactional = includeTransactional;
            return this;
        }
        
        /**
         * Set includeUnsubscribed
         * @param includeUnsubscribed Include unsubscribed members in response (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder includeUnsubscribed(Boolean includeUnsubscribed) {
            this.includeUnsubscribed = includeUnsubscribed;
            return this;
        }
        
        /**
         * Set sinceUpdatedAt
         * @param sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder sinceUpdatedAt(String sinceUpdatedAt) {
            this.sinceUpdatedAt = sinceUpdatedAt;
            return this;
        }
        
        /**
         * Set beforeUpdatedAt
         * @param beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetSegmentsInfoRequestBuilder
         */
        public GetSegmentsInfoRequestBuilder beforeUpdatedAt(String beforeUpdatedAt) {
            this.beforeUpdatedAt = beforeUpdatedAt;
            return this;
        }
        
        /**
         * Build call for getSegmentsInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSegmentsInfoCall(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt, _callback);
        }


        /**
         * Execute getSegmentsInfo request
         * @return ListsGetSegmentsInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetSegmentsInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetSegmentsInfoResponse> localVarResp = getSegmentsInfoWithHttpInfo(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSegmentsInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetSegmentsInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetSegmentsInfoResponse> executeWithHttpInfo() throws ApiException {
            return getSegmentsInfoWithHttpInfo(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt);
        }

        /**
         * Execute getSegmentsInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetSegmentsInfoResponse> _callback) throws ApiException {
            return getSegmentsInfoAsync(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt, _callback);
        }
    }

    /**
     * List segments
     * Get information about all available segments for a specific list.
     * @param listId The unique ID for the list. (required)
     * @return GetSegmentsInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSegmentsInfoRequestBuilder getSegmentsInfo(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetSegmentsInfoRequestBuilder(listId);
    }
    private okhttp3.Call getSignupFormsCall(String listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/signup-forms"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSignupFormsValidateBeforeCall(String listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSignupForms(Async)");
        }

        return getSignupFormsCall(listId, _callback);

    }


    private ApiResponse<ListsGetSignupFormsResponse> getSignupFormsWithHttpInfo(String listId) throws ApiException {
        okhttp3.Call localVarCall = getSignupFormsValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<ListsGetSignupFormsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSignupFormsAsync(String listId, final ApiCallback<ListsGetSignupFormsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSignupFormsValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<ListsGetSignupFormsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSignupFormsRequestBuilder {
        private final String listId;

        private GetSignupFormsRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Build call for getSignupForms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSignupFormsCall(listId, _callback);
        }


        /**
         * Execute getSignupForms request
         * @return ListsGetSignupFormsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetSignupFormsResponse execute() throws ApiException {
            ApiResponse<ListsGetSignupFormsResponse> localVarResp = getSignupFormsWithHttpInfo(listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSignupForms request with HTTP info returned
         * @return ApiResponse&lt;ListsGetSignupFormsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetSignupFormsResponse> executeWithHttpInfo() throws ApiException {
            return getSignupFormsWithHttpInfo(listId);
        }

        /**
         * Execute getSignupForms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetSignupFormsResponse> _callback) throws ApiException {
            return getSignupFormsAsync(listId, _callback);
        }
    }

    /**
     * List signup forms
     * Get signup forms for a specific list.
     * @param listId The unique ID for the list. (required)
     * @return GetSignupFormsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSignupFormsRequestBuilder getSignupForms(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetSignupFormsRequestBuilder(listId);
    }
    private okhttp3.Call getSurveyDetailsCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/surveys/{survey_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSurveyDetailsValidateBeforeCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSurveyDetails(Async)");
        }

        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling getSurveyDetails(Async)");
        }

        return getSurveyDetailsCall(listId, surveyId, _callback);

    }


    private ApiResponse<Void> getSurveyDetailsWithHttpInfo(String listId, String surveyId) throws ApiException {
        okhttp3.Call localVarCall = getSurveyDetailsValidateBeforeCall(listId, surveyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSurveyDetailsAsync(String listId, String surveyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSurveyDetailsValidateBeforeCall(listId, surveyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSurveyDetailsRequestBuilder {
        private final String listId;
        private final String surveyId;

        private GetSurveyDetailsRequestBuilder(String listId, String surveyId) {
            this.listId = listId;
            this.surveyId = surveyId;
        }

        /**
         * Build call for getSurveyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSurveyDetailsCall(listId, surveyId, _callback);
        }


        /**
         * Execute getSurveyDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSurveyDetailsWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute getSurveyDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSurveyDetailsWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute getSurveyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSurveyDetailsAsync(listId, surveyId, _callback);
        }
    }

    /**
     * Get survey
     * Get details about a specific survey.
     * @param listId The unique ID for the list. (required)
     * @param surveyId The ID of the survey. (required)
     * @return GetSurveyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSurveyDetailsRequestBuilder getSurveyDetails(String listId, String surveyId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new GetSurveyDetailsRequestBuilder(listId, surveyId);
    }
    private okhttp3.Call getSurveysInfoCall(String listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/surveys"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSurveysInfoValidateBeforeCall(String listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSurveysInfo(Async)");
        }

        return getSurveysInfoCall(listId, _callback);

    }


    private ApiResponse<Void> getSurveysInfoWithHttpInfo(String listId) throws ApiException {
        okhttp3.Call localVarCall = getSurveysInfoValidateBeforeCall(listId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSurveysInfoAsync(String listId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSurveysInfoValidateBeforeCall(listId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSurveysInfoRequestBuilder {
        private final String listId;

        private GetSurveysInfoRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Build call for getSurveysInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSurveysInfoCall(listId, _callback);
        }


        /**
         * Execute getSurveysInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSurveysInfoWithHttpInfo(listId);
        }

        /**
         * Execute getSurveysInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSurveysInfoWithHttpInfo(listId);
        }

        /**
         * Execute getSurveysInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSurveysInfoAsync(listId, _callback);
        }
    }

    /**
     * Get information about all surveys for a list
     * Get information about all available surveys for a specific list.
     * @param listId The unique ID for the list. (required)
     * @return GetSurveysInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSurveysInfoRequestBuilder getSurveysInfo(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetSurveysInfoRequestBuilder(listId);
    }
    private okhttp3.Call getWebhookInfoCall(String listId, String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/webhooks/{webhook_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookInfoValidateBeforeCall(String listId, String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getWebhookInfo(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhookInfo(Async)");
        }

        return getWebhookInfoCall(listId, webhookId, _callback);

    }


    private ApiResponse<ListsGetWebhookInfoResponse> getWebhookInfoWithHttpInfo(String listId, String webhookId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookInfoValidateBeforeCall(listId, webhookId, null);
        Type localVarReturnType = new TypeToken<ListsGetWebhookInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookInfoAsync(String listId, String webhookId, final ApiCallback<ListsGetWebhookInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookInfoValidateBeforeCall(listId, webhookId, _callback);
        Type localVarReturnType = new TypeToken<ListsGetWebhookInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebhookInfoRequestBuilder {
        private final String listId;
        private final String webhookId;

        private GetWebhookInfoRequestBuilder(String listId, String webhookId) {
            this.listId = listId;
            this.webhookId = webhookId;
        }

        /**
         * Build call for getWebhookInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookInfoCall(listId, webhookId, _callback);
        }


        /**
         * Execute getWebhookInfo request
         * @return ListsGetWebhookInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetWebhookInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetWebhookInfoResponse> localVarResp = getWebhookInfoWithHttpInfo(listId, webhookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebhookInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetWebhookInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetWebhookInfoResponse> executeWithHttpInfo() throws ApiException {
            return getWebhookInfoWithHttpInfo(listId, webhookId);
        }

        /**
         * Execute getWebhookInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetWebhookInfoResponse> _callback) throws ApiException {
            return getWebhookInfoAsync(listId, webhookId, _callback);
        }
    }

    /**
     * Get webhook info
     * Get information about a specific webhook.
     * @param listId The unique ID for the list. (required)
     * @param webhookId The webhook&#39;s id. (required)
     * @return GetWebhookInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetWebhookInfoRequestBuilder getWebhookInfo(String listId, String webhookId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new GetWebhookInfoRequestBuilder(listId, webhookId);
    }
    private okhttp3.Call getWebhooksInfoCall(String listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/webhooks"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhooksInfoValidateBeforeCall(String listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getWebhooksInfo(Async)");
        }

        return getWebhooksInfoCall(listId, _callback);

    }


    private ApiResponse<ListsGetWebhooksInfoResponse> getWebhooksInfoWithHttpInfo(String listId) throws ApiException {
        okhttp3.Call localVarCall = getWebhooksInfoValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<ListsGetWebhooksInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhooksInfoAsync(String listId, final ApiCallback<ListsGetWebhooksInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhooksInfoValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<ListsGetWebhooksInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebhooksInfoRequestBuilder {
        private final String listId;

        private GetWebhooksInfoRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Build call for getWebhooksInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhooksInfoCall(listId, _callback);
        }


        /**
         * Execute getWebhooksInfo request
         * @return ListsGetWebhooksInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsGetWebhooksInfoResponse execute() throws ApiException {
            ApiResponse<ListsGetWebhooksInfoResponse> localVarResp = getWebhooksInfoWithHttpInfo(listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebhooksInfo request with HTTP info returned
         * @return ApiResponse&lt;ListsGetWebhooksInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsGetWebhooksInfoResponse> executeWithHttpInfo() throws ApiException {
            return getWebhooksInfoWithHttpInfo(listId);
        }

        /**
         * Execute getWebhooksInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsGetWebhooksInfoResponse> _callback) throws ApiException {
            return getWebhooksInfoAsync(listId, _callback);
        }
    }

    /**
     * List webhooks
     * Get information about all webhooks for a specific list.
     * @param listId The unique ID for the list. (required)
     * @return GetWebhooksInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetWebhooksInfoRequestBuilder getWebhooksInfo(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new GetWebhooksInfoRequestBuilder(listId);
    }
    private okhttp3.Call listCategoryInterestsCall(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}/interests"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoryInterestsValidateBeforeCall(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listCategoryInterests(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling listCategoryInterests(Async)");
        }

        return listCategoryInterestsCall(listId, interestCategoryId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ListsListCategoryInterestsResponse> listCategoryInterestsWithHttpInfo(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listCategoryInterestsValidateBeforeCall(listId, interestCategoryId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ListsListCategoryInterestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoryInterestsAsync(String listId, String interestCategoryId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ListsListCategoryInterestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoryInterestsValidateBeforeCall(listId, interestCategoryId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ListsListCategoryInterestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoryInterestsRequestBuilder {
        private final String listId;
        private final String interestCategoryId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListCategoryInterestsRequestBuilder(String listId, String interestCategoryId) {
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCategoryInterestsRequestBuilder
         */
        public ListCategoryInterestsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCategoryInterestsRequestBuilder
         */
        public ListCategoryInterestsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListCategoryInterestsRequestBuilder
         */
        public ListCategoryInterestsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListCategoryInterestsRequestBuilder
         */
        public ListCategoryInterestsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listCategoryInterests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoryInterestsCall(listId, interestCategoryId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listCategoryInterests request
         * @return ListsListCategoryInterestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsListCategoryInterestsResponse execute() throws ApiException {
            ApiResponse<ListsListCategoryInterestsResponse> localVarResp = listCategoryInterestsWithHttpInfo(listId, interestCategoryId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategoryInterests request with HTTP info returned
         * @return ApiResponse&lt;ListsListCategoryInterestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsListCategoryInterestsResponse> executeWithHttpInfo() throws ApiException {
            return listCategoryInterestsWithHttpInfo(listId, interestCategoryId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listCategoryInterests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsListCategoryInterestsResponse> _callback) throws ApiException {
            return listCategoryInterestsAsync(listId, interestCategoryId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List interests in category
     * Get a list of this category&#39;s interests.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @return ListCategoryInterestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoryInterestsRequestBuilder listCategoryInterests(String listId, String interestCategoryId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        return new ListCategoryInterestsRequestBuilder(listId, interestCategoryId);
    }
    private okhttp3.Call listInterestCategoriesCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInterestCategoriesValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listInterestCategories(Async)");
        }

        return listInterestCategoriesCall(listId, fields, excludeFields, count, offset, type, _callback);

    }


    private ApiResponse<ListsListInterestCategoriesResponse> listInterestCategoriesWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type) throws ApiException {
        okhttp3.Call localVarCall = listInterestCategoriesValidateBeforeCall(listId, fields, excludeFields, count, offset, type, null);
        Type localVarReturnType = new TypeToken<ListsListInterestCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInterestCategoriesAsync(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, final ApiCallback<ListsListInterestCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInterestCategoriesValidateBeforeCall(listId, fields, excludeFields, count, offset, type, _callback);
        Type localVarReturnType = new TypeToken<ListsListInterestCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInterestCategoriesRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;

        private ListInterestCategoriesRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListInterestCategoriesRequestBuilder
         */
        public ListInterestCategoriesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListInterestCategoriesRequestBuilder
         */
        public ListInterestCategoriesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListInterestCategoriesRequestBuilder
         */
        public ListInterestCategoriesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListInterestCategoriesRequestBuilder
         */
        public ListInterestCategoriesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type Restrict results a type of interest group (optional)
         * @return ListInterestCategoriesRequestBuilder
         */
        public ListInterestCategoriesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for listInterestCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInterestCategoriesCall(listId, fields, excludeFields, count, offset, type, _callback);
        }


        /**
         * Execute listInterestCategories request
         * @return ListsListInterestCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsListInterestCategoriesResponse execute() throws ApiException {
            ApiResponse<ListsListInterestCategoriesResponse> localVarResp = listInterestCategoriesWithHttpInfo(listId, fields, excludeFields, count, offset, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInterestCategories request with HTTP info returned
         * @return ApiResponse&lt;ListsListInterestCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsListInterestCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return listInterestCategoriesWithHttpInfo(listId, fields, excludeFields, count, offset, type);
        }

        /**
         * Execute listInterestCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsListInterestCategoriesResponse> _callback) throws ApiException {
            return listInterestCategoriesAsync(listId, fields, excludeFields, count, offset, type, _callback);
        }
    }

    /**
     * List interest categories
     * Get information about a list&#39;s interest categories.
     * @param listId The unique ID for the list. (required)
     * @return ListInterestCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListInterestCategoriesRequestBuilder listInterestCategories(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new ListInterestCategoriesRequestBuilder(listId);
    }
    private okhttp3.Call listMergeFieldsCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, Boolean required, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/merge-fields"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMergeFieldsValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, Boolean required, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listMergeFields(Async)");
        }

        return listMergeFieldsCall(listId, fields, excludeFields, count, offset, type, required, _callback);

    }


    private ApiResponse<ListsListMergeFieldsResponse> listMergeFieldsWithHttpInfo(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, Boolean required) throws ApiException {
        okhttp3.Call localVarCall = listMergeFieldsValidateBeforeCall(listId, fields, excludeFields, count, offset, type, required, null);
        Type localVarReturnType = new TypeToken<ListsListMergeFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMergeFieldsAsync(String listId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, Boolean required, final ApiCallback<ListsListMergeFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMergeFieldsValidateBeforeCall(listId, fields, excludeFields, count, offset, type, required, _callback);
        Type localVarReturnType = new TypeToken<ListsListMergeFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMergeFieldsRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;
        private Boolean required;

        private ListMergeFieldsRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListMergeFieldsRequestBuilder
         */
        public ListMergeFieldsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListMergeFieldsRequestBuilder
         */
        public ListMergeFieldsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListMergeFieldsRequestBuilder
         */
        public ListMergeFieldsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListMergeFieldsRequestBuilder
         */
        public ListMergeFieldsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type The merge field type. (optional)
         * @return ListMergeFieldsRequestBuilder
         */
        public ListMergeFieldsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set required
         * @param required Whether it&#39;s a required merge field. (optional)
         * @return ListMergeFieldsRequestBuilder
         */
        public ListMergeFieldsRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Build call for listMergeFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMergeFieldsCall(listId, fields, excludeFields, count, offset, type, required, _callback);
        }


        /**
         * Execute listMergeFields request
         * @return ListsListMergeFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsListMergeFieldsResponse execute() throws ApiException {
            ApiResponse<ListsListMergeFieldsResponse> localVarResp = listMergeFieldsWithHttpInfo(listId, fields, excludeFields, count, offset, type, required);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMergeFields request with HTTP info returned
         * @return ApiResponse&lt;ListsListMergeFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsListMergeFieldsResponse> executeWithHttpInfo() throws ApiException {
            return listMergeFieldsWithHttpInfo(listId, fields, excludeFields, count, offset, type, required);
        }

        /**
         * Execute listMergeFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsListMergeFieldsResponse> _callback) throws ApiException {
            return listMergeFieldsAsync(listId, fields, excludeFields, count, offset, type, required, _callback);
        }
    }

    /**
     * List merge fields
     * Get a list of all merge fields for an audience.
     * @param listId The unique ID for the list. (required)
     * @return ListMergeFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListMergeFieldsRequestBuilder listMergeFields(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new ListMergeFieldsRequestBuilder(listId);
    }
    private okhttp3.Call listTopEmailClientsCall(String listId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/clients"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTopEmailClientsValidateBeforeCall(String listId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listTopEmailClients(Async)");
        }

        return listTopEmailClientsCall(listId, fields, excludeFields, _callback);

    }


    private ApiResponse<ListsListTopEmailClientsResponse> listTopEmailClientsWithHttpInfo(String listId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listTopEmailClientsValidateBeforeCall(listId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ListsListTopEmailClientsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTopEmailClientsAsync(String listId, List<String> fields, List<String> excludeFields, final ApiCallback<ListsListTopEmailClientsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTopEmailClientsValidateBeforeCall(listId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ListsListTopEmailClientsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTopEmailClientsRequestBuilder {
        private final String listId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListTopEmailClientsRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListTopEmailClientsRequestBuilder
         */
        public ListTopEmailClientsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListTopEmailClientsRequestBuilder
         */
        public ListTopEmailClientsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listTopEmailClients
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTopEmailClientsCall(listId, fields, excludeFields, _callback);
        }


        /**
         * Execute listTopEmailClients request
         * @return ListsListTopEmailClientsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsListTopEmailClientsResponse execute() throws ApiException {
            ApiResponse<ListsListTopEmailClientsResponse> localVarResp = listTopEmailClientsWithHttpInfo(listId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTopEmailClients request with HTTP info returned
         * @return ApiResponse&lt;ListsListTopEmailClientsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsListTopEmailClientsResponse> executeWithHttpInfo() throws ApiException {
            return listTopEmailClientsWithHttpInfo(listId, fields, excludeFields);
        }

        /**
         * Execute listTopEmailClients request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsListTopEmailClientsResponse> _callback) throws ApiException {
            return listTopEmailClientsAsync(listId, fields, excludeFields, _callback);
        }
    }

    /**
     * List top email clients
     * Get a list of the top email clients based on user-agent strings.
     * @param listId The unique ID for the list. (required)
     * @return ListTopEmailClientsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListTopEmailClientsRequestBuilder listTopEmailClients(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new ListTopEmailClientsRequestBuilder(listId);
    }
    private okhttp3.Call removeMemberFromSegmentCall(String listId, String segmentId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberFromSegmentValidateBeforeCall(String listId, String segmentId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling removeMemberFromSegment(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling removeMemberFromSegment(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling removeMemberFromSegment(Async)");
        }

        return removeMemberFromSegmentCall(listId, segmentId, subscriberHash, _callback);

    }


    private ApiResponse<Void> removeMemberFromSegmentWithHttpInfo(String listId, String segmentId, String subscriberHash) throws ApiException {
        okhttp3.Call localVarCall = removeMemberFromSegmentValidateBeforeCall(listId, segmentId, subscriberHash, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMemberFromSegmentAsync(String listId, String segmentId, String subscriberHash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberFromSegmentValidateBeforeCall(listId, segmentId, subscriberHash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMemberFromSegmentRequestBuilder {
        private final String listId;
        private final String segmentId;
        private final String subscriberHash;

        private RemoveMemberFromSegmentRequestBuilder(String listId, String segmentId, String subscriberHash) {
            this.listId = listId;
            this.segmentId = segmentId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Build call for removeMemberFromSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberFromSegmentCall(listId, segmentId, subscriberHash, _callback);
        }


        /**
         * Execute removeMemberFromSegment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMemberFromSegmentWithHttpInfo(listId, segmentId, subscriberHash);
        }

        /**
         * Execute removeMemberFromSegment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMemberFromSegmentWithHttpInfo(listId, segmentId, subscriberHash);
        }

        /**
         * Execute removeMemberFromSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMemberFromSegmentAsync(listId, segmentId, subscriberHash, _callback);
        }
    }

    /**
     * Remove list member from segment
     * Remove a member from the specified static segment.
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return RemoveMemberFromSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberFromSegmentRequestBuilder removeMemberFromSegment(String listId, String segmentId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new RemoveMemberFromSegmentRequestBuilder(listId, segmentId, subscriberHash);
    }
    private okhttp3.Call removeMemberPermanentCall(String listId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberPermanentValidateBeforeCall(String listId, String subscriberHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling removeMemberPermanent(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling removeMemberPermanent(Async)");
        }

        return removeMemberPermanentCall(listId, subscriberHash, _callback);

    }


    private ApiResponse<Void> removeMemberPermanentWithHttpInfo(String listId, String subscriberHash) throws ApiException {
        okhttp3.Call localVarCall = removeMemberPermanentValidateBeforeCall(listId, subscriberHash, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMemberPermanentAsync(String listId, String subscriberHash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberPermanentValidateBeforeCall(listId, subscriberHash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMemberPermanentRequestBuilder {
        private final String listId;
        private final String subscriberHash;

        private RemoveMemberPermanentRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Build call for removeMemberPermanent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberPermanentCall(listId, subscriberHash, _callback);
        }


        /**
         * Execute removeMemberPermanent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMemberPermanentWithHttpInfo(listId, subscriberHash);
        }

        /**
         * Execute removeMemberPermanent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMemberPermanentWithHttpInfo(listId, subscriberHash);
        }

        /**
         * Execute removeMemberPermanent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMemberPermanentAsync(listId, subscriberHash, _callback);
        }
    }

    /**
     * Delete list member
     * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return RemoveMemberPermanentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberPermanentRequestBuilder removeMemberPermanent(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new RemoveMemberPermanentRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call searchTagsByNameCall(String listId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/tag-search"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTagsByNameValidateBeforeCall(String listId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling searchTagsByName(Async)");
        }

        return searchTagsByNameCall(listId, name, _callback);

    }


    private ApiResponse<ListsSearchTagsByNameResponse> searchTagsByNameWithHttpInfo(String listId, String name) throws ApiException {
        okhttp3.Call localVarCall = searchTagsByNameValidateBeforeCall(listId, name, null);
        Type localVarReturnType = new TypeToken<ListsSearchTagsByNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchTagsByNameAsync(String listId, String name, final ApiCallback<ListsSearchTagsByNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTagsByNameValidateBeforeCall(listId, name, _callback);
        Type localVarReturnType = new TypeToken<ListsSearchTagsByNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchTagsByNameRequestBuilder {
        private final String listId;
        private String name;

        private SearchTagsByNameRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set name
         * @param name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned. (optional)
         * @return SearchTagsByNameRequestBuilder
         */
        public SearchTagsByNameRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for searchTagsByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchTagsByNameCall(listId, name, _callback);
        }


        /**
         * Execute searchTagsByName request
         * @return ListsSearchTagsByNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsSearchTagsByNameResponse execute() throws ApiException {
            ApiResponse<ListsSearchTagsByNameResponse> localVarResp = searchTagsByNameWithHttpInfo(listId, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchTagsByName request with HTTP info returned
         * @return ApiResponse&lt;ListsSearchTagsByNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsSearchTagsByNameResponse> executeWithHttpInfo() throws ApiException {
            return searchTagsByNameWithHttpInfo(listId, name);
        }

        /**
         * Execute searchTagsByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsSearchTagsByNameResponse> _callback) throws ApiException {
            return searchTagsByNameAsync(listId, name, _callback);
        }
    }

    /**
     * Search for tags on a list by name.
     * Search for tags on a list by name. If no name is provided, will return all tags on the list.
     * @param listId The unique ID for the list. (required)
     * @return SearchTagsByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SearchTagsByNameRequestBuilder searchTagsByName(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new SearchTagsByNameRequestBuilder(listId);
    }
    private okhttp3.Call updateInterestCategoryCall(String listId, String interestCategoryId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddInterestCategoryRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInterestCategoryValidateBeforeCall(String listId, String interestCategoryId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateInterestCategory(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling updateInterestCategory(Async)");
        }

        // verify the required parameter 'listsAddInterestCategoryRequest' is set
        if (listsAddInterestCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddInterestCategoryRequest' when calling updateInterestCategory(Async)");
        }

        return updateInterestCategoryCall(listId, interestCategoryId, listsAddInterestCategoryRequest, _callback);

    }


    private ApiResponse<ListsUpdateInterestCategoryResponse> updateInterestCategoryWithHttpInfo(String listId, String interestCategoryId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInterestCategoryValidateBeforeCall(listId, interestCategoryId, listsAddInterestCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateInterestCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInterestCategoryAsync(String listId, String interestCategoryId, ListsAddInterestCategoryRequest listsAddInterestCategoryRequest, final ApiCallback<ListsUpdateInterestCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInterestCategoryValidateBeforeCall(listId, interestCategoryId, listsAddInterestCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateInterestCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInterestCategoryRequestBuilder {
        private final String title;
        private final String type;
        private final String listId;
        private final String interestCategoryId;
        private Integer displayOrder;

        private UpdateInterestCategoryRequestBuilder(String title, String type, String listId, String interestCategoryId) {
            this.title = title;
            this.type = type;
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
        }

        /**
         * Set displayOrder
         * @param displayOrder The order that the categories are displayed in the list. Lower numbers display first. (optional)
         * @return UpdateInterestCategoryRequestBuilder
         */
        public UpdateInterestCategoryRequestBuilder displayOrder(Integer displayOrder) {
            this.displayOrder = displayOrder;
            return this;
        }
        
        /**
         * Build call for updateInterestCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            return updateInterestCategoryCall(listId, interestCategoryId, listsAddInterestCategoryRequest, _callback);
        }

        private ListsAddInterestCategoryRequest buildBodyParams() {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = new ListsAddInterestCategoryRequest();
            listsAddInterestCategoryRequest.title(this.title);
            listsAddInterestCategoryRequest.displayOrder(this.displayOrder);
            if (this.type != null)
            listsAddInterestCategoryRequest.type(ListsAddInterestCategoryRequest.TypeEnum.fromValue(this.type));
            return listsAddInterestCategoryRequest;
        }

        /**
         * Execute updateInterestCategory request
         * @return ListsUpdateInterestCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateInterestCategoryResponse execute() throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            ApiResponse<ListsUpdateInterestCategoryResponse> localVarResp = updateInterestCategoryWithHttpInfo(listId, interestCategoryId, listsAddInterestCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInterestCategory request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateInterestCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateInterestCategoryResponse> executeWithHttpInfo() throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            return updateInterestCategoryWithHttpInfo(listId, interestCategoryId, listsAddInterestCategoryRequest);
        }

        /**
         * Execute updateInterestCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateInterestCategoryResponse> _callback) throws ApiException {
            ListsAddInterestCategoryRequest listsAddInterestCategoryRequest = buildBodyParams();
            return updateInterestCategoryAsync(listId, interestCategoryId, listsAddInterestCategoryRequest, _callback);
        }
    }

    /**
     * Update interest category
     * Update a specific interest category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @param listsAddInterestCategoryRequest  (required)
     * @return UpdateInterestCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInterestCategoryRequestBuilder updateInterestCategory(String title, String type, String listId, String interestCategoryId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        return new UpdateInterestCategoryRequestBuilder(title, type, listId, interestCategoryId);
    }
    private okhttp3.Call updateInterestCategoryInterestCall(String listId, String interestCategoryId, String interestId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddInterestInCategoryRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "interest_category_id" + "}", localVarApiClient.escapeString(interestCategoryId.toString()))
            .replace("{" + "interest_id" + "}", localVarApiClient.escapeString(interestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInterestCategoryInterestValidateBeforeCall(String listId, String interestCategoryId, String interestId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateInterestCategoryInterest(Async)");
        }

        // verify the required parameter 'interestCategoryId' is set
        if (interestCategoryId == null) {
            throw new ApiException("Missing the required parameter 'interestCategoryId' when calling updateInterestCategoryInterest(Async)");
        }

        // verify the required parameter 'interestId' is set
        if (interestId == null) {
            throw new ApiException("Missing the required parameter 'interestId' when calling updateInterestCategoryInterest(Async)");
        }

        // verify the required parameter 'listsAddInterestInCategoryRequest' is set
        if (listsAddInterestInCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddInterestInCategoryRequest' when calling updateInterestCategoryInterest(Async)");
        }

        return updateInterestCategoryInterestCall(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest, _callback);

    }


    private ApiResponse<ListsUpdateInterestCategoryInterestResponse> updateInterestCategoryInterestWithHttpInfo(String listId, String interestCategoryId, String interestId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInterestCategoryInterestValidateBeforeCall(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateInterestCategoryInterestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInterestCategoryInterestAsync(String listId, String interestCategoryId, String interestId, ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest, final ApiCallback<ListsUpdateInterestCategoryInterestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInterestCategoryInterestValidateBeforeCall(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateInterestCategoryInterestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInterestCategoryInterestRequestBuilder {
        private final String name;
        private final String listId;
        private final String interestCategoryId;
        private final String interestId;
        private Integer displayOrder;

        private UpdateInterestCategoryInterestRequestBuilder(String name, String listId, String interestCategoryId, String interestId) {
            this.name = name;
            this.listId = listId;
            this.interestCategoryId = interestCategoryId;
            this.interestId = interestId;
        }

        /**
         * Set displayOrder
         * @param displayOrder The display order for interests. (optional)
         * @return UpdateInterestCategoryInterestRequestBuilder
         */
        public UpdateInterestCategoryInterestRequestBuilder displayOrder(Integer displayOrder) {
            this.displayOrder = displayOrder;
            return this;
        }
        
        /**
         * Build call for updateInterestCategoryInterest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            return updateInterestCategoryInterestCall(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest, _callback);
        }

        private ListsAddInterestInCategoryRequest buildBodyParams() {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = new ListsAddInterestInCategoryRequest();
            listsAddInterestInCategoryRequest.name(this.name);
            listsAddInterestInCategoryRequest.displayOrder(this.displayOrder);
            return listsAddInterestInCategoryRequest;
        }

        /**
         * Execute updateInterestCategoryInterest request
         * @return ListsUpdateInterestCategoryInterestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateInterestCategoryInterestResponse execute() throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            ApiResponse<ListsUpdateInterestCategoryInterestResponse> localVarResp = updateInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInterestCategoryInterest request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateInterestCategoryInterestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateInterestCategoryInterestResponse> executeWithHttpInfo() throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            return updateInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest);
        }

        /**
         * Execute updateInterestCategoryInterest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateInterestCategoryInterestResponse> _callback) throws ApiException {
            ListsAddInterestInCategoryRequest listsAddInterestInCategoryRequest = buildBodyParams();
            return updateInterestCategoryInterestAsync(listId, interestCategoryId, interestId, listsAddInterestInCategoryRequest, _callback);
        }
    }

    /**
     * Update interest in category
     * Update interests or &#39;group names&#39; for a specific category.
     * @param listId The unique ID for the list. (required)
     * @param interestCategoryId The unique ID for the interest category. (required)
     * @param interestId The specific interest or &#39;group name&#39;. (required)
     * @param listsAddInterestInCategoryRequest  (required)
     * @return UpdateInterestCategoryInterestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInterestCategoryInterestRequestBuilder updateInterestCategoryInterest(String name, String listId, String interestCategoryId, String interestId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (interestCategoryId == null) throw new IllegalArgumentException("\"interestCategoryId\" is required but got null");
            

        if (interestId == null) throw new IllegalArgumentException("\"interestId\" is required but got null");
            

        return new UpdateInterestCategoryInterestRequestBuilder(name, listId, interestCategoryId, interestId);
    }
    private okhttp3.Call updateMemberCall(String listId, String subscriberHash, ListsUpdateMemberRequest listsUpdateMemberRequest, Boolean skipMergeValidation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsUpdateMemberRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipMergeValidation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_merge_validation", skipMergeValidation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMemberValidateBeforeCall(String listId, String subscriberHash, ListsUpdateMemberRequest listsUpdateMemberRequest, Boolean skipMergeValidation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateMember(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling updateMember(Async)");
        }

        // verify the required parameter 'listsUpdateMemberRequest' is set
        if (listsUpdateMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'listsUpdateMemberRequest' when calling updateMember(Async)");
        }

        return updateMemberCall(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation, _callback);

    }


    private ApiResponse<ListsUpdateMemberResponse> updateMemberWithHttpInfo(String listId, String subscriberHash, ListsUpdateMemberRequest listsUpdateMemberRequest, Boolean skipMergeValidation) throws ApiException {
        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation, null);
        Type localVarReturnType = new TypeToken<ListsUpdateMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMemberAsync(String listId, String subscriberHash, ListsUpdateMemberRequest listsUpdateMemberRequest, Boolean skipMergeValidation, final ApiCallback<ListsUpdateMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMemberRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private String emailAddress;
        private String emailType;
        private String status;
        private Map<String, Object> mergeFields;
        private Map<String, Boolean> interests;
        private String language;
        private Boolean vip;
        private LocationProperty location;
        private List<MarketingPermission> marketingPermissions;
        private String ipSignup;
        private OffsetDateTime timestampSignup;
        private String ipOpt;
        private OffsetDateTime timestampOpt;
        private Boolean skipMergeValidation;

        private UpdateMemberRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set emailAddress
         * @param emailAddress Email address for a subscriber. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set emailType
         * @param emailType Type of email this member asked to get (&#39;html&#39; or &#39;text&#39;). (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder emailType(String emailType) {
            this.emailType = emailType;
            return this;
        }
        
        /**
         * Set status
         * @param status Subscriber&#39;s current status. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set mergeFields
         * @param mergeFields A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder mergeFields(Map<String, Object> mergeFields) {
            this.mergeFields = mergeFields;
            return this;
        }
        
        /**
         * Set interests
         * @param interests The key of this object&#39;s properties is the ID of the interest in question. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder interests(Map<String, Boolean> interests) {
            this.interests = interests;
            return this;
        }
        
        /**
         * Set language
         * @param language If set/detected, the [subscriber&#39;s language](https://mailchimp.com/help/view-and-edit-contact-languages/). (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set vip
         * @param vip [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder vip(Boolean vip) {
            this.vip = vip;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder location(LocationProperty location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set marketingPermissions
         * @param marketingPermissions The marketing permissions for the subscriber. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder marketingPermissions(List<MarketingPermission> marketingPermissions) {
            this.marketingPermissions = marketingPermissions;
            return this;
        }
        
        /**
         * Set ipSignup
         * @param ipSignup IP address the subscriber signed up from. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder ipSignup(String ipSignup) {
            this.ipSignup = ipSignup;
            return this;
        }
        
        /**
         * Set timestampSignup
         * @param timestampSignup The date and time the subscriber signed up for the list in ISO 8601 format. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder timestampSignup(OffsetDateTime timestampSignup) {
            this.timestampSignup = timestampSignup;
            return this;
        }
        
        /**
         * Set ipOpt
         * @param ipOpt The IP address the subscriber used to confirm their opt-in status. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder ipOpt(String ipOpt) {
            this.ipOpt = ipOpt;
            return this;
        }
        
        /**
         * Set timestampOpt
         * @param timestampOpt The date and time the subscriber confirmed their opt-in status in ISO 8601 format. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder timestampOpt(OffsetDateTime timestampOpt) {
            this.timestampOpt = timestampOpt;
            return this;
        }
        
        /**
         * Set skipMergeValidation
         * @param skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false. (optional)
         * @return UpdateMemberRequestBuilder
         */
        public UpdateMemberRequestBuilder skipMergeValidation(Boolean skipMergeValidation) {
            this.skipMergeValidation = skipMergeValidation;
            return this;
        }
        
        /**
         * Build call for updateMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsUpdateMemberRequest listsUpdateMemberRequest = buildBodyParams();
            return updateMemberCall(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation, _callback);
        }

        private ListsUpdateMemberRequest buildBodyParams() {
            ListsUpdateMemberRequest listsUpdateMemberRequest = new ListsUpdateMemberRequest();
            listsUpdateMemberRequest.emailAddress(this.emailAddress);
            listsUpdateMemberRequest.emailType(this.emailType);
            if (this.status != null)
            listsUpdateMemberRequest.status(ListsUpdateMemberRequest.StatusEnum.fromValue(this.status));
            listsUpdateMemberRequest.mergeFields(this.mergeFields);
            listsUpdateMemberRequest.interests(this.interests);
            listsUpdateMemberRequest.language(this.language);
            listsUpdateMemberRequest.vip(this.vip);
            listsUpdateMemberRequest.location(this.location);
            listsUpdateMemberRequest.marketingPermissions(this.marketingPermissions);
            listsUpdateMemberRequest.ipSignup(this.ipSignup);
            listsUpdateMemberRequest.timestampSignup(this.timestampSignup);
            listsUpdateMemberRequest.ipOpt(this.ipOpt);
            listsUpdateMemberRequest.timestampOpt(this.timestampOpt);
            return listsUpdateMemberRequest;
        }

        /**
         * Execute updateMember request
         * @return ListsUpdateMemberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateMemberResponse execute() throws ApiException {
            ListsUpdateMemberRequest listsUpdateMemberRequest = buildBodyParams();
            ApiResponse<ListsUpdateMemberResponse> localVarResp = updateMemberWithHttpInfo(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMember request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateMemberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateMemberResponse> executeWithHttpInfo() throws ApiException {
            ListsUpdateMemberRequest listsUpdateMemberRequest = buildBodyParams();
            return updateMemberWithHttpInfo(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation);
        }

        /**
         * Execute updateMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateMemberResponse> _callback) throws ApiException {
            ListsUpdateMemberRequest listsUpdateMemberRequest = buildBodyParams();
            return updateMemberAsync(listId, subscriberHash, listsUpdateMemberRequest, skipMergeValidation, _callback);
        }
    }

    /**
     * Update list member
     * Update information for a specific list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @param listsUpdateMemberRequest  (required)
     * @return UpdateMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMemberRequestBuilder updateMember(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new UpdateMemberRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call updateMergeFieldCall(String listId, String mergeId, ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsUpdateMergeFieldRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/merge-fields/{merge_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "merge_id" + "}", localVarApiClient.escapeString(mergeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMergeFieldValidateBeforeCall(String listId, String mergeId, ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateMergeField(Async)");
        }

        // verify the required parameter 'mergeId' is set
        if (mergeId == null) {
            throw new ApiException("Missing the required parameter 'mergeId' when calling updateMergeField(Async)");
        }

        // verify the required parameter 'listsUpdateMergeFieldRequest' is set
        if (listsUpdateMergeFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'listsUpdateMergeFieldRequest' when calling updateMergeField(Async)");
        }

        return updateMergeFieldCall(listId, mergeId, listsUpdateMergeFieldRequest, _callback);

    }


    private ApiResponse<ListsUpdateMergeFieldResponse> updateMergeFieldWithHttpInfo(String listId, String mergeId, ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMergeFieldValidateBeforeCall(listId, mergeId, listsUpdateMergeFieldRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateMergeFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMergeFieldAsync(String listId, String mergeId, ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest, final ApiCallback<ListsUpdateMergeFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMergeFieldValidateBeforeCall(listId, mergeId, listsUpdateMergeFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateMergeFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMergeFieldRequestBuilder {
        private final String name;
        private final String listId;
        private final String mergeId;
        private String tag;
        private Boolean required;
        private String defaultValue;
        private Boolean _public;
        private Integer displayOrder;
        private MergeFieldOptionsProperty1 options;
        private String helpText;

        private UpdateMergeFieldRequestBuilder(String name, String listId, String mergeId) {
            this.name = name;
            this.listId = listId;
            this.mergeId = mergeId;
        }

        /**
         * Set tag
         * @param tag The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set required
         * @param required Whether the merge field is required to import a contact. (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set defaultValue
         * @param defaultValue The default value for the merge field if &#x60;null&#x60;. (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder defaultValue(String defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Whether the merge field is displayed on the signup form. (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set displayOrder
         * @param displayOrder The order that the merge field displays on the list signup form. (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder displayOrder(Integer displayOrder) {
            this.displayOrder = displayOrder;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder options(MergeFieldOptionsProperty1 options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set helpText
         * @param helpText Extra text to help the subscriber fill out the form. (optional)
         * @return UpdateMergeFieldRequestBuilder
         */
        public UpdateMergeFieldRequestBuilder helpText(String helpText) {
            this.helpText = helpText;
            return this;
        }
        
        /**
         * Build call for updateMergeField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest = buildBodyParams();
            return updateMergeFieldCall(listId, mergeId, listsUpdateMergeFieldRequest, _callback);
        }

        private ListsUpdateMergeFieldRequest buildBodyParams() {
            ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest = new ListsUpdateMergeFieldRequest();
            listsUpdateMergeFieldRequest.tag(this.tag);
            listsUpdateMergeFieldRequest.name(this.name);
            listsUpdateMergeFieldRequest.required(this.required);
            listsUpdateMergeFieldRequest.defaultValue(this.defaultValue);
            listsUpdateMergeFieldRequest._public(this._public);
            listsUpdateMergeFieldRequest.displayOrder(this.displayOrder);
            listsUpdateMergeFieldRequest.options(this.options);
            listsUpdateMergeFieldRequest.helpText(this.helpText);
            return listsUpdateMergeFieldRequest;
        }

        /**
         * Execute updateMergeField request
         * @return ListsUpdateMergeFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateMergeFieldResponse execute() throws ApiException {
            ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest = buildBodyParams();
            ApiResponse<ListsUpdateMergeFieldResponse> localVarResp = updateMergeFieldWithHttpInfo(listId, mergeId, listsUpdateMergeFieldRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMergeField request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateMergeFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateMergeFieldResponse> executeWithHttpInfo() throws ApiException {
            ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest = buildBodyParams();
            return updateMergeFieldWithHttpInfo(listId, mergeId, listsUpdateMergeFieldRequest);
        }

        /**
         * Execute updateMergeField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateMergeFieldResponse> _callback) throws ApiException {
            ListsUpdateMergeFieldRequest listsUpdateMergeFieldRequest = buildBodyParams();
            return updateMergeFieldAsync(listId, mergeId, listsUpdateMergeFieldRequest, _callback);
        }
    }

    /**
     * Update merge field
     * Update a specific merge field.
     * @param listId The unique ID for the list. (required)
     * @param mergeId The id for the merge field. (required)
     * @param listsUpdateMergeFieldRequest  (required)
     * @return UpdateMergeFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMergeFieldRequestBuilder updateMergeField(String name, String listId, String mergeId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (mergeId == null) throw new IllegalArgumentException("\"mergeId\" is required but got null");
            

        return new UpdateMergeFieldRequestBuilder(name, listId, mergeId);
    }
    private okhttp3.Call updateNoteSpecificListMemberCall(String listId, String subscriberHash, String noteId, ListsAddMemberNoteRequest listsAddMemberNoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsAddMemberNoteRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNoteSpecificListMemberValidateBeforeCall(String listId, String subscriberHash, String noteId, ListsAddMemberNoteRequest listsAddMemberNoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateNoteSpecificListMember(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling updateNoteSpecificListMember(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateNoteSpecificListMember(Async)");
        }

        // verify the required parameter 'listsAddMemberNoteRequest' is set
        if (listsAddMemberNoteRequest == null) {
            throw new ApiException("Missing the required parameter 'listsAddMemberNoteRequest' when calling updateNoteSpecificListMember(Async)");
        }

        return updateNoteSpecificListMemberCall(listId, subscriberHash, noteId, listsAddMemberNoteRequest, _callback);

    }


    private ApiResponse<ListsUpdateNoteSpecificListMemberResponse> updateNoteSpecificListMemberWithHttpInfo(String listId, String subscriberHash, String noteId, ListsAddMemberNoteRequest listsAddMemberNoteRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNoteSpecificListMemberValidateBeforeCall(listId, subscriberHash, noteId, listsAddMemberNoteRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateNoteSpecificListMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNoteSpecificListMemberAsync(String listId, String subscriberHash, String noteId, ListsAddMemberNoteRequest listsAddMemberNoteRequest, final ApiCallback<ListsUpdateNoteSpecificListMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNoteSpecificListMemberValidateBeforeCall(listId, subscriberHash, noteId, listsAddMemberNoteRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateNoteSpecificListMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateNoteSpecificListMemberRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private final String noteId;
        private String note;

        private UpdateNoteSpecificListMemberRequestBuilder(String listId, String subscriberHash, String noteId) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
            this.noteId = noteId;
        }

        /**
         * Set note
         * @param note The content of the note. Note length is limited to 1,000 characters. (optional)
         * @return UpdateNoteSpecificListMemberRequestBuilder
         */
        public UpdateNoteSpecificListMemberRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for updateNoteSpecificListMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            return updateNoteSpecificListMemberCall(listId, subscriberHash, noteId, listsAddMemberNoteRequest, _callback);
        }

        private ListsAddMemberNoteRequest buildBodyParams() {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = new ListsAddMemberNoteRequest();
            listsAddMemberNoteRequest.note(this.note);
            return listsAddMemberNoteRequest;
        }

        /**
         * Execute updateNoteSpecificListMember request
         * @return ListsUpdateNoteSpecificListMemberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateNoteSpecificListMemberResponse execute() throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            ApiResponse<ListsUpdateNoteSpecificListMemberResponse> localVarResp = updateNoteSpecificListMemberWithHttpInfo(listId, subscriberHash, noteId, listsAddMemberNoteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateNoteSpecificListMember request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateNoteSpecificListMemberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateNoteSpecificListMemberResponse> executeWithHttpInfo() throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            return updateNoteSpecificListMemberWithHttpInfo(listId, subscriberHash, noteId, listsAddMemberNoteRequest);
        }

        /**
         * Execute updateNoteSpecificListMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateNoteSpecificListMemberResponse> _callback) throws ApiException {
            ListsAddMemberNoteRequest listsAddMemberNoteRequest = buildBodyParams();
            return updateNoteSpecificListMemberAsync(listId, subscriberHash, noteId, listsAddMemberNoteRequest, _callback);
        }
    }

    /**
     * Update note
     * Update a specific note for a specific list member.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @param noteId The id for the note. (required)
     * @param listsAddMemberNoteRequest  (required)
     * @return UpdateNoteSpecificListMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNoteSpecificListMemberRequestBuilder updateNoteSpecificListMember(String listId, String subscriberHash, String noteId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        if (noteId == null) throw new IllegalArgumentException("\"noteId\" is required but got null");
            

        return new UpdateNoteSpecificListMemberRequestBuilder(listId, subscriberHash, noteId);
    }
    private okhttp3.Call updateSegmentByIdCall(String listId, String segmentId, ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsUpdateSegmentByIdRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/segments/{segment_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSegmentByIdValidateBeforeCall(String listId, String segmentId, ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateSegmentById(Async)");
        }

        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling updateSegmentById(Async)");
        }

        // verify the required parameter 'listsUpdateSegmentByIdRequest' is set
        if (listsUpdateSegmentByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'listsUpdateSegmentByIdRequest' when calling updateSegmentById(Async)");
        }

        return updateSegmentByIdCall(listId, segmentId, listsUpdateSegmentByIdRequest, _callback);

    }


    private ApiResponse<ListsUpdateSegmentByIdResponse> updateSegmentByIdWithHttpInfo(String listId, String segmentId, ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSegmentByIdValidateBeforeCall(listId, segmentId, listsUpdateSegmentByIdRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateSegmentByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSegmentByIdAsync(String listId, String segmentId, ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest, final ApiCallback<ListsUpdateSegmentByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSegmentByIdValidateBeforeCall(listId, segmentId, listsUpdateSegmentByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateSegmentByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSegmentByIdRequestBuilder {
        private final String name;
        private final String listId;
        private final String segmentId;
        private List<String> staticSegment;
        private ConditionsProperty1 options;

        private UpdateSegmentByIdRequestBuilder(String name, String listId, String segmentId) {
            this.name = name;
            this.listId = listId;
            this.segmentId = segmentId;
        }

        /**
         * Set staticSegment
         * @param staticSegment An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array for an existing static segment will reset that segment and remove all members. This field cannot be provided with the &#x60;options&#x60; field. (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder staticSegment(List<String> staticSegment) {
            this.staticSegment = staticSegment;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder options(ConditionsProperty1 options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateSegmentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest = buildBodyParams();
            return updateSegmentByIdCall(listId, segmentId, listsUpdateSegmentByIdRequest, _callback);
        }

        private ListsUpdateSegmentByIdRequest buildBodyParams() {
            ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest = new ListsUpdateSegmentByIdRequest();
            listsUpdateSegmentByIdRequest.name(this.name);
            listsUpdateSegmentByIdRequest.staticSegment(this.staticSegment);
            listsUpdateSegmentByIdRequest.options(this.options);
            return listsUpdateSegmentByIdRequest;
        }

        /**
         * Execute updateSegmentById request
         * @return ListsUpdateSegmentByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateSegmentByIdResponse execute() throws ApiException {
            ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest = buildBodyParams();
            ApiResponse<ListsUpdateSegmentByIdResponse> localVarResp = updateSegmentByIdWithHttpInfo(listId, segmentId, listsUpdateSegmentByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSegmentById request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateSegmentByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateSegmentByIdResponse> executeWithHttpInfo() throws ApiException {
            ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest = buildBodyParams();
            return updateSegmentByIdWithHttpInfo(listId, segmentId, listsUpdateSegmentByIdRequest);
        }

        /**
         * Execute updateSegmentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateSegmentByIdResponse> _callback) throws ApiException {
            ListsUpdateSegmentByIdRequest listsUpdateSegmentByIdRequest = buildBodyParams();
            return updateSegmentByIdAsync(listId, segmentId, listsUpdateSegmentByIdRequest, _callback);
        }
    }

    /**
     * Update segment
     * Update a specific segment in a list.
     * @param listId The unique ID for the list. (required)
     * @param segmentId The unique id for the segment. (required)
     * @param listsUpdateSegmentByIdRequest  (required)
     * @return UpdateSegmentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSegmentByIdRequestBuilder updateSegmentById(String name, String listId, String segmentId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (segmentId == null) throw new IllegalArgumentException("\"segmentId\" is required but got null");
            

        return new UpdateSegmentByIdRequestBuilder(name, listId, segmentId);
    }
    private okhttp3.Call updateSettingsCall(String listId, ListsUpdateSettingsRequest listsUpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsUpdateSettingsRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(String listId, ListsUpdateSettingsRequest listsUpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateSettings(Async)");
        }

        // verify the required parameter 'listsUpdateSettingsRequest' is set
        if (listsUpdateSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'listsUpdateSettingsRequest' when calling updateSettings(Async)");
        }

        return updateSettingsCall(listId, listsUpdateSettingsRequest, _callback);

    }


    private ApiResponse<ListsUpdateSettingsResponse> updateSettingsWithHttpInfo(String listId, ListsUpdateSettingsRequest listsUpdateSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(listId, listsUpdateSettingsRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(String listId, ListsUpdateSettingsRequest listsUpdateSettingsRequest, final ApiCallback<ListsUpdateSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(listId, listsUpdateSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final String name;
        private final ListContactProperty1 contact;
        private final String permissionReminder;
        private final CampaignDefaultsProperty campaignDefaults;
        private final Boolean emailTypeOption;
        private final String listId;
        private Boolean useArchiveBar;
        private String notifyOnSubscribe;
        private String notifyOnUnsubscribe;
        private Boolean doubleOptin;
        private Boolean marketingPermissions;

        private UpdateSettingsRequestBuilder(String name, ListContactProperty1 contact, String permissionReminder, CampaignDefaultsProperty campaignDefaults, Boolean emailTypeOption, String listId) {
            this.name = name;
            this.contact = contact;
            this.permissionReminder = permissionReminder;
            this.campaignDefaults = campaignDefaults;
            this.emailTypeOption = emailTypeOption;
            this.listId = listId;
        }

        /**
         * Set useArchiveBar
         * @param useArchiveBar Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. (optional, default to false)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder useArchiveBar(Boolean useArchiveBar) {
            this.useArchiveBar = useArchiveBar;
            return this;
        }
        
        /**
         * Set notifyOnSubscribe
         * @param notifyOnSubscribe The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. (optional, default to false)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder notifyOnSubscribe(String notifyOnSubscribe) {
            this.notifyOnSubscribe = notifyOnSubscribe;
            return this;
        }
        
        /**
         * Set notifyOnUnsubscribe
         * @param notifyOnUnsubscribe The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. (optional, default to false)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder notifyOnUnsubscribe(String notifyOnUnsubscribe) {
            this.notifyOnUnsubscribe = notifyOnUnsubscribe;
            return this;
        }
        
        /**
         * Set doubleOptin
         * @param doubleOptin Whether or not to require the subscriber to confirm subscription via email. (optional, default to false)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder doubleOptin(Boolean doubleOptin) {
            this.doubleOptin = doubleOptin;
            return this;
        }
        
        /**
         * Set marketingPermissions
         * @param marketingPermissions Whether or not the list has marketing permissions (eg. GDPR) enabled. (optional, default to false)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder marketingPermissions(Boolean marketingPermissions) {
            this.marketingPermissions = marketingPermissions;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsUpdateSettingsRequest listsUpdateSettingsRequest = buildBodyParams();
            return updateSettingsCall(listId, listsUpdateSettingsRequest, _callback);
        }

        private ListsUpdateSettingsRequest buildBodyParams() {
            ListsUpdateSettingsRequest listsUpdateSettingsRequest = new ListsUpdateSettingsRequest();
            listsUpdateSettingsRequest.name(this.name);
            listsUpdateSettingsRequest.contact(this.contact);
            listsUpdateSettingsRequest.permissionReminder(this.permissionReminder);
            listsUpdateSettingsRequest.useArchiveBar(this.useArchiveBar);
            listsUpdateSettingsRequest.campaignDefaults(this.campaignDefaults);
            listsUpdateSettingsRequest.notifyOnSubscribe(this.notifyOnSubscribe);
            listsUpdateSettingsRequest.notifyOnUnsubscribe(this.notifyOnUnsubscribe);
            listsUpdateSettingsRequest.emailTypeOption(this.emailTypeOption);
            listsUpdateSettingsRequest.doubleOptin(this.doubleOptin);
            listsUpdateSettingsRequest.marketingPermissions(this.marketingPermissions);
            return listsUpdateSettingsRequest;
        }

        /**
         * Execute updateSettings request
         * @return ListsUpdateSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateSettingsResponse execute() throws ApiException {
            ListsUpdateSettingsRequest listsUpdateSettingsRequest = buildBodyParams();
            ApiResponse<ListsUpdateSettingsResponse> localVarResp = updateSettingsWithHttpInfo(listId, listsUpdateSettingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateSettingsResponse> executeWithHttpInfo() throws ApiException {
            ListsUpdateSettingsRequest listsUpdateSettingsRequest = buildBodyParams();
            return updateSettingsWithHttpInfo(listId, listsUpdateSettingsRequest);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateSettingsResponse> _callback) throws ApiException {
            ListsUpdateSettingsRequest listsUpdateSettingsRequest = buildBodyParams();
            return updateSettingsAsync(listId, listsUpdateSettingsRequest, _callback);
        }
    }

    /**
     * Update lists
     * Update the settings for a specific list.
     * @param listId The unique ID for the list. (required)
     * @param listsUpdateSettingsRequest  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(String name, ListContactProperty1 contact, String permissionReminder, CampaignDefaultsProperty campaignDefaults, Boolean emailTypeOption, String listId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (contact == null) throw new IllegalArgumentException("\"contact\" is required but got null");
        if (permissionReminder == null) throw new IllegalArgumentException("\"permissionReminder\" is required but got null");
            

        if (campaignDefaults == null) throw new IllegalArgumentException("\"campaignDefaults\" is required but got null");
        if (emailTypeOption == null) throw new IllegalArgumentException("\"emailTypeOption\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new UpdateSettingsRequestBuilder(name, contact, permissionReminder, campaignDefaults, emailTypeOption, listId);
    }
    private okhttp3.Call updateWebhookSettingsCall(String listId, String webhookId, ListsCreateWebhookRequest listsCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsCreateWebhookRequest;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/webhooks/{webhook_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookSettingsValidateBeforeCall(String listId, String webhookId, ListsCreateWebhookRequest listsCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateWebhookSettings(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateWebhookSettings(Async)");
        }

        // verify the required parameter 'listsCreateWebhookRequest' is set
        if (listsCreateWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'listsCreateWebhookRequest' when calling updateWebhookSettings(Async)");
        }

        return updateWebhookSettingsCall(listId, webhookId, listsCreateWebhookRequest, _callback);

    }


    private ApiResponse<ListsUpdateWebhookSettingsResponse> updateWebhookSettingsWithHttpInfo(String listId, String webhookId, ListsCreateWebhookRequest listsCreateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookSettingsValidateBeforeCall(listId, webhookId, listsCreateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<ListsUpdateWebhookSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookSettingsAsync(String listId, String webhookId, ListsCreateWebhookRequest listsCreateWebhookRequest, final ApiCallback<ListsUpdateWebhookSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookSettingsValidateBeforeCall(listId, webhookId, listsCreateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsUpdateWebhookSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebhookSettingsRequestBuilder {
        private final String listId;
        private final String webhookId;
        private String url;
        private EventsProperty events;
        private SourcesProperty sources;

        private UpdateWebhookSettingsRequestBuilder(String listId, String webhookId) {
            this.listId = listId;
            this.webhookId = webhookId;
        }

        /**
         * Set url
         * @param url A valid URL for the Webhook. (optional)
         * @return UpdateWebhookSettingsRequestBuilder
         */
        public UpdateWebhookSettingsRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set events
         * @param events  (optional)
         * @return UpdateWebhookSettingsRequestBuilder
         */
        public UpdateWebhookSettingsRequestBuilder events(EventsProperty events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return UpdateWebhookSettingsRequestBuilder
         */
        public UpdateWebhookSettingsRequestBuilder sources(SourcesProperty sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Build call for updateWebhookSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            return updateWebhookSettingsCall(listId, webhookId, listsCreateWebhookRequest, _callback);
        }

        private ListsCreateWebhookRequest buildBodyParams() {
            ListsCreateWebhookRequest listsCreateWebhookRequest = new ListsCreateWebhookRequest();
            listsCreateWebhookRequest.url(this.url);
            listsCreateWebhookRequest.events(this.events);
            listsCreateWebhookRequest.sources(this.sources);
            return listsCreateWebhookRequest;
        }

        /**
         * Execute updateWebhookSettings request
         * @return ListsUpdateWebhookSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsUpdateWebhookSettingsResponse execute() throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            ApiResponse<ListsUpdateWebhookSettingsResponse> localVarResp = updateWebhookSettingsWithHttpInfo(listId, webhookId, listsCreateWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebhookSettings request with HTTP info returned
         * @return ApiResponse&lt;ListsUpdateWebhookSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsUpdateWebhookSettingsResponse> executeWithHttpInfo() throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            return updateWebhookSettingsWithHttpInfo(listId, webhookId, listsCreateWebhookRequest);
        }

        /**
         * Execute updateWebhookSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsUpdateWebhookSettingsResponse> _callback) throws ApiException {
            ListsCreateWebhookRequest listsCreateWebhookRequest = buildBodyParams();
            return updateWebhookSettingsAsync(listId, webhookId, listsCreateWebhookRequest, _callback);
        }
    }

    /**
     * Update webhook
     * Update the settings for an existing webhook.
     * @param listId The unique ID for the list. (required)
     * @param webhookId The webhook&#39;s id. (required)
     * @param listsCreateWebhookRequest  (required)
     * @return UpdateWebhookSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebhookSettingsRequestBuilder updateWebhookSettings(String listId, String webhookId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new UpdateWebhookSettingsRequestBuilder(listId, webhookId);
    }
    private okhttp3.Call viewRecentActivityCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, List<String> activityFilters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/activity-feed"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (activityFilters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "activity_filters", activityFilters));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewRecentActivityValidateBeforeCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, List<String> activityFilters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling viewRecentActivity(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling viewRecentActivity(Async)");
        }

        return viewRecentActivityCall(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters, _callback);

    }


    private ApiResponse<ListsViewRecentActivityResponse> viewRecentActivityWithHttpInfo(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, List<String> activityFilters) throws ApiException {
        okhttp3.Call localVarCall = viewRecentActivityValidateBeforeCall(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters, null);
        Type localVarReturnType = new TypeToken<ListsViewRecentActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call viewRecentActivityAsync(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, Integer count, Integer offset, List<String> activityFilters, final ApiCallback<ListsViewRecentActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewRecentActivityValidateBeforeCall(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters, _callback);
        Type localVarReturnType = new TypeToken<ListsViewRecentActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ViewRecentActivityRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private List<String> activityFilters;

        private ViewRecentActivityRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ViewRecentActivityRequestBuilder
         */
        public ViewRecentActivityRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ViewRecentActivityRequestBuilder
         */
        public ViewRecentActivityRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ViewRecentActivityRequestBuilder
         */
        public ViewRecentActivityRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ViewRecentActivityRequestBuilder
         */
        public ViewRecentActivityRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set activityFilters
         * @param activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \&quot;?activity_filters&#x3D;open,bounce,click\&quot;. (optional)
         * @return ViewRecentActivityRequestBuilder
         */
        public ViewRecentActivityRequestBuilder activityFilters(List<String> activityFilters) {
            this.activityFilters = activityFilters;
            return this;
        }
        
        /**
         * Build call for viewRecentActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return viewRecentActivityCall(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters, _callback);
        }


        /**
         * Execute viewRecentActivity request
         * @return ListsViewRecentActivityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsViewRecentActivityResponse execute() throws ApiException {
            ApiResponse<ListsViewRecentActivityResponse> localVarResp = viewRecentActivityWithHttpInfo(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute viewRecentActivity request with HTTP info returned
         * @return ApiResponse&lt;ListsViewRecentActivityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsViewRecentActivityResponse> executeWithHttpInfo() throws ApiException {
            return viewRecentActivityWithHttpInfo(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters);
        }

        /**
         * Execute viewRecentActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsViewRecentActivityResponse> _callback) throws ApiException {
            return viewRecentActivityAsync(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters, _callback);
        }
    }

    /**
     * View recent activity
     * Get a member&#39;s activity on a specific list, including opens, clicks, and unsubscribes.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return ViewRecentActivityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ViewRecentActivityRequestBuilder viewRecentActivity(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new ViewRecentActivityRequestBuilder(listId, subscriberHash);
    }
    private okhttp3.Call viewRecentActivityEventsCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, List<String> action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/members/{subscriber_hash}/activity"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (action != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "action", action));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewRecentActivityEventsValidateBeforeCall(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, List<String> action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling viewRecentActivityEvents(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling viewRecentActivityEvents(Async)");
        }

        return viewRecentActivityEventsCall(listId, subscriberHash, fields, excludeFields, action, _callback);

    }


    private ApiResponse<ListsViewRecentActivityEventsResponse> viewRecentActivityEventsWithHttpInfo(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, List<String> action) throws ApiException {
        okhttp3.Call localVarCall = viewRecentActivityEventsValidateBeforeCall(listId, subscriberHash, fields, excludeFields, action, null);
        Type localVarReturnType = new TypeToken<ListsViewRecentActivityEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call viewRecentActivityEventsAsync(String listId, String subscriberHash, List<String> fields, List<String> excludeFields, List<String> action, final ApiCallback<ListsViewRecentActivityEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewRecentActivityEventsValidateBeforeCall(listId, subscriberHash, fields, excludeFields, action, _callback);
        Type localVarReturnType = new TypeToken<ListsViewRecentActivityEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ViewRecentActivityEventsRequestBuilder {
        private final String listId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;
        private List<String> action;

        private ViewRecentActivityEventsRequestBuilder(String listId, String subscriberHash) {
            this.listId = listId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ViewRecentActivityEventsRequestBuilder
         */
        public ViewRecentActivityEventsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ViewRecentActivityEventsRequestBuilder
         */
        public ViewRecentActivityEventsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set action
         * @param action A comma seperated list of actions to return. (optional)
         * @return ViewRecentActivityEventsRequestBuilder
         */
        public ViewRecentActivityEventsRequestBuilder action(List<String> action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for viewRecentActivityEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return viewRecentActivityEventsCall(listId, subscriberHash, fields, excludeFields, action, _callback);
        }


        /**
         * Execute viewRecentActivityEvents request
         * @return ListsViewRecentActivityEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ListsViewRecentActivityEventsResponse execute() throws ApiException {
            ApiResponse<ListsViewRecentActivityEventsResponse> localVarResp = viewRecentActivityEventsWithHttpInfo(listId, subscriberHash, fields, excludeFields, action);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute viewRecentActivityEvents request with HTTP info returned
         * @return ApiResponse&lt;ListsViewRecentActivityEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListsViewRecentActivityEventsResponse> executeWithHttpInfo() throws ApiException {
            return viewRecentActivityEventsWithHttpInfo(listId, subscriberHash, fields, excludeFields, action);
        }

        /**
         * Execute viewRecentActivityEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListsViewRecentActivityEventsResponse> _callback) throws ApiException {
            return viewRecentActivityEventsAsync(listId, subscriberHash, fields, excludeFields, action, _callback);
        }
    }

    /**
     * View recent activity 50
     * Get the last 50 events of a member&#39;s activity on a specific list, including opens, clicks, and unsubscribes.
     * @param listId The unique ID for the list. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. This endpoint also accepts a list member&#39;s email address or contact_id. (required)
     * @return ViewRecentActivityEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ViewRecentActivityEventsRequestBuilder viewRecentActivityEvents(String listId, String subscriberHash) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new ViewRecentActivityEventsRequestBuilder(listId, subscriberHash);
    }
}
