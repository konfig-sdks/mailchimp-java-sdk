/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConversationsGetAllConversations200Response;
import com.konfigthis.client.model.ConversationsGetAllConversationsResponse;
import com.konfigthis.client.model.ConversationsGetAllConversationsdefaultResponse;
import com.konfigthis.client.model.ConversationsGetById200Response;
import com.konfigthis.client.model.ConversationsGetByIdResponse;
import com.konfigthis.client.model.ConversationsGetByIddefaultResponse;
import com.konfigthis.client.model.ConversationsGetMessageById200Response;
import com.konfigthis.client.model.ConversationsGetMessageByIdResponse;
import com.konfigthis.client.model.ConversationsGetMessageByIddefaultResponse;
import com.konfigthis.client.model.ConversationsListMessagesFromConversation200Response;
import com.konfigthis.client.model.ConversationsListMessagesFromConversationResponse;
import com.konfigthis.client.model.ConversationsListMessagesFromConversationdefaultResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConversationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllConversationsCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String hasUnreadMessages, String listId, String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (hasUnreadMessages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_unread_messages", hasUnreadMessages));
        }

        if (listId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_id", listId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign_id", campaignId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConversationsValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String hasUnreadMessages, String listId, String campaignId, final ApiCallback _callback) throws ApiException {
        return getAllConversationsCall(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId, _callback);

    }


    private ApiResponse<ConversationsGetAllConversationsResponse> getAllConversationsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String hasUnreadMessages, String listId, String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getAllConversationsValidateBeforeCall(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId, null);
        Type localVarReturnType = new TypeToken<ConversationsGetAllConversationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllConversationsAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String hasUnreadMessages, String listId, String campaignId, final ApiCallback<ConversationsGetAllConversationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConversationsValidateBeforeCall(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId, _callback);
        Type localVarReturnType = new TypeToken<ConversationsGetAllConversationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllConversationsRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String hasUnreadMessages;
        private String listId;
        private String campaignId;

        private GetAllConversationsRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set hasUnreadMessages
         * @param hasUnreadMessages Whether the conversation has any unread messages. (optional)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder hasUnreadMessages(String hasUnreadMessages) {
            this.hasUnreadMessages = hasUnreadMessages;
            return this;
        }
        
        /**
         * Set listId
         * @param listId The unique id for the list. (optional)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder listId(String listId) {
            this.listId = listId;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId The unique id for the campaign. (optional)
         * @return GetAllConversationsRequestBuilder
         */
        public GetAllConversationsRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Build call for getAllConversations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllConversationsCall(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId, _callback);
        }


        /**
         * Execute getAllConversations request
         * @return ConversationsGetAllConversationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ConversationsGetAllConversationsResponse execute() throws ApiException {
            ApiResponse<ConversationsGetAllConversationsResponse> localVarResp = getAllConversationsWithHttpInfo(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllConversations request with HTTP info returned
         * @return ApiResponse&lt;ConversationsGetAllConversationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ConversationsGetAllConversationsResponse> executeWithHttpInfo() throws ApiException {
            return getAllConversationsWithHttpInfo(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId);
        }

        /**
         * Execute getAllConversations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsGetAllConversationsResponse> _callback) throws ApiException {
            return getAllConversationsAsync(fields, excludeFields, count, offset, hasUnreadMessages, listId, campaignId, _callback);
        }
    }

    /**
     * List conversations
     * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don&#39;t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @return GetAllConversationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetAllConversationsRequestBuilder getAllConversations() throws IllegalArgumentException {
        return new GetAllConversationsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String conversationId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String conversationId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling getById(Async)");
        }

        return getByIdCall(conversationId, fields, excludeFields, _callback);

    }


    private ApiResponse<ConversationsGetByIdResponse> getByIdWithHttpInfo(String conversationId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(conversationId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ConversationsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String conversationId, List<String> fields, List<String> excludeFields, final ApiCallback<ConversationsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(conversationId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ConversationsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String conversationId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetByIdRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(conversationId, fields, excludeFields, _callback);
        }


        /**
         * Execute getById request
         * @return ConversationsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ConversationsGetByIdResponse execute() throws ApiException {
            ApiResponse<ConversationsGetByIdResponse> localVarResp = getByIdWithHttpInfo(conversationId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ConversationsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ConversationsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(conversationId, fields, excludeFields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(conversationId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get conversation
     * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don&#39;t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @param conversationId The unique id for the conversation. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetByIdRequestBuilder getById(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new GetByIdRequestBuilder(conversationId);
    }
    private okhttp3.Call getMessageByIdCall(String conversationId, String messageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/messages/{message_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()))
            .replace("{" + "message_id" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageByIdValidateBeforeCall(String conversationId, String messageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling getMessageById(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageById(Async)");
        }

        return getMessageByIdCall(conversationId, messageId, fields, excludeFields, _callback);

    }


    private ApiResponse<ConversationsGetMessageByIdResponse> getMessageByIdWithHttpInfo(String conversationId, String messageId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getMessageByIdValidateBeforeCall(conversationId, messageId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ConversationsGetMessageByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMessageByIdAsync(String conversationId, String messageId, List<String> fields, List<String> excludeFields, final ApiCallback<ConversationsGetMessageByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageByIdValidateBeforeCall(conversationId, messageId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ConversationsGetMessageByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMessageByIdRequestBuilder {
        private final String conversationId;
        private final String messageId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetMessageByIdRequestBuilder(String conversationId, String messageId) {
            this.conversationId = conversationId;
            this.messageId = messageId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMessageByIdRequestBuilder
         */
        public GetMessageByIdRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetMessageByIdRequestBuilder
         */
        public GetMessageByIdRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getMessageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMessageByIdCall(conversationId, messageId, fields, excludeFields, _callback);
        }


        /**
         * Execute getMessageById request
         * @return ConversationsGetMessageByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ConversationsGetMessageByIdResponse execute() throws ApiException {
            ApiResponse<ConversationsGetMessageByIdResponse> localVarResp = getMessageByIdWithHttpInfo(conversationId, messageId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMessageById request with HTTP info returned
         * @return ApiResponse&lt;ConversationsGetMessageByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ConversationsGetMessageByIdResponse> executeWithHttpInfo() throws ApiException {
            return getMessageByIdWithHttpInfo(conversationId, messageId, fields, excludeFields);
        }

        /**
         * Execute getMessageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsGetMessageByIdResponse> _callback) throws ApiException {
            return getMessageByIdAsync(conversationId, messageId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get message
     * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don&#39;t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @param conversationId The unique id for the conversation. (required)
     * @param messageId The unique id for the conversation message. (required)
     * @return GetMessageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetMessageByIdRequestBuilder getMessageById(String conversationId, String messageId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new GetMessageByIdRequestBuilder(conversationId, messageId);
    }
    private okhttp3.Call listMessagesFromConversationCall(String conversationId, List<String> fields, List<String> excludeFields, String isRead, OffsetDateTime beforeTimestamp, OffsetDateTime sinceTimestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/messages"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (isRead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_read", isRead));
        }

        if (beforeTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_timestamp", beforeTimestamp));
        }

        if (sinceTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_timestamp", sinceTimestamp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagesFromConversationValidateBeforeCall(String conversationId, List<String> fields, List<String> excludeFields, String isRead, OffsetDateTime beforeTimestamp, OffsetDateTime sinceTimestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listMessagesFromConversation(Async)");
        }

        return listMessagesFromConversationCall(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp, _callback);

    }


    private ApiResponse<ConversationsListMessagesFromConversationResponse> listMessagesFromConversationWithHttpInfo(String conversationId, List<String> fields, List<String> excludeFields, String isRead, OffsetDateTime beforeTimestamp, OffsetDateTime sinceTimestamp) throws ApiException {
        okhttp3.Call localVarCall = listMessagesFromConversationValidateBeforeCall(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp, null);
        Type localVarReturnType = new TypeToken<ConversationsListMessagesFromConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMessagesFromConversationAsync(String conversationId, List<String> fields, List<String> excludeFields, String isRead, OffsetDateTime beforeTimestamp, OffsetDateTime sinceTimestamp, final ApiCallback<ConversationsListMessagesFromConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagesFromConversationValidateBeforeCall(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp, _callback);
        Type localVarReturnType = new TypeToken<ConversationsListMessagesFromConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMessagesFromConversationRequestBuilder {
        private final String conversationId;
        private List<String> fields;
        private List<String> excludeFields;
        private String isRead;
        private OffsetDateTime beforeTimestamp;
        private OffsetDateTime sinceTimestamp;

        private ListMessagesFromConversationRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListMessagesFromConversationRequestBuilder
         */
        public ListMessagesFromConversationRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListMessagesFromConversationRequestBuilder
         */
        public ListMessagesFromConversationRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set isRead
         * @param isRead Whether a conversation message has been marked as read. (optional)
         * @return ListMessagesFromConversationRequestBuilder
         */
        public ListMessagesFromConversationRequestBuilder isRead(String isRead) {
            this.isRead = isRead;
            return this;
        }
        
        /**
         * Set beforeTimestamp
         * @param beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListMessagesFromConversationRequestBuilder
         */
        public ListMessagesFromConversationRequestBuilder beforeTimestamp(OffsetDateTime beforeTimestamp) {
            this.beforeTimestamp = beforeTimestamp;
            return this;
        }
        
        /**
         * Set sinceTimestamp
         * @param sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListMessagesFromConversationRequestBuilder
         */
        public ListMessagesFromConversationRequestBuilder sinceTimestamp(OffsetDateTime sinceTimestamp) {
            this.sinceTimestamp = sinceTimestamp;
            return this;
        }
        
        /**
         * Build call for listMessagesFromConversation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMessagesFromConversationCall(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp, _callback);
        }


        /**
         * Execute listMessagesFromConversation request
         * @return ConversationsListMessagesFromConversationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ConversationsListMessagesFromConversationResponse execute() throws ApiException {
            ApiResponse<ConversationsListMessagesFromConversationResponse> localVarResp = listMessagesFromConversationWithHttpInfo(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMessagesFromConversation request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListMessagesFromConversationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ConversationsListMessagesFromConversationResponse> executeWithHttpInfo() throws ApiException {
            return listMessagesFromConversationWithHttpInfo(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp);
        }

        /**
         * Execute listMessagesFromConversation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListMessagesFromConversationResponse> _callback) throws ApiException {
            return listMessagesFromConversationAsync(conversationId, fields, excludeFields, isRead, beforeTimestamp, sinceTimestamp, _callback);
        }
    }

    /**
     * List messages
     * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don&#39;t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @param conversationId The unique id for the conversation. (required)
     * @return ListMessagesFromConversationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListMessagesFromConversationRequestBuilder listMessagesFromConversation(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListMessagesFromConversationRequestBuilder(conversationId);
    }
}
