/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountExportsCreateNewExport200Response;
import com.konfigthis.client.model.AccountExportsCreateNewExportRequest;
import com.konfigthis.client.model.AccountExportsCreateNewExportResponse;
import com.konfigthis.client.model.AccountExportsCreateNewExportdefaultResponse;
import com.konfigthis.client.model.AccountExportsListForGivenAccount200Response;
import com.konfigthis.client.model.AccountExportsListForGivenAccountResponse;
import com.konfigthis.client.model.AccountExportsListForGivenAccountdefaultResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountExportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountExportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountExportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewExportCall(AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountExportsCreateNewExportRequest;

        // create path and map variables
        String localVarPath = "/account-exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewExportValidateBeforeCall(AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountExportsCreateNewExportRequest' is set
        if (accountExportsCreateNewExportRequest == null) {
            throw new ApiException("Missing the required parameter 'accountExportsCreateNewExportRequest' when calling createNewExport(Async)");
        }

        return createNewExportCall(accountExportsCreateNewExportRequest, _callback);

    }


    private ApiResponse<AccountExportsCreateNewExportResponse> createNewExportWithHttpInfo(AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewExportValidateBeforeCall(accountExportsCreateNewExportRequest, null);
        Type localVarReturnType = new TypeToken<AccountExportsCreateNewExportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewExportAsync(AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest, final ApiCallback<AccountExportsCreateNewExportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewExportValidateBeforeCall(accountExportsCreateNewExportRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountExportsCreateNewExportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewExportRequestBuilder {
        private final List<String> includeStages;
        private OffsetDateTime sinceTimestamp;

        private CreateNewExportRequestBuilder(List<String> includeStages) {
            this.includeStages = includeStages;
        }

        /**
         * Set sinceTimestamp
         * @param sinceTimestamp An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit. (optional)
         * @return CreateNewExportRequestBuilder
         */
        public CreateNewExportRequestBuilder sinceTimestamp(OffsetDateTime sinceTimestamp) {
            this.sinceTimestamp = sinceTimestamp;
            return this;
        }
        
        /**
         * Build call for createNewExport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest = buildBodyParams();
            return createNewExportCall(accountExportsCreateNewExportRequest, _callback);
        }

        private AccountExportsCreateNewExportRequest buildBodyParams() {
            AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest = new AccountExportsCreateNewExportRequest();
            if (this.includeStages != null)
            accountExportsCreateNewExportRequest.includeStages(AccountExportsCreateNewExportRequest.IncludeStagesEnum.fromValue(this.includeStages));
            accountExportsCreateNewExportRequest.sinceTimestamp(this.sinceTimestamp);
            return accountExportsCreateNewExportRequest;
        }

        /**
         * Execute createNewExport request
         * @return AccountExportsCreateNewExportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AccountExportsCreateNewExportResponse execute() throws ApiException {
            AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest = buildBodyParams();
            ApiResponse<AccountExportsCreateNewExportResponse> localVarResp = createNewExportWithHttpInfo(accountExportsCreateNewExportRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewExport request with HTTP info returned
         * @return ApiResponse&lt;AccountExportsCreateNewExportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountExportsCreateNewExportResponse> executeWithHttpInfo() throws ApiException {
            AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest = buildBodyParams();
            return createNewExportWithHttpInfo(accountExportsCreateNewExportRequest);
        }

        /**
         * Execute createNewExport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountExportsCreateNewExportResponse> _callback) throws ApiException {
            AccountExportsCreateNewExportRequest accountExportsCreateNewExportRequest = buildBodyParams();
            return createNewExportAsync(accountExportsCreateNewExportRequest, _callback);
        }
    }

    /**
     * Add export
     * Create a new account export in your Mailchimp account.
     * @param accountExportsCreateNewExportRequest  (required)
     * @return CreateNewExportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewExportRequestBuilder createNewExport(List<String> includeStages) throws IllegalArgumentException {
        if (includeStages == null) throw new IllegalArgumentException("\"includeStages\" is required but got null");
        return new CreateNewExportRequestBuilder(includeStages);
    }
    private okhttp3.Call listForGivenAccountCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account-exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForGivenAccountValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listForGivenAccountCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<AccountExportsListForGivenAccountResponse> listForGivenAccountWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listForGivenAccountValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<AccountExportsListForGivenAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForGivenAccountAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<AccountExportsListForGivenAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForGivenAccountValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<AccountExportsListForGivenAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForGivenAccountRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListForGivenAccountRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListForGivenAccountRequestBuilder
         */
        public ListForGivenAccountRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListForGivenAccountRequestBuilder
         */
        public ListForGivenAccountRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListForGivenAccountRequestBuilder
         */
        public ListForGivenAccountRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListForGivenAccountRequestBuilder
         */
        public ListForGivenAccountRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listForGivenAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForGivenAccountCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listForGivenAccount request
         * @return AccountExportsListForGivenAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public AccountExportsListForGivenAccountResponse execute() throws ApiException {
            ApiResponse<AccountExportsListForGivenAccountResponse> localVarResp = listForGivenAccountWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForGivenAccount request with HTTP info returned
         * @return ApiResponse&lt;AccountExportsListForGivenAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountExportsListForGivenAccountResponse> executeWithHttpInfo() throws ApiException {
            return listForGivenAccountWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listForGivenAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountExportsListForGivenAccountResponse> _callback) throws ApiException {
            return listForGivenAccountAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List account exports
     * Get a list of account exports for a given account.
     * @return ListForGivenAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListForGivenAccountRequestBuilder listForGivenAccount() throws IllegalArgumentException {
        return new ListForGivenAccountRequestBuilder();
    }
}
