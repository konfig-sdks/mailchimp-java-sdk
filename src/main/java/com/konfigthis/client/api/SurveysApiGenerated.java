/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SurveysGenerateCampaign200Response;
import com.konfigthis.client.model.SurveysGenerateCampaignResponse;
import com.konfigthis.client.model.SurveysGenerateCampaigndefaultResponse;
import com.konfigthis.client.model.SurveysPublishSurveyActionResponse;
import com.konfigthis.client.model.SurveysPublishSurveyActiondefaultResponse;
import com.konfigthis.client.model.SurveysUnpublishSurveyActionResponse;
import com.konfigthis.client.model.SurveysUnpublishSurveyActiondefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SurveysApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SurveysApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SurveysApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateCampaignCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/surveys/{survey_id}/actions/create-email"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCampaignValidateBeforeCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling generateCampaign(Async)");
        }

        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling generateCampaign(Async)");
        }

        return generateCampaignCall(listId, surveyId, _callback);

    }


    private ApiResponse<SurveysGenerateCampaignResponse> generateCampaignWithHttpInfo(String listId, String surveyId) throws ApiException {
        okhttp3.Call localVarCall = generateCampaignValidateBeforeCall(listId, surveyId, null);
        Type localVarReturnType = new TypeToken<SurveysGenerateCampaignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateCampaignAsync(String listId, String surveyId, final ApiCallback<SurveysGenerateCampaignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCampaignValidateBeforeCall(listId, surveyId, _callback);
        Type localVarReturnType = new TypeToken<SurveysGenerateCampaignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateCampaignRequestBuilder {
        private final String listId;
        private final String surveyId;

        private GenerateCampaignRequestBuilder(String listId, String surveyId) {
            this.listId = listId;
            this.surveyId = surveyId;
        }

        /**
         * Build call for generateCampaign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateCampaignCall(listId, surveyId, _callback);
        }


        /**
         * Execute generateCampaign request
         * @return SurveysGenerateCampaignResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public SurveysGenerateCampaignResponse execute() throws ApiException {
            ApiResponse<SurveysGenerateCampaignResponse> localVarResp = generateCampaignWithHttpInfo(listId, surveyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateCampaign request with HTTP info returned
         * @return ApiResponse&lt;SurveysGenerateCampaignResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SurveysGenerateCampaignResponse> executeWithHttpInfo() throws ApiException {
            return generateCampaignWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute generateCampaign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SurveysGenerateCampaignResponse> _callback) throws ApiException {
            return generateCampaignAsync(listId, surveyId, _callback);
        }
    }

    /**
     * Create a Survey Campaign
     * Utilize the List ID and Survey ID to generate a Campaign that links to your survey.
     * @param listId The unique ID for the list. (required)
     * @param surveyId The ID of the survey. (required)
     * @return GenerateCampaignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCampaignRequestBuilder generateCampaign(String listId, String surveyId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new GenerateCampaignRequestBuilder(listId, surveyId);
    }
    private okhttp3.Call publishSurveyActionCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/surveys/{survey_id}/actions/publish"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishSurveyActionValidateBeforeCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling publishSurveyAction(Async)");
        }

        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling publishSurveyAction(Async)");
        }

        return publishSurveyActionCall(listId, surveyId, _callback);

    }


    private ApiResponse<Void> publishSurveyActionWithHttpInfo(String listId, String surveyId) throws ApiException {
        okhttp3.Call localVarCall = publishSurveyActionValidateBeforeCall(listId, surveyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call publishSurveyActionAsync(String listId, String surveyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishSurveyActionValidateBeforeCall(listId, surveyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PublishSurveyActionRequestBuilder {
        private final String listId;
        private final String surveyId;

        private PublishSurveyActionRequestBuilder(String listId, String surveyId) {
            this.listId = listId;
            this.surveyId = surveyId;
        }

        /**
         * Build call for publishSurveyAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Published </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return publishSurveyActionCall(listId, surveyId, _callback);
        }


        /**
         * Execute publishSurveyAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Published </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            publishSurveyActionWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute publishSurveyAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Published </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return publishSurveyActionWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute publishSurveyAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Published </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return publishSurveyActionAsync(listId, surveyId, _callback);
        }
    }

    /**
     * Publish a Survey
     * Publish a survey that is in draft, unpublished, or has been previously published and edited.
     * @param listId The unique ID for the list. (required)
     * @param surveyId The ID of the survey. (required)
     * @return PublishSurveyActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey Published </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public PublishSurveyActionRequestBuilder publishSurveyAction(String listId, String surveyId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new PublishSurveyActionRequestBuilder(listId, surveyId);
    }
    private okhttp3.Call unpublishSurveyActionCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{list_id}/surveys/{survey_id}/actions/unpublish"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishSurveyActionValidateBeforeCall(String listId, String surveyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling unpublishSurveyAction(Async)");
        }

        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling unpublishSurveyAction(Async)");
        }

        return unpublishSurveyActionCall(listId, surveyId, _callback);

    }


    private ApiResponse<Void> unpublishSurveyActionWithHttpInfo(String listId, String surveyId) throws ApiException {
        okhttp3.Call localVarCall = unpublishSurveyActionValidateBeforeCall(listId, surveyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unpublishSurveyActionAsync(String listId, String surveyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishSurveyActionValidateBeforeCall(listId, surveyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnpublishSurveyActionRequestBuilder {
        private final String listId;
        private final String surveyId;

        private UnpublishSurveyActionRequestBuilder(String listId, String surveyId) {
            this.listId = listId;
            this.surveyId = surveyId;
        }

        /**
         * Build call for unpublishSurveyAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unpublishSurveyActionCall(listId, surveyId, _callback);
        }


        /**
         * Execute unpublishSurveyAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unpublishSurveyActionWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute unpublishSurveyAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unpublishSurveyActionWithHttpInfo(listId, surveyId);
        }

        /**
         * Execute unpublishSurveyAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unpublishSurveyActionAsync(listId, surveyId, _callback);
        }
    }

    /**
     * Unpublish a Survey
     * Unpublish a survey that has been published.
     * @param listId The unique ID for the list. (required)
     * @param surveyId The ID of the survey. (required)
     * @return UnpublishSurveyActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UnpublishSurveyActionRequestBuilder unpublishSurveyAction(String listId, String surveyId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new UnpublishSurveyActionRequestBuilder(listId, surveyId);
    }
}
