/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CampaignFoldersAddNewFolder200Response;
import com.konfigthis.client.model.CampaignFoldersAddNewFolderRequest;
import com.konfigthis.client.model.CampaignFoldersAddNewFolderResponse;
import com.konfigthis.client.model.CampaignFoldersAddNewFolderdefaultResponse;
import com.konfigthis.client.model.CampaignFoldersDeleteFolderResponse;
import com.konfigthis.client.model.CampaignFoldersDeleteFolderdefaultResponse;
import com.konfigthis.client.model.CampaignFoldersGetFolderInfo200Response;
import com.konfigthis.client.model.CampaignFoldersGetFolderInfoResponse;
import com.konfigthis.client.model.CampaignFoldersGetFolderInfodefaultResponse;
import com.konfigthis.client.model.CampaignFoldersListCampaignFolders200Response;
import com.konfigthis.client.model.CampaignFoldersListCampaignFoldersResponse;
import com.konfigthis.client.model.CampaignFoldersListCampaignFoldersdefaultResponse;
import com.konfigthis.client.model.CampaignFoldersUpdateSpecificFolder200Response;
import com.konfigthis.client.model.CampaignFoldersUpdateSpecificFolderResponse;
import com.konfigthis.client.model.CampaignFoldersUpdateSpecificFolderdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewFolderCall(CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignFoldersAddNewFolderRequest;

        // create path and map variables
        String localVarPath = "/campaign-folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewFolderValidateBeforeCall(CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignFoldersAddNewFolderRequest' is set
        if (campaignFoldersAddNewFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignFoldersAddNewFolderRequest' when calling addNewFolder(Async)");
        }

        return addNewFolderCall(campaignFoldersAddNewFolderRequest, _callback);

    }


    private ApiResponse<CampaignFoldersAddNewFolderResponse> addNewFolderWithHttpInfo(CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewFolderValidateBeforeCall(campaignFoldersAddNewFolderRequest, null);
        Type localVarReturnType = new TypeToken<CampaignFoldersAddNewFolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewFolderAsync(CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest, final ApiCallback<CampaignFoldersAddNewFolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewFolderValidateBeforeCall(campaignFoldersAddNewFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignFoldersAddNewFolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewFolderRequestBuilder {
        private final String name;

        private AddNewFolderRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for addNewFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            return addNewFolderCall(campaignFoldersAddNewFolderRequest, _callback);
        }

        private CampaignFoldersAddNewFolderRequest buildBodyParams() {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = new CampaignFoldersAddNewFolderRequest();
            campaignFoldersAddNewFolderRequest.name(this.name);
            return campaignFoldersAddNewFolderRequest;
        }

        /**
         * Execute addNewFolder request
         * @return CampaignFoldersAddNewFolderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignFoldersAddNewFolderResponse execute() throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            ApiResponse<CampaignFoldersAddNewFolderResponse> localVarResp = addNewFolderWithHttpInfo(campaignFoldersAddNewFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewFolder request with HTTP info returned
         * @return ApiResponse&lt;CampaignFoldersAddNewFolderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignFoldersAddNewFolderResponse> executeWithHttpInfo() throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            return addNewFolderWithHttpInfo(campaignFoldersAddNewFolderRequest);
        }

        /**
         * Execute addNewFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignFoldersAddNewFolderResponse> _callback) throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            return addNewFolderAsync(campaignFoldersAddNewFolderRequest, _callback);
        }
    }

    /**
     * Add campaign folder
     * Create a new campaign folder.
     * @param campaignFoldersAddNewFolderRequest  (required)
     * @return AddNewFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewFolderRequestBuilder addNewFolder(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new AddNewFolderRequestBuilder(name);
    }
    private okhttp3.Call deleteFolderCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign-folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(folderId, _callback);

    }


    private ApiResponse<Void> deleteFolderWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFolderAsync(String folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFolderRequestBuilder {
        private final String folderId;

        private DeleteFolderRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for deleteFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFolderCall(folderId, _callback);
        }


        /**
         * Execute deleteFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFolderWithHttpInfo(folderId);
        }

        /**
         * Execute deleteFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFolderWithHttpInfo(folderId);
        }

        /**
         * Execute deleteFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFolderAsync(folderId, _callback);
        }
    }

    /**
     * Delete campaign folder
     * Delete a specific campaign folder, and mark all the campaigns in the folder as &#39;unfiled&#39;.
     * @param folderId The unique id for the campaign folder. (required)
     * @return DeleteFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFolderRequestBuilder deleteFolder(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new DeleteFolderRequestBuilder(folderId);
    }
    private okhttp3.Call getFolderInfoCall(String folderId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign-folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderInfoValidateBeforeCall(String folderId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderInfo(Async)");
        }

        return getFolderInfoCall(folderId, fields, excludeFields, _callback);

    }


    private ApiResponse<CampaignFoldersGetFolderInfoResponse> getFolderInfoWithHttpInfo(String folderId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getFolderInfoValidateBeforeCall(folderId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<CampaignFoldersGetFolderInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderInfoAsync(String folderId, List<String> fields, List<String> excludeFields, final ApiCallback<CampaignFoldersGetFolderInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderInfoValidateBeforeCall(folderId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<CampaignFoldersGetFolderInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderInfoRequestBuilder {
        private final String folderId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetFolderInfoRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFolderInfoRequestBuilder
         */
        public GetFolderInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFolderInfoRequestBuilder
         */
        public GetFolderInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getFolderInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderInfoCall(folderId, fields, excludeFields, _callback);
        }


        /**
         * Execute getFolderInfo request
         * @return CampaignFoldersGetFolderInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignFoldersGetFolderInfoResponse execute() throws ApiException {
            ApiResponse<CampaignFoldersGetFolderInfoResponse> localVarResp = getFolderInfoWithHttpInfo(folderId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderInfo request with HTTP info returned
         * @return ApiResponse&lt;CampaignFoldersGetFolderInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignFoldersGetFolderInfoResponse> executeWithHttpInfo() throws ApiException {
            return getFolderInfoWithHttpInfo(folderId, fields, excludeFields);
        }

        /**
         * Execute getFolderInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignFoldersGetFolderInfoResponse> _callback) throws ApiException {
            return getFolderInfoAsync(folderId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign folder
     * Get information about a specific folder used to organize campaigns.
     * @param folderId The unique id for the campaign folder. (required)
     * @return GetFolderInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderInfoRequestBuilder getFolderInfo(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new GetFolderInfoRequestBuilder(folderId);
    }
    private okhttp3.Call listCampaignFoldersCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign-folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCampaignFoldersValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listCampaignFoldersCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<CampaignFoldersListCampaignFoldersResponse> listCampaignFoldersWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listCampaignFoldersValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<CampaignFoldersListCampaignFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCampaignFoldersAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<CampaignFoldersListCampaignFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCampaignFoldersValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<CampaignFoldersListCampaignFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCampaignFoldersRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListCampaignFoldersRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignFoldersRequestBuilder
         */
        public ListCampaignFoldersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignFoldersRequestBuilder
         */
        public ListCampaignFoldersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListCampaignFoldersRequestBuilder
         */
        public ListCampaignFoldersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListCampaignFoldersRequestBuilder
         */
        public ListCampaignFoldersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listCampaignFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCampaignFoldersCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listCampaignFolders request
         * @return CampaignFoldersListCampaignFoldersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignFoldersListCampaignFoldersResponse execute() throws ApiException {
            ApiResponse<CampaignFoldersListCampaignFoldersResponse> localVarResp = listCampaignFoldersWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCampaignFolders request with HTTP info returned
         * @return ApiResponse&lt;CampaignFoldersListCampaignFoldersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignFoldersListCampaignFoldersResponse> executeWithHttpInfo() throws ApiException {
            return listCampaignFoldersWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listCampaignFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignFoldersListCampaignFoldersResponse> _callback) throws ApiException {
            return listCampaignFoldersAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List campaign folders
     * Get all folders used to organize campaigns.
     * @return ListCampaignFoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCampaignFoldersRequestBuilder listCampaignFolders() throws IllegalArgumentException {
        return new ListCampaignFoldersRequestBuilder();
    }
    private okhttp3.Call updateSpecificFolderCall(String folderId, CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignFoldersAddNewFolderRequest;

        // create path and map variables
        String localVarPath = "/campaign-folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificFolderValidateBeforeCall(String folderId, CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateSpecificFolder(Async)");
        }

        // verify the required parameter 'campaignFoldersAddNewFolderRequest' is set
        if (campaignFoldersAddNewFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignFoldersAddNewFolderRequest' when calling updateSpecificFolder(Async)");
        }

        return updateSpecificFolderCall(folderId, campaignFoldersAddNewFolderRequest, _callback);

    }


    private ApiResponse<CampaignFoldersUpdateSpecificFolderResponse> updateSpecificFolderWithHttpInfo(String folderId, CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificFolderValidateBeforeCall(folderId, campaignFoldersAddNewFolderRequest, null);
        Type localVarReturnType = new TypeToken<CampaignFoldersUpdateSpecificFolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecificFolderAsync(String folderId, CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest, final ApiCallback<CampaignFoldersUpdateSpecificFolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificFolderValidateBeforeCall(folderId, campaignFoldersAddNewFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignFoldersUpdateSpecificFolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecificFolderRequestBuilder {
        private final String name;
        private final String folderId;

        private UpdateSpecificFolderRequestBuilder(String name, String folderId) {
            this.name = name;
            this.folderId = folderId;
        }

        /**
         * Build call for updateSpecificFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            return updateSpecificFolderCall(folderId, campaignFoldersAddNewFolderRequest, _callback);
        }

        private CampaignFoldersAddNewFolderRequest buildBodyParams() {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = new CampaignFoldersAddNewFolderRequest();
            campaignFoldersAddNewFolderRequest.name(this.name);
            return campaignFoldersAddNewFolderRequest;
        }

        /**
         * Execute updateSpecificFolder request
         * @return CampaignFoldersUpdateSpecificFolderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignFoldersUpdateSpecificFolderResponse execute() throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            ApiResponse<CampaignFoldersUpdateSpecificFolderResponse> localVarResp = updateSpecificFolderWithHttpInfo(folderId, campaignFoldersAddNewFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecificFolder request with HTTP info returned
         * @return ApiResponse&lt;CampaignFoldersUpdateSpecificFolderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignFoldersUpdateSpecificFolderResponse> executeWithHttpInfo() throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            return updateSpecificFolderWithHttpInfo(folderId, campaignFoldersAddNewFolderRequest);
        }

        /**
         * Execute updateSpecificFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignFoldersUpdateSpecificFolderResponse> _callback) throws ApiException {
            CampaignFoldersAddNewFolderRequest campaignFoldersAddNewFolderRequest = buildBodyParams();
            return updateSpecificFolderAsync(folderId, campaignFoldersAddNewFolderRequest, _callback);
        }
    }

    /**
     * Update campaign folder
     * Update a specific folder used to organize campaigns.
     * @param folderId The unique id for the campaign folder. (required)
     * @param campaignFoldersAddNewFolderRequest  (required)
     * @return UpdateSpecificFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificFolderRequestBuilder updateSpecificFolder(String name, String folderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new UpdateSpecificFolderRequestBuilder(name, folderId);
    }
}
