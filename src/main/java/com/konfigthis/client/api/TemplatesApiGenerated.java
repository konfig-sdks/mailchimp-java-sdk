/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TemplatesCreateNewTemplate200Response;
import com.konfigthis.client.model.TemplatesCreateNewTemplateRequest;
import com.konfigthis.client.model.TemplatesCreateNewTemplateResponse;
import com.konfigthis.client.model.TemplatesCreateNewTemplatedefaultResponse;
import com.konfigthis.client.model.TemplatesDeleteSpecificTemplateResponse;
import com.konfigthis.client.model.TemplatesDeleteSpecificTemplatedefaultResponse;
import com.konfigthis.client.model.TemplatesGetInfo200Response;
import com.konfigthis.client.model.TemplatesGetInfoResponse;
import com.konfigthis.client.model.TemplatesGetInfodefaultResponse;
import com.konfigthis.client.model.TemplatesListAvailableTemplates200Response;
import com.konfigthis.client.model.TemplatesListAvailableTemplatesResponse;
import com.konfigthis.client.model.TemplatesListAvailableTemplatesdefaultResponse;
import com.konfigthis.client.model.TemplatesUpdateTemplateById200Response;
import com.konfigthis.client.model.TemplatesUpdateTemplateByIdResponse;
import com.konfigthis.client.model.TemplatesUpdateTemplateByIddefaultResponse;
import com.konfigthis.client.model.TemplatesViewDefaultContent200Response;
import com.konfigthis.client.model.TemplatesViewDefaultContentResponse;
import com.konfigthis.client.model.TemplatesViewDefaultContentdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTemplateCall(TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesCreateNewTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTemplateValidateBeforeCall(TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templatesCreateNewTemplateRequest' is set
        if (templatesCreateNewTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesCreateNewTemplateRequest' when calling createNewTemplate(Async)");
        }

        return createNewTemplateCall(templatesCreateNewTemplateRequest, _callback);

    }


    private ApiResponse<TemplatesCreateNewTemplateResponse> createNewTemplateWithHttpInfo(TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(templatesCreateNewTemplateRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesCreateNewTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTemplateAsync(TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest, final ApiCallback<TemplatesCreateNewTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(templatesCreateNewTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesCreateNewTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTemplateRequestBuilder {
        private final String name;
        private final String html;
        private String folderId;

        private CreateNewTemplateRequestBuilder(String name, String html) {
            this.name = name;
            this.html = html;
        }

        /**
         * Set folderId
         * @param folderId The id of the folder the template is currently in. (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Build call for createNewTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            return createNewTemplateCall(templatesCreateNewTemplateRequest, _callback);
        }

        private TemplatesCreateNewTemplateRequest buildBodyParams() {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = new TemplatesCreateNewTemplateRequest();
            templatesCreateNewTemplateRequest.name(this.name);
            templatesCreateNewTemplateRequest.folderId(this.folderId);
            templatesCreateNewTemplateRequest.html(this.html);
            return templatesCreateNewTemplateRequest;
        }

        /**
         * Execute createNewTemplate request
         * @return TemplatesCreateNewTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public TemplatesCreateNewTemplateResponse execute() throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            ApiResponse<TemplatesCreateNewTemplateResponse> localVarResp = createNewTemplateWithHttpInfo(templatesCreateNewTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTemplate request with HTTP info returned
         * @return ApiResponse&lt;TemplatesCreateNewTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplatesCreateNewTemplateResponse> executeWithHttpInfo() throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            return createNewTemplateWithHttpInfo(templatesCreateNewTemplateRequest);
        }

        /**
         * Execute createNewTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplatesCreateNewTemplateResponse> _callback) throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            return createNewTemplateAsync(templatesCreateNewTemplateRequest, _callback);
        }
    }

    /**
     * Add template
     * Create a new template for the account. Only Classic templates are supported.
     * @param templatesCreateNewTemplateRequest  (required)
     * @return CreateNewTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTemplateRequestBuilder createNewTemplate(String name, String html) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (html == null) throw new IllegalArgumentException("\"html\" is required but got null");
            

        return new CreateNewTemplateRequestBuilder(name, html);
    }
    private okhttp3.Call deleteSpecificTemplateCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificTemplateValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteSpecificTemplate(Async)");
        }

        return deleteSpecificTemplateCall(templateId, _callback);

    }


    private ApiResponse<Void> deleteSpecificTemplateWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificTemplateValidateBeforeCall(templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSpecificTemplateAsync(String templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificTemplateValidateBeforeCall(templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSpecificTemplateRequestBuilder {
        private final String templateId;

        private DeleteSpecificTemplateRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for deleteSpecificTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificTemplateCall(templateId, _callback);
        }


        /**
         * Execute deleteSpecificTemplate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSpecificTemplateWithHttpInfo(templateId);
        }

        /**
         * Execute deleteSpecificTemplate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSpecificTemplateWithHttpInfo(templateId);
        }

        /**
         * Execute deleteSpecificTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSpecificTemplateAsync(templateId, _callback);
        }
    }

    /**
     * Delete template
     * Delete a specific template.
     * @param templateId The unique id for the template. (required)
     * @return DeleteSpecificTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificTemplateRequestBuilder deleteSpecificTemplate(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new DeleteSpecificTemplateRequestBuilder(templateId);
    }
    private okhttp3.Call getInfoCall(String templateId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String templateId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getInfo(Async)");
        }

        return getInfoCall(templateId, fields, excludeFields, _callback);

    }


    private ApiResponse<TemplatesGetInfoResponse> getInfoWithHttpInfo(String templateId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(templateId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<TemplatesGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String templateId, List<String> fields, List<String> excludeFields, final ApiCallback<TemplatesGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(templateId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<TemplatesGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String templateId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetInfoRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(templateId, fields, excludeFields, _callback);
        }


        /**
         * Execute getInfo request
         * @return TemplatesGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public TemplatesGetInfoResponse execute() throws ApiException {
            ApiResponse<TemplatesGetInfoResponse> localVarResp = getInfoWithHttpInfo(templateId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;TemplatesGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplatesGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(templateId, fields, excludeFields);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplatesGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(templateId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get template info
     * Get information about a specific template.
     * @param templateId The unique id for the template. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new GetInfoRequestBuilder(templateId);
    }
    private okhttp3.Call listAvailableTemplatesCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String sinceDateCreated, String beforeDateCreated, String type, String category, String folderId, String sortField, String contentType, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (sinceDateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_date_created", sinceDateCreated));
        }

        if (beforeDateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_date_created", beforeDateCreated));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder_id", folderId));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableTemplatesValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String sinceDateCreated, String beforeDateCreated, String type, String category, String folderId, String sortField, String contentType, String sortDir, final ApiCallback _callback) throws ApiException {
        return listAvailableTemplatesCall(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir, _callback);

    }


    private ApiResponse<TemplatesListAvailableTemplatesResponse> listAvailableTemplatesWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String sinceDateCreated, String beforeDateCreated, String type, String category, String folderId, String sortField, String contentType, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listAvailableTemplatesValidateBeforeCall(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir, null);
        Type localVarReturnType = new TypeToken<TemplatesListAvailableTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableTemplatesAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String sinceDateCreated, String beforeDateCreated, String type, String category, String folderId, String sortField, String contentType, String sortDir, final ApiCallback<TemplatesListAvailableTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableTemplatesValidateBeforeCall(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir, _callback);
        Type localVarReturnType = new TypeToken<TemplatesListAvailableTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableTemplatesRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String createdBy;
        private String sinceDateCreated;
        private String beforeDateCreated;
        private String type;
        private String category;
        private String folderId;
        private String sortField;
        private String contentType;
        private String sortDir;

        private ListAvailableTemplatesRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy The Mailchimp account user who created the template. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set sinceDateCreated
         * @param sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder sinceDateCreated(String sinceDateCreated) {
            this.sinceDateCreated = sinceDateCreated;
            return this;
        }
        
        /**
         * Set beforeDateCreated
         * @param beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder beforeDateCreated(String beforeDateCreated) {
            this.beforeDateCreated = beforeDateCreated;
            return this;
        }
        
        /**
         * Set type
         * @param type Limit results based on template type. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set category
         * @param category Limit results based on category. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId The unique folder id. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns user templates sorted by the specified field. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set contentType
         * @param contentType Limit results based on how the template&#39;s content is put together. Only templates of type &#x60;user&#x60; can be filtered by &#x60;content_type&#x60;. If you want to retrieve saved templates created with the legacy email editor, then filter &#x60;content_type&#x60; to &#x60;template&#x60;. If you&#39;d rather pull your saved templates for the new editor, filter to &#x60;multichannel&#x60;. For code your own templates, filter to &#x60;html&#x60;. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder contentType(String contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return ListAvailableTemplatesRequestBuilder
         */
        public ListAvailableTemplatesRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for listAvailableTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableTemplatesCall(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir, _callback);
        }


        /**
         * Execute listAvailableTemplates request
         * @return TemplatesListAvailableTemplatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public TemplatesListAvailableTemplatesResponse execute() throws ApiException {
            ApiResponse<TemplatesListAvailableTemplatesResponse> localVarResp = listAvailableTemplatesWithHttpInfo(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableTemplates request with HTTP info returned
         * @return ApiResponse&lt;TemplatesListAvailableTemplatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplatesListAvailableTemplatesResponse> executeWithHttpInfo() throws ApiException {
            return listAvailableTemplatesWithHttpInfo(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir);
        }

        /**
         * Execute listAvailableTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplatesListAvailableTemplatesResponse> _callback) throws ApiException {
            return listAvailableTemplatesAsync(fields, excludeFields, count, offset, createdBy, sinceDateCreated, beforeDateCreated, type, category, folderId, sortField, contentType, sortDir, _callback);
        }
    }

    /**
     * List templates
     * Get a list of an account&#39;s available templates.
     * @return ListAvailableTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableTemplatesRequestBuilder listAvailableTemplates() throws IllegalArgumentException {
        return new ListAvailableTemplatesRequestBuilder();
    }
    private okhttp3.Call updateTemplateByIdCall(String templateId, TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesCreateNewTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateByIdValidateBeforeCall(String templateId, TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateTemplateById(Async)");
        }

        // verify the required parameter 'templatesCreateNewTemplateRequest' is set
        if (templatesCreateNewTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesCreateNewTemplateRequest' when calling updateTemplateById(Async)");
        }

        return updateTemplateByIdCall(templateId, templatesCreateNewTemplateRequest, _callback);

    }


    private ApiResponse<TemplatesUpdateTemplateByIdResponse> updateTemplateByIdWithHttpInfo(String templateId, TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateByIdValidateBeforeCall(templateId, templatesCreateNewTemplateRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesUpdateTemplateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTemplateByIdAsync(String templateId, TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest, final ApiCallback<TemplatesUpdateTemplateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateByIdValidateBeforeCall(templateId, templatesCreateNewTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesUpdateTemplateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTemplateByIdRequestBuilder {
        private final String name;
        private final String html;
        private final String templateId;
        private String folderId;

        private UpdateTemplateByIdRequestBuilder(String name, String html, String templateId) {
            this.name = name;
            this.html = html;
            this.templateId = templateId;
        }

        /**
         * Set folderId
         * @param folderId The id of the folder the template is currently in. (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Build call for updateTemplateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            return updateTemplateByIdCall(templateId, templatesCreateNewTemplateRequest, _callback);
        }

        private TemplatesCreateNewTemplateRequest buildBodyParams() {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = new TemplatesCreateNewTemplateRequest();
            templatesCreateNewTemplateRequest.name(this.name);
            templatesCreateNewTemplateRequest.folderId(this.folderId);
            templatesCreateNewTemplateRequest.html(this.html);
            return templatesCreateNewTemplateRequest;
        }

        /**
         * Execute updateTemplateById request
         * @return TemplatesUpdateTemplateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public TemplatesUpdateTemplateByIdResponse execute() throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            ApiResponse<TemplatesUpdateTemplateByIdResponse> localVarResp = updateTemplateByIdWithHttpInfo(templateId, templatesCreateNewTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTemplateById request with HTTP info returned
         * @return ApiResponse&lt;TemplatesUpdateTemplateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplatesUpdateTemplateByIdResponse> executeWithHttpInfo() throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            return updateTemplateByIdWithHttpInfo(templateId, templatesCreateNewTemplateRequest);
        }

        /**
         * Execute updateTemplateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplatesUpdateTemplateByIdResponse> _callback) throws ApiException {
            TemplatesCreateNewTemplateRequest templatesCreateNewTemplateRequest = buildBodyParams();
            return updateTemplateByIdAsync(templateId, templatesCreateNewTemplateRequest, _callback);
        }
    }

    /**
     * Update template
     * Update the name, HTML, or &#x60;folder_id&#x60; of an existing template.
     * @param templateId The unique id for the template. (required)
     * @param templatesCreateNewTemplateRequest  (required)
     * @return UpdateTemplateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateByIdRequestBuilder updateTemplateById(String name, String html, String templateId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (html == null) throw new IllegalArgumentException("\"html\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new UpdateTemplateByIdRequestBuilder(name, html, templateId);
    }
    private okhttp3.Call viewDefaultContentCall(String templateId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/default-content"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewDefaultContentValidateBeforeCall(String templateId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling viewDefaultContent(Async)");
        }

        return viewDefaultContentCall(templateId, fields, excludeFields, _callback);

    }


    private ApiResponse<TemplatesViewDefaultContentResponse> viewDefaultContentWithHttpInfo(String templateId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = viewDefaultContentValidateBeforeCall(templateId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<TemplatesViewDefaultContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call viewDefaultContentAsync(String templateId, List<String> fields, List<String> excludeFields, final ApiCallback<TemplatesViewDefaultContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewDefaultContentValidateBeforeCall(templateId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<TemplatesViewDefaultContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ViewDefaultContentRequestBuilder {
        private final String templateId;
        private List<String> fields;
        private List<String> excludeFields;

        private ViewDefaultContentRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ViewDefaultContentRequestBuilder
         */
        public ViewDefaultContentRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ViewDefaultContentRequestBuilder
         */
        public ViewDefaultContentRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for viewDefaultContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return viewDefaultContentCall(templateId, fields, excludeFields, _callback);
        }


        /**
         * Execute viewDefaultContent request
         * @return TemplatesViewDefaultContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public TemplatesViewDefaultContentResponse execute() throws ApiException {
            ApiResponse<TemplatesViewDefaultContentResponse> localVarResp = viewDefaultContentWithHttpInfo(templateId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute viewDefaultContent request with HTTP info returned
         * @return ApiResponse&lt;TemplatesViewDefaultContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplatesViewDefaultContentResponse> executeWithHttpInfo() throws ApiException {
            return viewDefaultContentWithHttpInfo(templateId, fields, excludeFields);
        }

        /**
         * Execute viewDefaultContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplatesViewDefaultContentResponse> _callback) throws ApiException {
            return viewDefaultContentAsync(templateId, fields, excludeFields, _callback);
        }
    }

    /**
     * View default content
     * Get the sections that you can edit in a template, including each section&#39;s default content.
     * @param templateId The unique id for the template. (required)
     * @return ViewDefaultContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ViewDefaultContentRequestBuilder viewDefaultContent(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new ViewDefaultContentRequestBuilder(templateId);
    }
}
