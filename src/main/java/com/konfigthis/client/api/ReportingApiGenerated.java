/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ReportingFacebookAdReport200Response;
import com.konfigthis.client.model.ReportingFacebookAdReportResponse;
import com.konfigthis.client.model.ReportingFacebookAdReportdefaultResponse;
import com.konfigthis.client.model.ReportingGetLandingPageReport200Response;
import com.konfigthis.client.model.ReportingGetLandingPageReportResponse;
import com.konfigthis.client.model.ReportingGetLandingPageReportdefaultResponse;
import com.konfigthis.client.model.ReportingGetSurveyReport200Response;
import com.konfigthis.client.model.ReportingGetSurveyReportResponse;
import com.konfigthis.client.model.ReportingGetSurveyReportdefaultResponse;
import com.konfigthis.client.model.ReportingListFacebookAdsReports200Response;
import com.konfigthis.client.model.ReportingListFacebookAdsReportsResponse;
import com.konfigthis.client.model.ReportingListFacebookAdsReportsdefaultResponse;
import com.konfigthis.client.model.ReportingListFacebookEcommerceReport200Response;
import com.konfigthis.client.model.ReportingListFacebookEcommerceReportResponse;
import com.konfigthis.client.model.ReportingListFacebookEcommerceReportdefaultResponse;
import com.konfigthis.client.model.ReportingListLandingPagesReports200Response;
import com.konfigthis.client.model.ReportingListLandingPagesReportsResponse;
import com.konfigthis.client.model.ReportingListLandingPagesReportsdefaultResponse;
import com.konfigthis.client.model.ReportingListSurveyQuestionsReports200Response;
import com.konfigthis.client.model.ReportingListSurveyQuestionsReportsResponse;
import com.konfigthis.client.model.ReportingListSurveyQuestionsReportsdefaultResponse;
import com.konfigthis.client.model.ReportingListSurveyReports200Response;
import com.konfigthis.client.model.ReportingListSurveyReportsResponse;
import com.konfigthis.client.model.ReportingListSurveyReportsdefaultResponse;
import com.konfigthis.client.model.ReportingSingleSurveyResponse200Response;
import com.konfigthis.client.model.ReportingSingleSurveyResponseResponse;
import com.konfigthis.client.model.ReportingSingleSurveyResponsedefaultResponse;
import com.konfigthis.client.model.ReportingSurveyQuestionAnswersList200Response;
import com.konfigthis.client.model.ReportingSurveyQuestionAnswersListResponse;
import com.konfigthis.client.model.ReportingSurveyQuestionAnswersListdefaultResponse;
import com.konfigthis.client.model.ReportingSurveyQuestionReport200Response;
import com.konfigthis.client.model.ReportingSurveyQuestionReportResponse;
import com.konfigthis.client.model.ReportingSurveyQuestionReportdefaultResponse;
import com.konfigthis.client.model.ReportingSurveyResponsesList200Response;
import com.konfigthis.client.model.ReportingSurveyResponsesListResponse;
import com.konfigthis.client.model.ReportingSurveyResponsesListdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call facebookAdReportCall(String outreachId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/facebook-ads/{outreach_id}"
            .replace("{" + "outreach_id" + "}", localVarApiClient.escapeString(outreachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facebookAdReportValidateBeforeCall(String outreachId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new ApiException("Missing the required parameter 'outreachId' when calling facebookAdReport(Async)");
        }

        return facebookAdReportCall(outreachId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportingFacebookAdReportResponse> facebookAdReportWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = facebookAdReportValidateBeforeCall(outreachId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportingFacebookAdReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call facebookAdReportAsync(String outreachId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportingFacebookAdReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = facebookAdReportValidateBeforeCall(outreachId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportingFacebookAdReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FacebookAdReportRequestBuilder {
        private final String outreachId;
        private List<String> fields;
        private List<String> excludeFields;

        private FacebookAdReportRequestBuilder(String outreachId) {
            this.outreachId = outreachId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return FacebookAdReportRequestBuilder
         */
        public FacebookAdReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return FacebookAdReportRequestBuilder
         */
        public FacebookAdReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for facebookAdReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Facebook Ad report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return facebookAdReportCall(outreachId, fields, excludeFields, _callback);
        }


        /**
         * Execute facebookAdReport request
         * @return ReportingFacebookAdReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Facebook Ad report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingFacebookAdReportResponse execute() throws ApiException {
            ApiResponse<ReportingFacebookAdReportResponse> localVarResp = facebookAdReportWithHttpInfo(outreachId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute facebookAdReport request with HTTP info returned
         * @return ApiResponse&lt;ReportingFacebookAdReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Facebook Ad report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingFacebookAdReportResponse> executeWithHttpInfo() throws ApiException {
            return facebookAdReportWithHttpInfo(outreachId, fields, excludeFields);
        }

        /**
         * Execute facebookAdReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Facebook Ad report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingFacebookAdReportResponse> _callback) throws ApiException {
            return facebookAdReportAsync(outreachId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get facebook ad report
     * Get report of a Facebook ad.
     * @param outreachId The outreach id. (required)
     * @return FacebookAdReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facebook Ad report Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public FacebookAdReportRequestBuilder facebookAdReport(String outreachId) throws IllegalArgumentException {
        if (outreachId == null) throw new IllegalArgumentException("\"outreachId\" is required but got null");
            

        return new FacebookAdReportRequestBuilder(outreachId);
    }
    private okhttp3.Call getLandingPageReportCall(String outreachId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/landing-pages/{outreach_id}"
            .replace("{" + "outreach_id" + "}", localVarApiClient.escapeString(outreachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLandingPageReportValidateBeforeCall(String outreachId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new ApiException("Missing the required parameter 'outreachId' when calling getLandingPageReport(Async)");
        }

        return getLandingPageReportCall(outreachId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportingGetLandingPageReportResponse> getLandingPageReportWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getLandingPageReportValidateBeforeCall(outreachId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportingGetLandingPageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLandingPageReportAsync(String outreachId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportingGetLandingPageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLandingPageReportValidateBeforeCall(outreachId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportingGetLandingPageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLandingPageReportRequestBuilder {
        private final String outreachId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetLandingPageReportRequestBuilder(String outreachId) {
            this.outreachId = outreachId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetLandingPageReportRequestBuilder
         */
        public GetLandingPageReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetLandingPageReportRequestBuilder
         */
        public GetLandingPageReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getLandingPageReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Page Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLandingPageReportCall(outreachId, fields, excludeFields, _callback);
        }


        /**
         * Execute getLandingPageReport request
         * @return ReportingGetLandingPageReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Page Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingGetLandingPageReportResponse execute() throws ApiException {
            ApiResponse<ReportingGetLandingPageReportResponse> localVarResp = getLandingPageReportWithHttpInfo(outreachId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLandingPageReport request with HTTP info returned
         * @return ApiResponse&lt;ReportingGetLandingPageReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Page Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingGetLandingPageReportResponse> executeWithHttpInfo() throws ApiException {
            return getLandingPageReportWithHttpInfo(outreachId, fields, excludeFields);
        }

        /**
         * Execute getLandingPageReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Page Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingGetLandingPageReportResponse> _callback) throws ApiException {
            return getLandingPageReportAsync(outreachId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get landing page report
     * Get report of a landing page.
     * @param outreachId The outreach id. (required)
     * @return GetLandingPageReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Landing Page Report Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetLandingPageReportRequestBuilder getLandingPageReport(String outreachId) throws IllegalArgumentException {
        if (outreachId == null) throw new IllegalArgumentException("\"outreachId\" is required but got null");
            

        return new GetLandingPageReportRequestBuilder(outreachId);
    }
    private okhttp3.Call getSurveyReportCall(String surveyId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys/{survey_id}"
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSurveyReportValidateBeforeCall(String surveyId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling getSurveyReport(Async)");
        }

        return getSurveyReportCall(surveyId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportingGetSurveyReportResponse> getSurveyReportWithHttpInfo(String surveyId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getSurveyReportValidateBeforeCall(surveyId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportingGetSurveyReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSurveyReportAsync(String surveyId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportingGetSurveyReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSurveyReportValidateBeforeCall(surveyId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportingGetSurveyReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSurveyReportRequestBuilder {
        private final String surveyId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetSurveyReportRequestBuilder(String surveyId) {
            this.surveyId = surveyId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSurveyReportRequestBuilder
         */
        public GetSurveyReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSurveyReportRequestBuilder
         */
        public GetSurveyReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getSurveyReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSurveyReportCall(surveyId, fields, excludeFields, _callback);
        }


        /**
         * Execute getSurveyReport request
         * @return ReportingGetSurveyReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingGetSurveyReportResponse execute() throws ApiException {
            ApiResponse<ReportingGetSurveyReportResponse> localVarResp = getSurveyReportWithHttpInfo(surveyId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSurveyReport request with HTTP info returned
         * @return ApiResponse&lt;ReportingGetSurveyReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingGetSurveyReportResponse> executeWithHttpInfo() throws ApiException {
            return getSurveyReportWithHttpInfo(surveyId, fields, excludeFields);
        }

        /**
         * Execute getSurveyReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingGetSurveyReportResponse> _callback) throws ApiException {
            return getSurveyReportAsync(surveyId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get survey report
     * Get report for a survey.
     * @param surveyId The ID of the survey. (required)
     * @return GetSurveyReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey Report Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSurveyReportRequestBuilder getSurveyReport(String surveyId) throws IllegalArgumentException {
        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new GetSurveyReportRequestBuilder(surveyId);
    }
    private okhttp3.Call listFacebookAdsReportsCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/facebook-ads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFacebookAdsReportsValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        return listFacebookAdsReportsCall(fields, excludeFields, count, offset, sortField, sortDir, _callback);

    }


    private ApiResponse<ReportingListFacebookAdsReportsResponse> listFacebookAdsReportsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listFacebookAdsReportsValidateBeforeCall(fields, excludeFields, count, offset, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<ReportingListFacebookAdsReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFacebookAdsReportsAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback<ReportingListFacebookAdsReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFacebookAdsReportsValidateBeforeCall(fields, excludeFields, count, offset, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ReportingListFacebookAdsReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFacebookAdsReportsRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String sortField;
        private String sortDir;

        private ListFacebookAdsReportsRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListFacebookAdsReportsRequestBuilder
         */
        public ListFacebookAdsReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListFacebookAdsReportsRequestBuilder
         */
        public ListFacebookAdsReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListFacebookAdsReportsRequestBuilder
         */
        public ListFacebookAdsReportsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListFacebookAdsReportsRequestBuilder
         */
        public ListFacebookAdsReportsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return ListFacebookAdsReportsRequestBuilder
         */
        public ListFacebookAdsReportsRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return ListFacebookAdsReportsRequestBuilder
         */
        public ListFacebookAdsReportsRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for listFacebookAdsReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Facebook Ad Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFacebookAdsReportsCall(fields, excludeFields, count, offset, sortField, sortDir, _callback);
        }


        /**
         * Execute listFacebookAdsReports request
         * @return ReportingListFacebookAdsReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Facebook Ad Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingListFacebookAdsReportsResponse execute() throws ApiException {
            ApiResponse<ReportingListFacebookAdsReportsResponse> localVarResp = listFacebookAdsReportsWithHttpInfo(fields, excludeFields, count, offset, sortField, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFacebookAdsReports request with HTTP info returned
         * @return ApiResponse&lt;ReportingListFacebookAdsReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Facebook Ad Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingListFacebookAdsReportsResponse> executeWithHttpInfo() throws ApiException {
            return listFacebookAdsReportsWithHttpInfo(fields, excludeFields, count, offset, sortField, sortDir);
        }

        /**
         * Execute listFacebookAdsReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Facebook Ad Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingListFacebookAdsReportsResponse> _callback) throws ApiException {
            return listFacebookAdsReportsAsync(fields, excludeFields, count, offset, sortField, sortDir, _callback);
        }
    }

    /**
     * List facebook ads reports
     * Get reports of Facebook ads.
     * @return ListFacebookAdsReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Facebook Ad Report Instances </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListFacebookAdsReportsRequestBuilder listFacebookAdsReports() throws IllegalArgumentException {
        return new ListFacebookAdsReportsRequestBuilder();
    }
    private okhttp3.Call listFacebookEcommerceReportCall(String outreachId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity"
            .replace("{" + "outreach_id" + "}", localVarApiClient.escapeString(outreachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFacebookEcommerceReportValidateBeforeCall(String outreachId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new ApiException("Missing the required parameter 'outreachId' when calling listFacebookEcommerceReport(Async)");
        }

        return listFacebookEcommerceReportCall(outreachId, fields, excludeFields, count, offset, sortField, _callback);

    }


    private ApiResponse<ReportingListFacebookEcommerceReportResponse> listFacebookEcommerceReportWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField) throws ApiException {
        okhttp3.Call localVarCall = listFacebookEcommerceReportValidateBeforeCall(outreachId, fields, excludeFields, count, offset, sortField, null);
        Type localVarReturnType = new TypeToken<ReportingListFacebookEcommerceReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFacebookEcommerceReportAsync(String outreachId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, final ApiCallback<ReportingListFacebookEcommerceReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFacebookEcommerceReportValidateBeforeCall(outreachId, fields, excludeFields, count, offset, sortField, _callback);
        Type localVarReturnType = new TypeToken<ReportingListFacebookEcommerceReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFacebookEcommerceReportRequestBuilder {
        private final String outreachId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String sortField;

        private ListFacebookEcommerceReportRequestBuilder(String outreachId) {
            this.outreachId = outreachId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListFacebookEcommerceReportRequestBuilder
         */
        public ListFacebookEcommerceReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListFacebookEcommerceReportRequestBuilder
         */
        public ListFacebookEcommerceReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListFacebookEcommerceReportRequestBuilder
         */
        public ListFacebookEcommerceReportRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListFacebookEcommerceReportRequestBuilder
         */
        public ListFacebookEcommerceReportRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return ListFacebookEcommerceReportRequestBuilder
         */
        public ListFacebookEcommerceReportRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Build call for listFacebookEcommerceReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFacebookEcommerceReportCall(outreachId, fields, excludeFields, count, offset, sortField, _callback);
        }


        /**
         * Execute listFacebookEcommerceReport request
         * @return ReportingListFacebookEcommerceReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingListFacebookEcommerceReportResponse execute() throws ApiException {
            ApiResponse<ReportingListFacebookEcommerceReportResponse> localVarResp = listFacebookEcommerceReportWithHttpInfo(outreachId, fields, excludeFields, count, offset, sortField);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFacebookEcommerceReport request with HTTP info returned
         * @return ApiResponse&lt;ReportingListFacebookEcommerceReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingListFacebookEcommerceReportResponse> executeWithHttpInfo() throws ApiException {
            return listFacebookEcommerceReportWithHttpInfo(outreachId, fields, excludeFields, count, offset, sortField);
        }

        /**
         * Execute listFacebookEcommerceReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingListFacebookEcommerceReportResponse> _callback) throws ApiException {
            return listFacebookEcommerceReportAsync(outreachId, fields, excludeFields, count, offset, sortField, _callback);
        }
    }

    /**
     * List facebook ecommerce report
     * Get breakdown of product activity for an outreach.
     * @param outreachId The outreach id. (required)
     * @return ListFacebookEcommerceReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListFacebookEcommerceReportRequestBuilder listFacebookEcommerceReport(String outreachId) throws IllegalArgumentException {
        if (outreachId == null) throw new IllegalArgumentException("\"outreachId\" is required but got null");
            

        return new ListFacebookEcommerceReportRequestBuilder(outreachId);
    }
    private okhttp3.Call listLandingPagesReportsCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/landing-pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLandingPagesReportsValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listLandingPagesReportsCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ReportingListLandingPagesReportsResponse> listLandingPagesReportsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listLandingPagesReportsValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ReportingListLandingPagesReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLandingPagesReportsAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ReportingListLandingPagesReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLandingPagesReportsValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportingListLandingPagesReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLandingPagesReportsRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListLandingPagesReportsRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListLandingPagesReportsRequestBuilder
         */
        public ListLandingPagesReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListLandingPagesReportsRequestBuilder
         */
        public ListLandingPagesReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListLandingPagesReportsRequestBuilder
         */
        public ListLandingPagesReportsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListLandingPagesReportsRequestBuilder
         */
        public ListLandingPagesReportsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listLandingPagesReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Landing Page Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLandingPagesReportsCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listLandingPagesReports request
         * @return ReportingListLandingPagesReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Landing Page Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingListLandingPagesReportsResponse execute() throws ApiException {
            ApiResponse<ReportingListLandingPagesReportsResponse> localVarResp = listLandingPagesReportsWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLandingPagesReports request with HTTP info returned
         * @return ApiResponse&lt;ReportingListLandingPagesReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Landing Page Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingListLandingPagesReportsResponse> executeWithHttpInfo() throws ApiException {
            return listLandingPagesReportsWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listLandingPagesReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Landing Page Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingListLandingPagesReportsResponse> _callback) throws ApiException {
            return listLandingPagesReportsAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List landing pages reports
     * Get reports of landing pages.
     * @return ListLandingPagesReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Landing Page Report Instances </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListLandingPagesReportsRequestBuilder listLandingPagesReports() throws IllegalArgumentException {
        return new ListLandingPagesReportsRequestBuilder();
    }
    private okhttp3.Call listSurveyQuestionsReportsCall(String surveyId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys/{survey_id}/questions"
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSurveyQuestionsReportsValidateBeforeCall(String surveyId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling listSurveyQuestionsReports(Async)");
        }

        return listSurveyQuestionsReportsCall(surveyId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportingListSurveyQuestionsReportsResponse> listSurveyQuestionsReportsWithHttpInfo(String surveyId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listSurveyQuestionsReportsValidateBeforeCall(surveyId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportingListSurveyQuestionsReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSurveyQuestionsReportsAsync(String surveyId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportingListSurveyQuestionsReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSurveyQuestionsReportsValidateBeforeCall(surveyId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportingListSurveyQuestionsReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSurveyQuestionsReportsRequestBuilder {
        private final String surveyId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListSurveyQuestionsReportsRequestBuilder(String surveyId) {
            this.surveyId = surveyId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListSurveyQuestionsReportsRequestBuilder
         */
        public ListSurveyQuestionsReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListSurveyQuestionsReportsRequestBuilder
         */
        public ListSurveyQuestionsReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listSurveyQuestionsReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSurveyQuestionsReportsCall(surveyId, fields, excludeFields, _callback);
        }


        /**
         * Execute listSurveyQuestionsReports request
         * @return ReportingListSurveyQuestionsReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingListSurveyQuestionsReportsResponse execute() throws ApiException {
            ApiResponse<ReportingListSurveyQuestionsReportsResponse> localVarResp = listSurveyQuestionsReportsWithHttpInfo(surveyId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSurveyQuestionsReports request with HTTP info returned
         * @return ApiResponse&lt;ReportingListSurveyQuestionsReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingListSurveyQuestionsReportsResponse> executeWithHttpInfo() throws ApiException {
            return listSurveyQuestionsReportsWithHttpInfo(surveyId, fields, excludeFields);
        }

        /**
         * Execute listSurveyQuestionsReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingListSurveyQuestionsReportsResponse> _callback) throws ApiException {
            return listSurveyQuestionsReportsAsync(surveyId, fields, excludeFields, _callback);
        }
    }

    /**
     * List survey question reports
     * Get reports for survey questions.
     * @param surveyId The ID of the survey. (required)
     * @return ListSurveyQuestionsReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Survey Question Report Instances </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListSurveyQuestionsReportsRequestBuilder listSurveyQuestionsReports(String surveyId) throws IllegalArgumentException {
        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new ListSurveyQuestionsReportsRequestBuilder(surveyId);
    }
    private okhttp3.Call listSurveyReportsCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSurveyReportsValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        return listSurveyReportsCall(fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ReportingListSurveyReportsResponse> listSurveyReportsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listSurveyReportsValidateBeforeCall(fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ReportingListSurveyReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSurveyReportsAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ReportingListSurveyReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSurveyReportsValidateBeforeCall(fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportingListSurveyReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSurveyReportsRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListSurveyReportsRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListSurveyReportsRequestBuilder
         */
        public ListSurveyReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListSurveyReportsRequestBuilder
         */
        public ListSurveyReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListSurveyReportsRequestBuilder
         */
        public ListSurveyReportsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListSurveyReportsRequestBuilder
         */
        public ListSurveyReportsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listSurveyReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSurveyReportsCall(fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listSurveyReports request
         * @return ReportingListSurveyReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingListSurveyReportsResponse execute() throws ApiException {
            ApiResponse<ReportingListSurveyReportsResponse> localVarResp = listSurveyReportsWithHttpInfo(fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSurveyReports request with HTTP info returned
         * @return ApiResponse&lt;ReportingListSurveyReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingListSurveyReportsResponse> executeWithHttpInfo() throws ApiException {
            return listSurveyReportsWithHttpInfo(fields, excludeFields, count, offset);
        }

        /**
         * Execute listSurveyReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Report Instances </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingListSurveyReportsResponse> _callback) throws ApiException {
            return listSurveyReportsAsync(fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List survey reports
     * Get reports for surveys.
     * @return ListSurveyReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Survey Report Instances </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListSurveyReportsRequestBuilder listSurveyReports() throws IllegalArgumentException {
        return new ListSurveyReportsRequestBuilder();
    }
    private okhttp3.Call singleSurveyResponseCall(String surveyId, String responseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys/{survey_id}/responses/{response_id}"
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()))
            .replace("{" + "response_id" + "}", localVarApiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call singleSurveyResponseValidateBeforeCall(String surveyId, String responseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling singleSurveyResponse(Async)");
        }

        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling singleSurveyResponse(Async)");
        }

        return singleSurveyResponseCall(surveyId, responseId, _callback);

    }


    private ApiResponse<ReportingSingleSurveyResponseResponse> singleSurveyResponseWithHttpInfo(String surveyId, String responseId) throws ApiException {
        okhttp3.Call localVarCall = singleSurveyResponseValidateBeforeCall(surveyId, responseId, null);
        Type localVarReturnType = new TypeToken<ReportingSingleSurveyResponseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call singleSurveyResponseAsync(String surveyId, String responseId, final ApiCallback<ReportingSingleSurveyResponseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = singleSurveyResponseValidateBeforeCall(surveyId, responseId, _callback);
        Type localVarReturnType = new TypeToken<ReportingSingleSurveyResponseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SingleSurveyResponseRequestBuilder {
        private final String surveyId;
        private final String responseId;

        private SingleSurveyResponseRequestBuilder(String surveyId, String responseId) {
            this.surveyId = surveyId;
            this.responseId = responseId;
        }

        /**
         * Build call for singleSurveyResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single survey response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return singleSurveyResponseCall(surveyId, responseId, _callback);
        }


        /**
         * Execute singleSurveyResponse request
         * @return ReportingSingleSurveyResponseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single survey response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingSingleSurveyResponseResponse execute() throws ApiException {
            ApiResponse<ReportingSingleSurveyResponseResponse> localVarResp = singleSurveyResponseWithHttpInfo(surveyId, responseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute singleSurveyResponse request with HTTP info returned
         * @return ApiResponse&lt;ReportingSingleSurveyResponseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single survey response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingSingleSurveyResponseResponse> executeWithHttpInfo() throws ApiException {
            return singleSurveyResponseWithHttpInfo(surveyId, responseId);
        }

        /**
         * Execute singleSurveyResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single survey response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingSingleSurveyResponseResponse> _callback) throws ApiException {
            return singleSurveyResponseAsync(surveyId, responseId, _callback);
        }
    }

    /**
     * Get survey response
     * Get a single survey response.
     * @param surveyId The ID of the survey. (required)
     * @param responseId The ID of the survey response. (required)
     * @return SingleSurveyResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single survey response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SingleSurveyResponseRequestBuilder singleSurveyResponse(String surveyId, String responseId) throws IllegalArgumentException {
        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        if (responseId == null) throw new IllegalArgumentException("\"responseId\" is required but got null");
            

        return new SingleSurveyResponseRequestBuilder(surveyId, responseId);
    }
    private okhttp3.Call surveyQuestionAnswersListCall(String surveyId, String questionId, List<String> fields, List<String> excludeFields, String respondentFamiliarityIs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys/{survey_id}/questions/{question_id}/answers"
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()))
            .replace("{" + "question_id" + "}", localVarApiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (respondentFamiliarityIs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("respondent_familiarity_is", respondentFamiliarityIs));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call surveyQuestionAnswersListValidateBeforeCall(String surveyId, String questionId, List<String> fields, List<String> excludeFields, String respondentFamiliarityIs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling surveyQuestionAnswersList(Async)");
        }

        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling surveyQuestionAnswersList(Async)");
        }

        return surveyQuestionAnswersListCall(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs, _callback);

    }


    private ApiResponse<ReportingSurveyQuestionAnswersListResponse> surveyQuestionAnswersListWithHttpInfo(String surveyId, String questionId, List<String> fields, List<String> excludeFields, String respondentFamiliarityIs) throws ApiException {
        okhttp3.Call localVarCall = surveyQuestionAnswersListValidateBeforeCall(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs, null);
        Type localVarReturnType = new TypeToken<ReportingSurveyQuestionAnswersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call surveyQuestionAnswersListAsync(String surveyId, String questionId, List<String> fields, List<String> excludeFields, String respondentFamiliarityIs, final ApiCallback<ReportingSurveyQuestionAnswersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = surveyQuestionAnswersListValidateBeforeCall(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs, _callback);
        Type localVarReturnType = new TypeToken<ReportingSurveyQuestionAnswersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SurveyQuestionAnswersListRequestBuilder {
        private final String surveyId;
        private final String questionId;
        private List<String> fields;
        private List<String> excludeFields;
        private String respondentFamiliarityIs;

        private SurveyQuestionAnswersListRequestBuilder(String surveyId, String questionId) {
            this.surveyId = surveyId;
            this.questionId = questionId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return SurveyQuestionAnswersListRequestBuilder
         */
        public SurveyQuestionAnswersListRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return SurveyQuestionAnswersListRequestBuilder
         */
        public SurveyQuestionAnswersListRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set respondentFamiliarityIs
         * @param respondentFamiliarityIs Filter survey responses by familiarity of the respondents. (optional)
         * @return SurveyQuestionAnswersListRequestBuilder
         */
        public SurveyQuestionAnswersListRequestBuilder respondentFamiliarityIs(String respondentFamiliarityIs) {
            this.respondentFamiliarityIs = respondentFamiliarityIs;
            return this;
        }
        
        /**
         * Build call for surveyQuestionAnswersList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Answers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return surveyQuestionAnswersListCall(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs, _callback);
        }


        /**
         * Execute surveyQuestionAnswersList request
         * @return ReportingSurveyQuestionAnswersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Answers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingSurveyQuestionAnswersListResponse execute() throws ApiException {
            ApiResponse<ReportingSurveyQuestionAnswersListResponse> localVarResp = surveyQuestionAnswersListWithHttpInfo(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute surveyQuestionAnswersList request with HTTP info returned
         * @return ApiResponse&lt;ReportingSurveyQuestionAnswersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Answers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingSurveyQuestionAnswersListResponse> executeWithHttpInfo() throws ApiException {
            return surveyQuestionAnswersListWithHttpInfo(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs);
        }

        /**
         * Execute surveyQuestionAnswersList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Survey Question Answers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingSurveyQuestionAnswersListResponse> _callback) throws ApiException {
            return surveyQuestionAnswersListAsync(surveyId, questionId, fields, excludeFields, respondentFamiliarityIs, _callback);
        }
    }

    /**
     * List answers for question
     * Get answers for a survey question.
     * @param surveyId The ID of the survey. (required)
     * @param questionId The ID of the survey question. (required)
     * @return SurveyQuestionAnswersListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Survey Question Answers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SurveyQuestionAnswersListRequestBuilder surveyQuestionAnswersList(String surveyId, String questionId) throws IllegalArgumentException {
        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        if (questionId == null) throw new IllegalArgumentException("\"questionId\" is required but got null");
            

        return new SurveyQuestionAnswersListRequestBuilder(surveyId, questionId);
    }
    private okhttp3.Call surveyQuestionReportCall(String surveyId, String questionId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys/{survey_id}/questions/{question_id}"
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()))
            .replace("{" + "question_id" + "}", localVarApiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call surveyQuestionReportValidateBeforeCall(String surveyId, String questionId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling surveyQuestionReport(Async)");
        }

        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling surveyQuestionReport(Async)");
        }

        return surveyQuestionReportCall(surveyId, questionId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportingSurveyQuestionReportResponse> surveyQuestionReportWithHttpInfo(String surveyId, String questionId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = surveyQuestionReportValidateBeforeCall(surveyId, questionId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportingSurveyQuestionReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call surveyQuestionReportAsync(String surveyId, String questionId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportingSurveyQuestionReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = surveyQuestionReportValidateBeforeCall(surveyId, questionId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportingSurveyQuestionReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SurveyQuestionReportRequestBuilder {
        private final String surveyId;
        private final String questionId;
        private List<String> fields;
        private List<String> excludeFields;

        private SurveyQuestionReportRequestBuilder(String surveyId, String questionId) {
            this.surveyId = surveyId;
            this.questionId = questionId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return SurveyQuestionReportRequestBuilder
         */
        public SurveyQuestionReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return SurveyQuestionReportRequestBuilder
         */
        public SurveyQuestionReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for surveyQuestionReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Question Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return surveyQuestionReportCall(surveyId, questionId, fields, excludeFields, _callback);
        }


        /**
         * Execute surveyQuestionReport request
         * @return ReportingSurveyQuestionReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Question Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingSurveyQuestionReportResponse execute() throws ApiException {
            ApiResponse<ReportingSurveyQuestionReportResponse> localVarResp = surveyQuestionReportWithHttpInfo(surveyId, questionId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute surveyQuestionReport request with HTTP info returned
         * @return ApiResponse&lt;ReportingSurveyQuestionReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Question Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingSurveyQuestionReportResponse> executeWithHttpInfo() throws ApiException {
            return surveyQuestionReportWithHttpInfo(surveyId, questionId, fields, excludeFields);
        }

        /**
         * Execute surveyQuestionReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Survey Question Report Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingSurveyQuestionReportResponse> _callback) throws ApiException {
            return surveyQuestionReportAsync(surveyId, questionId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get survey question report
     * Get report for a survey question.
     * @param surveyId The ID of the survey. (required)
     * @param questionId The ID of the survey question. (required)
     * @return SurveyQuestionReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey Question Report Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SurveyQuestionReportRequestBuilder surveyQuestionReport(String surveyId, String questionId) throws IllegalArgumentException {
        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        if (questionId == null) throw new IllegalArgumentException("\"questionId\" is required but got null");
            

        return new SurveyQuestionReportRequestBuilder(surveyId, questionId);
    }
    private okhttp3.Call surveyResponsesListCall(String surveyId, List<String> fields, List<String> excludeFields, Integer answeredQuestion, String choseAnswer, String respondentFamiliarityIs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting/surveys/{survey_id}/responses"
            .replace("{" + "survey_id" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (answeredQuestion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answered_question", answeredQuestion));
        }

        if (choseAnswer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chose_answer", choseAnswer));
        }

        if (respondentFamiliarityIs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("respondent_familiarity_is", respondentFamiliarityIs));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call surveyResponsesListValidateBeforeCall(String surveyId, List<String> fields, List<String> excludeFields, Integer answeredQuestion, String choseAnswer, String respondentFamiliarityIs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling surveyResponsesList(Async)");
        }

        return surveyResponsesListCall(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs, _callback);

    }


    private ApiResponse<ReportingSurveyResponsesListResponse> surveyResponsesListWithHttpInfo(String surveyId, List<String> fields, List<String> excludeFields, Integer answeredQuestion, String choseAnswer, String respondentFamiliarityIs) throws ApiException {
        okhttp3.Call localVarCall = surveyResponsesListValidateBeforeCall(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs, null);
        Type localVarReturnType = new TypeToken<ReportingSurveyResponsesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call surveyResponsesListAsync(String surveyId, List<String> fields, List<String> excludeFields, Integer answeredQuestion, String choseAnswer, String respondentFamiliarityIs, final ApiCallback<ReportingSurveyResponsesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = surveyResponsesListValidateBeforeCall(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs, _callback);
        Type localVarReturnType = new TypeToken<ReportingSurveyResponsesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SurveyResponsesListRequestBuilder {
        private final String surveyId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer answeredQuestion;
        private String choseAnswer;
        private String respondentFamiliarityIs;

        private SurveyResponsesListRequestBuilder(String surveyId) {
            this.surveyId = surveyId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return SurveyResponsesListRequestBuilder
         */
        public SurveyResponsesListRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return SurveyResponsesListRequestBuilder
         */
        public SurveyResponsesListRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set answeredQuestion
         * @param answeredQuestion The ID of the question that was answered. (optional)
         * @return SurveyResponsesListRequestBuilder
         */
        public SurveyResponsesListRequestBuilder answeredQuestion(Integer answeredQuestion) {
            this.answeredQuestion = answeredQuestion;
            return this;
        }
        
        /**
         * Set choseAnswer
         * @param choseAnswer The ID of the option chosen to filter responses on. (optional)
         * @return SurveyResponsesListRequestBuilder
         */
        public SurveyResponsesListRequestBuilder choseAnswer(String choseAnswer) {
            this.choseAnswer = choseAnswer;
            return this;
        }
        
        /**
         * Set respondentFamiliarityIs
         * @param respondentFamiliarityIs Filter survey responses by familiarity of the respondents. (optional)
         * @return SurveyResponsesListRequestBuilder
         */
        public SurveyResponsesListRequestBuilder respondentFamiliarityIs(String respondentFamiliarityIs) {
            this.respondentFamiliarityIs = respondentFamiliarityIs;
            return this;
        }
        
        /**
         * Build call for surveyResponsesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of survey responses </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return surveyResponsesListCall(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs, _callback);
        }


        /**
         * Execute surveyResponsesList request
         * @return ReportingSurveyResponsesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of survey responses </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportingSurveyResponsesListResponse execute() throws ApiException {
            ApiResponse<ReportingSurveyResponsesListResponse> localVarResp = surveyResponsesListWithHttpInfo(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute surveyResponsesList request with HTTP info returned
         * @return ApiResponse&lt;ReportingSurveyResponsesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of survey responses </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportingSurveyResponsesListResponse> executeWithHttpInfo() throws ApiException {
            return surveyResponsesListWithHttpInfo(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs);
        }

        /**
         * Execute surveyResponsesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of survey responses </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportingSurveyResponsesListResponse> _callback) throws ApiException {
            return surveyResponsesListAsync(surveyId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs, _callback);
        }
    }

    /**
     * List survey responses
     * Get responses to a survey.
     * @param surveyId The ID of the survey. (required)
     * @return SurveyResponsesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of survey responses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SurveyResponsesListRequestBuilder surveyResponsesList(String surveyId) throws IllegalArgumentException {
        if (surveyId == null) throw new IllegalArgumentException("\"surveyId\" is required but got null");
            

        return new SurveyResponsesListRequestBuilder(surveyId);
    }
}
