/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FileManagerAddNewFolder200Response;
import com.konfigthis.client.model.FileManagerAddNewFolderRequest;
import com.konfigthis.client.model.FileManagerAddNewFolderResponse;
import com.konfigthis.client.model.FileManagerAddNewFolderdefaultResponse;
import com.konfigthis.client.model.FileManagerDeleteFolderByIdResponse;
import com.konfigthis.client.model.FileManagerDeleteFolderByIddefaultResponse;
import com.konfigthis.client.model.FileManagerGetFile200Response;
import com.konfigthis.client.model.FileManagerGetFileResponse;
import com.konfigthis.client.model.FileManagerGetFiledefaultResponse;
import com.konfigthis.client.model.FileManagerGetFolderInfo200Response;
import com.konfigthis.client.model.FileManagerGetFolderInfoResponse;
import com.konfigthis.client.model.FileManagerGetFolderInfodefaultResponse;
import com.konfigthis.client.model.FileManagerGetFolderList200Response;
import com.konfigthis.client.model.FileManagerGetFolderListResponse;
import com.konfigthis.client.model.FileManagerGetFolderListdefaultResponse;
import com.konfigthis.client.model.FileManagerListStoredFiles200Response;
import com.konfigthis.client.model.FileManagerListStoredFilesResponse;
import com.konfigthis.client.model.FileManagerListStoredFilesdefaultResponse;
import com.konfigthis.client.model.FileManagerRemoveFileByIdResponse;
import com.konfigthis.client.model.FileManagerRemoveFileByIddefaultResponse;
import com.konfigthis.client.model.FileManagerUpdateFile200Response;
import com.konfigthis.client.model.FileManagerUpdateFileRequest;
import com.konfigthis.client.model.FileManagerUpdateFileResponse;
import com.konfigthis.client.model.FileManagerUpdateFiledefaultResponse;
import com.konfigthis.client.model.FileManagerUpdateSpecificFolder200Response;
import com.konfigthis.client.model.FileManagerUpdateSpecificFolderResponse;
import com.konfigthis.client.model.FileManagerUpdateSpecificFolderdefaultResponse;
import com.konfigthis.client.model.FileManagerUploadFile200Response;
import com.konfigthis.client.model.FileManagerUploadFileRequest;
import com.konfigthis.client.model.FileManagerUploadFileResponse;
import com.konfigthis.client.model.FileManagerUploadFiledefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileManagerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileManagerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileManagerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewFolderCall(FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileManagerAddNewFolderRequest;

        // create path and map variables
        String localVarPath = "/file-manager/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewFolderValidateBeforeCall(FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileManagerAddNewFolderRequest' is set
        if (fileManagerAddNewFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'fileManagerAddNewFolderRequest' when calling addNewFolder(Async)");
        }

        return addNewFolderCall(fileManagerAddNewFolderRequest, _callback);

    }


    private ApiResponse<FileManagerAddNewFolderResponse> addNewFolderWithHttpInfo(FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewFolderValidateBeforeCall(fileManagerAddNewFolderRequest, null);
        Type localVarReturnType = new TypeToken<FileManagerAddNewFolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewFolderAsync(FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest, final ApiCallback<FileManagerAddNewFolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewFolderValidateBeforeCall(fileManagerAddNewFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<FileManagerAddNewFolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewFolderRequestBuilder {
        private final String name;

        private AddNewFolderRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for addNewFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            return addNewFolderCall(fileManagerAddNewFolderRequest, _callback);
        }

        private FileManagerAddNewFolderRequest buildBodyParams() {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = new FileManagerAddNewFolderRequest();
            fileManagerAddNewFolderRequest.name(this.name);
            return fileManagerAddNewFolderRequest;
        }

        /**
         * Execute addNewFolder request
         * @return FileManagerAddNewFolderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerAddNewFolderResponse execute() throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            ApiResponse<FileManagerAddNewFolderResponse> localVarResp = addNewFolderWithHttpInfo(fileManagerAddNewFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewFolder request with HTTP info returned
         * @return ApiResponse&lt;FileManagerAddNewFolderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerAddNewFolderResponse> executeWithHttpInfo() throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            return addNewFolderWithHttpInfo(fileManagerAddNewFolderRequest);
        }

        /**
         * Execute addNewFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerAddNewFolderResponse> _callback) throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            return addNewFolderAsync(fileManagerAddNewFolderRequest, _callback);
        }
    }

    /**
     * Add folder
     * Create a new folder in the File Manager.
     * @param fileManagerAddNewFolderRequest  (required)
     * @return AddNewFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewFolderRequestBuilder addNewFolder(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new AddNewFolderRequestBuilder(name);
    }
    private okhttp3.Call deleteFolderByIdCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderByIdValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteFolderById(Async)");
        }

        return deleteFolderByIdCall(folderId, _callback);

    }


    private ApiResponse<Void> deleteFolderByIdWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderByIdValidateBeforeCall(folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFolderByIdAsync(String folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderByIdValidateBeforeCall(folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFolderByIdRequestBuilder {
        private final String folderId;

        private DeleteFolderByIdRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for deleteFolderById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFolderByIdCall(folderId, _callback);
        }


        /**
         * Execute deleteFolderById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFolderByIdWithHttpInfo(folderId);
        }

        /**
         * Execute deleteFolderById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFolderByIdWithHttpInfo(folderId);
        }

        /**
         * Execute deleteFolderById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFolderByIdAsync(folderId, _callback);
        }
    }

    /**
     * Delete folder
     * Delete a specific folder in the File Manager.
     * @param folderId The unique id for the File Manager folder. (required)
     * @return DeleteFolderByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFolderByIdRequestBuilder deleteFolderById(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new DeleteFolderByIdRequestBuilder(folderId);
    }
    private okhttp3.Call getFileCall(String fileId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String fileId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }

        return getFileCall(fileId, fields, excludeFields, _callback);

    }


    private ApiResponse<FileManagerGetFileResponse> getFileWithHttpInfo(String fileId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<FileManagerGetFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileAsync(String fileId, List<String> fields, List<String> excludeFields, final ApiCallback<FileManagerGetFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<FileManagerGetFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileRequestBuilder {
        private final String fileId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetFileRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFileRequestBuilder
         */
        public GetFileRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFileRequestBuilder
         */
        public GetFileRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileCall(fileId, fields, excludeFields, _callback);
        }


        /**
         * Execute getFile request
         * @return FileManagerGetFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerGetFileResponse execute() throws ApiException {
            ApiResponse<FileManagerGetFileResponse> localVarResp = getFileWithHttpInfo(fileId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFile request with HTTP info returned
         * @return ApiResponse&lt;FileManagerGetFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerGetFileResponse> executeWithHttpInfo() throws ApiException {
            return getFileWithHttpInfo(fileId, fields, excludeFields);
        }

        /**
         * Execute getFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerGetFileResponse> _callback) throws ApiException {
            return getFileAsync(fileId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get file
     * Get information about a specific file in the File Manager.
     * @param fileId The unique id for the File Manager file. (required)
     * @return GetFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetFileRequestBuilder getFile(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetFileRequestBuilder(fileId);
    }
    private okhttp3.Call getFolderInfoCall(String folderId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderInfoValidateBeforeCall(String folderId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderInfo(Async)");
        }

        return getFolderInfoCall(folderId, fields, excludeFields, _callback);

    }


    private ApiResponse<FileManagerGetFolderInfoResponse> getFolderInfoWithHttpInfo(String folderId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getFolderInfoValidateBeforeCall(folderId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<FileManagerGetFolderInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderInfoAsync(String folderId, List<String> fields, List<String> excludeFields, final ApiCallback<FileManagerGetFolderInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderInfoValidateBeforeCall(folderId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<FileManagerGetFolderInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderInfoRequestBuilder {
        private final String folderId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetFolderInfoRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFolderInfoRequestBuilder
         */
        public GetFolderInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFolderInfoRequestBuilder
         */
        public GetFolderInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getFolderInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderInfoCall(folderId, fields, excludeFields, _callback);
        }


        /**
         * Execute getFolderInfo request
         * @return FileManagerGetFolderInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerGetFolderInfoResponse execute() throws ApiException {
            ApiResponse<FileManagerGetFolderInfoResponse> localVarResp = getFolderInfoWithHttpInfo(folderId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderInfo request with HTTP info returned
         * @return ApiResponse&lt;FileManagerGetFolderInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerGetFolderInfoResponse> executeWithHttpInfo() throws ApiException {
            return getFolderInfoWithHttpInfo(folderId, fields, excludeFields);
        }

        /**
         * Execute getFolderInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerGetFolderInfoResponse> _callback) throws ApiException {
            return getFolderInfoAsync(folderId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get folder
     * Get information about a specific folder in the File Manager.
     * @param folderId The unique id for the File Manager folder. (required)
     * @return GetFolderInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderInfoRequestBuilder getFolderInfo(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new GetFolderInfoRequestBuilder(folderId);
    }
    private okhttp3.Call getFolderListCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String beforeCreatedAt, String sinceCreatedAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (beforeCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_created_at", beforeCreatedAt));
        }

        if (sinceCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_created_at", sinceCreatedAt));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderListValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String beforeCreatedAt, String sinceCreatedAt, final ApiCallback _callback) throws ApiException {
        return getFolderListCall(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt, _callback);

    }


    private ApiResponse<FileManagerGetFolderListResponse> getFolderListWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String beforeCreatedAt, String sinceCreatedAt) throws ApiException {
        okhttp3.Call localVarCall = getFolderListValidateBeforeCall(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt, null);
        Type localVarReturnType = new TypeToken<FileManagerGetFolderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderListAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String createdBy, String beforeCreatedAt, String sinceCreatedAt, final ApiCallback<FileManagerGetFolderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderListValidateBeforeCall(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt, _callback);
        Type localVarReturnType = new TypeToken<FileManagerGetFolderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderListRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String createdBy;
        private String beforeCreatedAt;
        private String sinceCreatedAt;

        private GetFolderListRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy The Mailchimp account user who created the File Manager file. (optional)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set beforeCreatedAt
         * @param beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder beforeCreatedAt(String beforeCreatedAt) {
            this.beforeCreatedAt = beforeCreatedAt;
            return this;
        }
        
        /**
         * Set sinceCreatedAt
         * @param sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetFolderListRequestBuilder
         */
        public GetFolderListRequestBuilder sinceCreatedAt(String sinceCreatedAt) {
            this.sinceCreatedAt = sinceCreatedAt;
            return this;
        }
        
        /**
         * Build call for getFolderList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderListCall(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt, _callback);
        }


        /**
         * Execute getFolderList request
         * @return FileManagerGetFolderListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerGetFolderListResponse execute() throws ApiException {
            ApiResponse<FileManagerGetFolderListResponse> localVarResp = getFolderListWithHttpInfo(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderList request with HTTP info returned
         * @return ApiResponse&lt;FileManagerGetFolderListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerGetFolderListResponse> executeWithHttpInfo() throws ApiException {
            return getFolderListWithHttpInfo(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt);
        }

        /**
         * Execute getFolderList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerGetFolderListResponse> _callback) throws ApiException {
            return getFolderListAsync(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt, _callback);
        }
    }

    /**
     * List folders
     * Get a list of all folders in the File Manager.
     * @return GetFolderListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderListRequestBuilder getFolderList() throws IllegalArgumentException {
        return new GetFolderListRequestBuilder();
    }
    private okhttp3.Call listStoredFilesCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (beforeCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_created_at", beforeCreatedAt));
        }

        if (sinceCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_created_at", sinceCreatedAt));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStoredFilesValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        return listStoredFilesCall(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);

    }


    private ApiResponse<FileManagerListStoredFilesResponse> listStoredFilesWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listStoredFilesValidateBeforeCall(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<FileManagerListStoredFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStoredFilesAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir, final ApiCallback<FileManagerListStoredFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStoredFilesValidateBeforeCall(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<FileManagerListStoredFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListStoredFilesRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;
        private String createdBy;
        private String beforeCreatedAt;
        private String sinceCreatedAt;
        private String sortField;
        private String sortDir;

        private ListStoredFilesRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type The file type for the File Manager file. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy The Mailchimp account user who created the File Manager file. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set beforeCreatedAt
         * @param beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder beforeCreatedAt(String beforeCreatedAt) {
            this.beforeCreatedAt = beforeCreatedAt;
            return this;
        }
        
        /**
         * Set sinceCreatedAt
         * @param sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder sinceCreatedAt(String sinceCreatedAt) {
            this.sinceCreatedAt = sinceCreatedAt;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return ListStoredFilesRequestBuilder
         */
        public ListStoredFilesRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for listStoredFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStoredFilesCall(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);
        }


        /**
         * Execute listStoredFiles request
         * @return FileManagerListStoredFilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerListStoredFilesResponse execute() throws ApiException {
            ApiResponse<FileManagerListStoredFilesResponse> localVarResp = listStoredFilesWithHttpInfo(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listStoredFiles request with HTTP info returned
         * @return ApiResponse&lt;FileManagerListStoredFilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerListStoredFilesResponse> executeWithHttpInfo() throws ApiException {
            return listStoredFilesWithHttpInfo(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir);
        }

        /**
         * Execute listStoredFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerListStoredFilesResponse> _callback) throws ApiException {
            return listStoredFilesAsync(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);
        }
    }

    /**
     * List stored files
     * Get a list of available images and files stored in the File Manager for the account.
     * @return ListStoredFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListStoredFilesRequestBuilder listStoredFiles() throws IllegalArgumentException {
        return new ListStoredFilesRequestBuilder();
    }
    private okhttp3.Call listStoredFiles_0Call(String folderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/folders/{folder_id}/files"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (beforeCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_created_at", beforeCreatedAt));
        }

        if (sinceCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_created_at", sinceCreatedAt));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStoredFiles_0ValidateBeforeCall(String folderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling listStoredFiles_0(Async)");
        }

        return listStoredFiles_0Call(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);

    }


    private ApiResponse<FileManagerListStoredFiles200Response> listStoredFiles_0WithHttpInfo(String folderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listStoredFiles_0ValidateBeforeCall(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<FileManagerListStoredFiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStoredFiles_0Async(String folderId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String createdBy, String beforeCreatedAt, String sinceCreatedAt, String sortField, String sortDir, final ApiCallback<FileManagerListStoredFiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStoredFiles_0ValidateBeforeCall(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<FileManagerListStoredFiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListStoredFiles0RequestBuilder {
        private final String folderId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;
        private String createdBy;
        private String beforeCreatedAt;
        private String sinceCreatedAt;
        private String sortField;
        private String sortDir;

        private ListStoredFiles0RequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type The file type for the File Manager file. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy The Mailchimp account user who created the File Manager file. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set beforeCreatedAt
         * @param beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder beforeCreatedAt(String beforeCreatedAt) {
            this.beforeCreatedAt = beforeCreatedAt;
            return this;
        }
        
        /**
         * Set sinceCreatedAt
         * @param sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder sinceCreatedAt(String sinceCreatedAt) {
            this.sinceCreatedAt = sinceCreatedAt;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return ListStoredFiles0RequestBuilder
         */
        public ListStoredFiles0RequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for listStoredFiles_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStoredFiles_0Call(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);
        }


        /**
         * Execute listStoredFiles_0 request
         * @return FileManagerListStoredFiles200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerListStoredFiles200Response execute() throws ApiException {
            ApiResponse<FileManagerListStoredFiles200Response> localVarResp = listStoredFiles_0WithHttpInfo(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listStoredFiles_0 request with HTTP info returned
         * @return ApiResponse&lt;FileManagerListStoredFiles200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerListStoredFiles200Response> executeWithHttpInfo() throws ApiException {
            return listStoredFiles_0WithHttpInfo(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir);
        }

        /**
         * Execute listStoredFiles_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerListStoredFiles200Response> _callback) throws ApiException {
            return listStoredFiles_0Async(folderId, fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir, _callback);
        }
    }

    /**
     * List stored files
     * Get a list of available images and files stored in this folder.
     * @param folderId The unique id for the File Manager folder. (required)
     * @return ListStoredFiles0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListStoredFiles0RequestBuilder listStoredFiles_0(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new ListStoredFiles0RequestBuilder(folderId);
    }
    private okhttp3.Call removeFileByIdCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file-manager/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileByIdValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeFileById(Async)");
        }

        return removeFileByIdCall(fileId, _callback);

    }


    private ApiResponse<Void> removeFileByIdWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = removeFileByIdValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFileByIdAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileByIdValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFileByIdRequestBuilder {
        private final String fileId;

        private RemoveFileByIdRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for removeFileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFileByIdCall(fileId, _callback);
        }


        /**
         * Execute removeFileById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFileByIdWithHttpInfo(fileId);
        }

        /**
         * Execute removeFileById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFileByIdWithHttpInfo(fileId);
        }

        /**
         * Execute removeFileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFileByIdAsync(fileId, _callback);
        }
    }

    /**
     * Delete file
     * Remove a specific file from the File Manager.
     * @param fileId The unique id for the File Manager file. (required)
     * @return RemoveFileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFileByIdRequestBuilder removeFileById(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new RemoveFileByIdRequestBuilder(fileId);
    }
    private okhttp3.Call updateFileCall(String fileId, FileManagerUpdateFileRequest fileManagerUpdateFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileManagerUpdateFileRequest;

        // create path and map variables
        String localVarPath = "/file-manager/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileValidateBeforeCall(String fileId, FileManagerUpdateFileRequest fileManagerUpdateFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateFile(Async)");
        }

        // verify the required parameter 'fileManagerUpdateFileRequest' is set
        if (fileManagerUpdateFileRequest == null) {
            throw new ApiException("Missing the required parameter 'fileManagerUpdateFileRequest' when calling updateFile(Async)");
        }

        return updateFileCall(fileId, fileManagerUpdateFileRequest, _callback);

    }


    private ApiResponse<FileManagerUpdateFileResponse> updateFileWithHttpInfo(String fileId, FileManagerUpdateFileRequest fileManagerUpdateFileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFileValidateBeforeCall(fileId, fileManagerUpdateFileRequest, null);
        Type localVarReturnType = new TypeToken<FileManagerUpdateFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFileAsync(String fileId, FileManagerUpdateFileRequest fileManagerUpdateFileRequest, final ApiCallback<FileManagerUpdateFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileValidateBeforeCall(fileId, fileManagerUpdateFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileManagerUpdateFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFileRequestBuilder {
        private final String fileId;
        private Integer folderId;
        private String name;

        private UpdateFileRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set folderId
         * @param folderId The id of the folder. Setting &#x60;folder_id&#x60; to &#x60;0&#x60; will remove a file from its current folder. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder folderId(Integer folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the file. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileManagerUpdateFileRequest fileManagerUpdateFileRequest = buildBodyParams();
            return updateFileCall(fileId, fileManagerUpdateFileRequest, _callback);
        }

        private FileManagerUpdateFileRequest buildBodyParams() {
            FileManagerUpdateFileRequest fileManagerUpdateFileRequest = new FileManagerUpdateFileRequest();
            fileManagerUpdateFileRequest.folderId(this.folderId);
            fileManagerUpdateFileRequest.name(this.name);
            return fileManagerUpdateFileRequest;
        }

        /**
         * Execute updateFile request
         * @return FileManagerUpdateFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerUpdateFileResponse execute() throws ApiException {
            FileManagerUpdateFileRequest fileManagerUpdateFileRequest = buildBodyParams();
            ApiResponse<FileManagerUpdateFileResponse> localVarResp = updateFileWithHttpInfo(fileId, fileManagerUpdateFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFile request with HTTP info returned
         * @return ApiResponse&lt;FileManagerUpdateFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerUpdateFileResponse> executeWithHttpInfo() throws ApiException {
            FileManagerUpdateFileRequest fileManagerUpdateFileRequest = buildBodyParams();
            return updateFileWithHttpInfo(fileId, fileManagerUpdateFileRequest);
        }

        /**
         * Execute updateFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerUpdateFileResponse> _callback) throws ApiException {
            FileManagerUpdateFileRequest fileManagerUpdateFileRequest = buildBodyParams();
            return updateFileAsync(fileId, fileManagerUpdateFileRequest, _callback);
        }
    }

    /**
     * Update file
     * Update a file in the File Manager.
     * @param fileId The unique id for the File Manager file. (required)
     * @param fileManagerUpdateFileRequest  (required)
     * @return UpdateFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFileRequestBuilder updateFile(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new UpdateFileRequestBuilder(fileId);
    }
    private okhttp3.Call updateSpecificFolderCall(String folderId, FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileManagerAddNewFolderRequest;

        // create path and map variables
        String localVarPath = "/file-manager/folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificFolderValidateBeforeCall(String folderId, FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateSpecificFolder(Async)");
        }

        // verify the required parameter 'fileManagerAddNewFolderRequest' is set
        if (fileManagerAddNewFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'fileManagerAddNewFolderRequest' when calling updateSpecificFolder(Async)");
        }

        return updateSpecificFolderCall(folderId, fileManagerAddNewFolderRequest, _callback);

    }


    private ApiResponse<FileManagerUpdateSpecificFolderResponse> updateSpecificFolderWithHttpInfo(String folderId, FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificFolderValidateBeforeCall(folderId, fileManagerAddNewFolderRequest, null);
        Type localVarReturnType = new TypeToken<FileManagerUpdateSpecificFolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecificFolderAsync(String folderId, FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest, final ApiCallback<FileManagerUpdateSpecificFolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificFolderValidateBeforeCall(folderId, fileManagerAddNewFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<FileManagerUpdateSpecificFolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecificFolderRequestBuilder {
        private final String name;
        private final String folderId;

        private UpdateSpecificFolderRequestBuilder(String name, String folderId) {
            this.name = name;
            this.folderId = folderId;
        }

        /**
         * Build call for updateSpecificFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            return updateSpecificFolderCall(folderId, fileManagerAddNewFolderRequest, _callback);
        }

        private FileManagerAddNewFolderRequest buildBodyParams() {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = new FileManagerAddNewFolderRequest();
            fileManagerAddNewFolderRequest.name(this.name);
            return fileManagerAddNewFolderRequest;
        }

        /**
         * Execute updateSpecificFolder request
         * @return FileManagerUpdateSpecificFolderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerUpdateSpecificFolderResponse execute() throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            ApiResponse<FileManagerUpdateSpecificFolderResponse> localVarResp = updateSpecificFolderWithHttpInfo(folderId, fileManagerAddNewFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecificFolder request with HTTP info returned
         * @return ApiResponse&lt;FileManagerUpdateSpecificFolderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerUpdateSpecificFolderResponse> executeWithHttpInfo() throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            return updateSpecificFolderWithHttpInfo(folderId, fileManagerAddNewFolderRequest);
        }

        /**
         * Execute updateSpecificFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerUpdateSpecificFolderResponse> _callback) throws ApiException {
            FileManagerAddNewFolderRequest fileManagerAddNewFolderRequest = buildBodyParams();
            return updateSpecificFolderAsync(folderId, fileManagerAddNewFolderRequest, _callback);
        }
    }

    /**
     * Update folder
     * Update a specific File Manager folder.
     * @param folderId The unique id for the File Manager folder. (required)
     * @param fileManagerAddNewFolderRequest  (required)
     * @return UpdateSpecificFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificFolderRequestBuilder updateSpecificFolder(String name, String folderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new UpdateSpecificFolderRequestBuilder(name, folderId);
    }
    private okhttp3.Call uploadFileCall(FileManagerUploadFileRequest fileManagerUploadFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileManagerUploadFileRequest;

        // create path and map variables
        String localVarPath = "/file-manager/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(FileManagerUploadFileRequest fileManagerUploadFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileManagerUploadFileRequest' is set
        if (fileManagerUploadFileRequest == null) {
            throw new ApiException("Missing the required parameter 'fileManagerUploadFileRequest' when calling uploadFile(Async)");
        }

        return uploadFileCall(fileManagerUploadFileRequest, _callback);

    }


    private ApiResponse<FileManagerUploadFileResponse> uploadFileWithHttpInfo(FileManagerUploadFileRequest fileManagerUploadFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(fileManagerUploadFileRequest, null);
        Type localVarReturnType = new TypeToken<FileManagerUploadFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadFileAsync(FileManagerUploadFileRequest fileManagerUploadFileRequest, final ApiCallback<FileManagerUploadFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(fileManagerUploadFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileManagerUploadFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadFileRequestBuilder {
        private final String name;
        private final String fileData;
        private Integer folderId;

        private UploadFileRequestBuilder(String name, String fileData) {
            this.name = name;
            this.fileData = fileData;
        }

        /**
         * Set folderId
         * @param folderId The id of the folder. (optional)
         * @return UploadFileRequestBuilder
         */
        public UploadFileRequestBuilder folderId(Integer folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Build call for uploadFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileManagerUploadFileRequest fileManagerUploadFileRequest = buildBodyParams();
            return uploadFileCall(fileManagerUploadFileRequest, _callback);
        }

        private FileManagerUploadFileRequest buildBodyParams() {
            FileManagerUploadFileRequest fileManagerUploadFileRequest = new FileManagerUploadFileRequest();
            fileManagerUploadFileRequest.folderId(this.folderId);
            fileManagerUploadFileRequest.name(this.name);
            fileManagerUploadFileRequest.fileData(this.fileData);
            return fileManagerUploadFileRequest;
        }

        /**
         * Execute uploadFile request
         * @return FileManagerUploadFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public FileManagerUploadFileResponse execute() throws ApiException {
            FileManagerUploadFileRequest fileManagerUploadFileRequest = buildBodyParams();
            ApiResponse<FileManagerUploadFileResponse> localVarResp = uploadFileWithHttpInfo(fileManagerUploadFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadFile request with HTTP info returned
         * @return ApiResponse&lt;FileManagerUploadFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileManagerUploadFileResponse> executeWithHttpInfo() throws ApiException {
            FileManagerUploadFileRequest fileManagerUploadFileRequest = buildBodyParams();
            return uploadFileWithHttpInfo(fileManagerUploadFileRequest);
        }

        /**
         * Execute uploadFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileManagerUploadFileResponse> _callback) throws ApiException {
            FileManagerUploadFileRequest fileManagerUploadFileRequest = buildBodyParams();
            return uploadFileAsync(fileManagerUploadFileRequest, _callback);
        }
    }

    /**
     * Add file
     * Upload a new image or file to the File Manager.
     * @param fileManagerUploadFileRequest  (required)
     * @return UploadFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UploadFileRequestBuilder uploadFile(String name, String fileData) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (fileData == null) throw new IllegalArgumentException("\"fileData\" is required but got null");
            

        return new UploadFileRequestBuilder(name, fileData);
    }
}
