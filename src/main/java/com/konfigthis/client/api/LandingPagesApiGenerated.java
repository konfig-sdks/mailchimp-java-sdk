/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LandingPagesCreateNewMailchimpLandingPage200Response;
import com.konfigthis.client.model.LandingPagesCreateNewMailchimpLandingPageRequest;
import com.konfigthis.client.model.LandingPagesCreateNewMailchimpLandingPageResponse;
import com.konfigthis.client.model.LandingPagesCreateNewMailchimpLandingPagedefaultResponse;
import com.konfigthis.client.model.LandingPagesDeletePageResponse;
import com.konfigthis.client.model.LandingPagesDeletePagedefaultResponse;
import com.konfigthis.client.model.LandingPagesGetContent200Response;
import com.konfigthis.client.model.LandingPagesGetContentResponse;
import com.konfigthis.client.model.LandingPagesGetContentdefaultResponse;
import com.konfigthis.client.model.LandingPagesGetPageInfo200Response;
import com.konfigthis.client.model.LandingPagesGetPageInfoResponse;
import com.konfigthis.client.model.LandingPagesGetPageInfodefaultResponse;
import com.konfigthis.client.model.LandingPagesList200Response;
import com.konfigthis.client.model.LandingPagesListResponse;
import com.konfigthis.client.model.LandingPagesListdefaultResponse;
import com.konfigthis.client.model.LandingPagesPublishActionResponse;
import com.konfigthis.client.model.LandingPagesPublishActiondefaultResponse;
import com.konfigthis.client.model.LandingPagesUnpublishActionResponse;
import com.konfigthis.client.model.LandingPagesUnpublishActiondefaultResponse;
import com.konfigthis.client.model.LandingPagesUpdatePageById200Response;
import com.konfigthis.client.model.LandingPagesUpdatePageByIdRequest;
import com.konfigthis.client.model.LandingPagesUpdatePageByIdResponse;
import com.konfigthis.client.model.LandingPagesUpdatePageByIddefaultResponse;
import com.konfigthis.client.model.TrackingSettingsProperty;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LandingPagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LandingPagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LandingPagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMailchimpLandingPageCall(LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest, Boolean useDefaultList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = landingPagesCreateNewMailchimpLandingPageRequest;

        // create path and map variables
        String localVarPath = "/landing-pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useDefaultList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_default_list", useDefaultList));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMailchimpLandingPageValidateBeforeCall(LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest, Boolean useDefaultList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'landingPagesCreateNewMailchimpLandingPageRequest' is set
        if (landingPagesCreateNewMailchimpLandingPageRequest == null) {
            throw new ApiException("Missing the required parameter 'landingPagesCreateNewMailchimpLandingPageRequest' when calling createNewMailchimpLandingPage(Async)");
        }

        return createNewMailchimpLandingPageCall(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList, _callback);

    }


    private ApiResponse<LandingPagesCreateNewMailchimpLandingPageResponse> createNewMailchimpLandingPageWithHttpInfo(LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest, Boolean useDefaultList) throws ApiException {
        okhttp3.Call localVarCall = createNewMailchimpLandingPageValidateBeforeCall(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList, null);
        Type localVarReturnType = new TypeToken<LandingPagesCreateNewMailchimpLandingPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMailchimpLandingPageAsync(LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest, Boolean useDefaultList, final ApiCallback<LandingPagesCreateNewMailchimpLandingPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMailchimpLandingPageValidateBeforeCall(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList, _callback);
        Type localVarReturnType = new TypeToken<LandingPagesCreateNewMailchimpLandingPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMailchimpLandingPageRequestBuilder {
        private String title;
        private String description;
        private String name;
        private String storeId;
        private String listId;
        private String type;
        private Integer templateId;
        private TrackingSettingsProperty tracking;
        private Boolean useDefaultList;

        private CreateNewMailchimpLandingPageRequestBuilder() {
        }

        /**
         * Set title
         * @param title The title of this landing page seen in the browser&#39;s title bar. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of this landing page. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of this landing page. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set storeId
         * @param storeId The ID of the store associated with this landing page. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder storeId(String storeId) {
            this.storeId = storeId;
            return this;
        }
        
        /**
         * Set listId
         * @param listId The list&#39;s ID associated with this landing page. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder listId(String listId) {
            this.listId = listId;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of template the landing page has. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId The template_id of this landing page. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder templateId(Integer templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set tracking
         * @param tracking  (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder tracking(TrackingSettingsProperty tracking) {
            this.tracking = tracking;
            return this;
        }
        
        /**
         * Set useDefaultList
         * @param useDefaultList Will create the Landing Page using the account&#39;s Default List instead of requiring a list_id. (optional)
         * @return CreateNewMailchimpLandingPageRequestBuilder
         */
        public CreateNewMailchimpLandingPageRequestBuilder useDefaultList(Boolean useDefaultList) {
            this.useDefaultList = useDefaultList;
            return this;
        }
        
        /**
         * Build call for createNewMailchimpLandingPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest = buildBodyParams();
            return createNewMailchimpLandingPageCall(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList, _callback);
        }

        private LandingPagesCreateNewMailchimpLandingPageRequest buildBodyParams() {
            LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest = new LandingPagesCreateNewMailchimpLandingPageRequest();
            landingPagesCreateNewMailchimpLandingPageRequest.title(this.title);
            landingPagesCreateNewMailchimpLandingPageRequest.description(this.description);
            landingPagesCreateNewMailchimpLandingPageRequest.name(this.name);
            landingPagesCreateNewMailchimpLandingPageRequest.storeId(this.storeId);
            landingPagesCreateNewMailchimpLandingPageRequest.listId(this.listId);
            if (this.type != null)
            landingPagesCreateNewMailchimpLandingPageRequest.type(LandingPagesCreateNewMailchimpLandingPageRequest.TypeEnum.fromValue(this.type));
            landingPagesCreateNewMailchimpLandingPageRequest.templateId(this.templateId);
            landingPagesCreateNewMailchimpLandingPageRequest.tracking(this.tracking);
            return landingPagesCreateNewMailchimpLandingPageRequest;
        }

        /**
         * Execute createNewMailchimpLandingPage request
         * @return LandingPagesCreateNewMailchimpLandingPageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public LandingPagesCreateNewMailchimpLandingPageResponse execute() throws ApiException {
            LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest = buildBodyParams();
            ApiResponse<LandingPagesCreateNewMailchimpLandingPageResponse> localVarResp = createNewMailchimpLandingPageWithHttpInfo(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMailchimpLandingPage request with HTTP info returned
         * @return ApiResponse&lt;LandingPagesCreateNewMailchimpLandingPageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LandingPagesCreateNewMailchimpLandingPageResponse> executeWithHttpInfo() throws ApiException {
            LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest = buildBodyParams();
            return createNewMailchimpLandingPageWithHttpInfo(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList);
        }

        /**
         * Execute createNewMailchimpLandingPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LandingPagesCreateNewMailchimpLandingPageResponse> _callback) throws ApiException {
            LandingPagesCreateNewMailchimpLandingPageRequest landingPagesCreateNewMailchimpLandingPageRequest = buildBodyParams();
            return createNewMailchimpLandingPageAsync(landingPagesCreateNewMailchimpLandingPageRequest, useDefaultList, _callback);
        }
    }

    /**
     * Add landing page
     * Create a new Mailchimp landing page.
     * @param landingPagesCreateNewMailchimpLandingPageRequest  (required)
     * @return CreateNewMailchimpLandingPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMailchimpLandingPageRequestBuilder createNewMailchimpLandingPage() throws IllegalArgumentException {
        return new CreateNewMailchimpLandingPageRequestBuilder();
    }
    private okhttp3.Call deletePageCall(String pageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/landing-pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePageValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePage(Async)");
        }

        return deletePageCall(pageId, _callback);

    }


    private ApiResponse<Void> deletePageWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = deletePageValidateBeforeCall(pageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePageAsync(String pageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePageValidateBeforeCall(pageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePageRequestBuilder {
        private final String pageId;

        private DeletePageRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Build call for deletePage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePageCall(pageId, _callback);
        }


        /**
         * Execute deletePage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePageWithHttpInfo(pageId);
        }

        /**
         * Execute deletePage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePageWithHttpInfo(pageId);
        }

        /**
         * Execute deletePage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePageAsync(pageId, _callback);
        }
    }

    /**
     * Delete landing page
     * Delete a landing page.
     * @param pageId The unique id for the page. (required)
     * @return DeletePageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePageRequestBuilder deletePage(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new DeletePageRequestBuilder(pageId);
    }
    private okhttp3.Call getContentCall(String pageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/landing-pages/{page_id}/content"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentValidateBeforeCall(String pageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getContent(Async)");
        }

        return getContentCall(pageId, fields, excludeFields, _callback);

    }


    private ApiResponse<LandingPagesGetContentResponse> getContentWithHttpInfo(String pageId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getContentValidateBeforeCall(pageId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<LandingPagesGetContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentAsync(String pageId, List<String> fields, List<String> excludeFields, final ApiCallback<LandingPagesGetContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentValidateBeforeCall(pageId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<LandingPagesGetContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentRequestBuilder {
        private final String pageId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetContentRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetContentRequestBuilder
         */
        public GetContentRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetContentRequestBuilder
         */
        public GetContentRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentCall(pageId, fields, excludeFields, _callback);
        }


        /**
         * Execute getContent request
         * @return LandingPagesGetContentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public LandingPagesGetContentResponse execute() throws ApiException {
            ApiResponse<LandingPagesGetContentResponse> localVarResp = getContentWithHttpInfo(pageId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContent request with HTTP info returned
         * @return ApiResponse&lt;LandingPagesGetContentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LandingPagesGetContentResponse> executeWithHttpInfo() throws ApiException {
            return getContentWithHttpInfo(pageId, fields, excludeFields);
        }

        /**
         * Execute getContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LandingPagesGetContentResponse> _callback) throws ApiException {
            return getContentAsync(pageId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get landing page content
     * Get the the HTML for your landing page.
     * @param pageId The unique id for the page. (required)
     * @return GetContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetContentRequestBuilder getContent(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new GetContentRequestBuilder(pageId);
    }
    private okhttp3.Call getPageInfoCall(String pageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/landing-pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageInfoValidateBeforeCall(String pageId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPageInfo(Async)");
        }

        return getPageInfoCall(pageId, fields, excludeFields, _callback);

    }


    private ApiResponse<LandingPagesGetPageInfoResponse> getPageInfoWithHttpInfo(String pageId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getPageInfoValidateBeforeCall(pageId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<LandingPagesGetPageInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPageInfoAsync(String pageId, List<String> fields, List<String> excludeFields, final ApiCallback<LandingPagesGetPageInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageInfoValidateBeforeCall(pageId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<LandingPagesGetPageInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPageInfoRequestBuilder {
        private final String pageId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetPageInfoRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetPageInfoRequestBuilder
         */
        public GetPageInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetPageInfoRequestBuilder
         */
        public GetPageInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getPageInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPageInfoCall(pageId, fields, excludeFields, _callback);
        }


        /**
         * Execute getPageInfo request
         * @return LandingPagesGetPageInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public LandingPagesGetPageInfoResponse execute() throws ApiException {
            ApiResponse<LandingPagesGetPageInfoResponse> localVarResp = getPageInfoWithHttpInfo(pageId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPageInfo request with HTTP info returned
         * @return ApiResponse&lt;LandingPagesGetPageInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LandingPagesGetPageInfoResponse> executeWithHttpInfo() throws ApiException {
            return getPageInfoWithHttpInfo(pageId, fields, excludeFields);
        }

        /**
         * Execute getPageInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LandingPagesGetPageInfoResponse> _callback) throws ApiException {
            return getPageInfoAsync(pageId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get landing page info
     * Get information about a specific page.
     * @param pageId The unique id for the page. (required)
     * @return GetPageInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Landing Pages Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetPageInfoRequestBuilder getPageInfo(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new GetPageInfoRequestBuilder(pageId);
    }
    private okhttp3.Call listCall(String sortDir, String sortField, List<String> fields, List<String> excludeFields, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/landing-pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String sortDir, String sortField, List<String> fields, List<String> excludeFields, Integer count, final ApiCallback _callback) throws ApiException {
        return listCall(sortDir, sortField, fields, excludeFields, count, _callback);

    }


    private ApiResponse<LandingPagesListResponse> listWithHttpInfo(String sortDir, String sortField, List<String> fields, List<String> excludeFields, Integer count) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(sortDir, sortField, fields, excludeFields, count, null);
        Type localVarReturnType = new TypeToken<LandingPagesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String sortDir, String sortField, List<String> fields, List<String> excludeFields, Integer count, final ApiCallback<LandingPagesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(sortDir, sortField, fields, excludeFields, count, _callback);
        Type localVarReturnType = new TypeToken<LandingPagesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String sortDir;
        private String sortField;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;

        private ListRequestBuilder() {
        }

        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Collection </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(sortDir, sortField, fields, excludeFields, count, _callback);
        }


        /**
         * Execute list request
         * @return LandingPagesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Collection </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public LandingPagesListResponse execute() throws ApiException {
            ApiResponse<LandingPagesListResponse> localVarResp = listWithHttpInfo(sortDir, sortField, fields, excludeFields, count);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;LandingPagesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Collection </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LandingPagesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(sortDir, sortField, fields, excludeFields, count);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Landing Pages Collection </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LandingPagesListResponse> _callback) throws ApiException {
            return listAsync(sortDir, sortField, fields, excludeFields, count, _callback);
        }
    }

    /**
     * List landing pages
     * Get all landing pages.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Landing Pages Collection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call publishActionCall(String pageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/landing-pages/{page_id}/actions/publish"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishActionValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling publishAction(Async)");
        }

        return publishActionCall(pageId, _callback);

    }


    private ApiResponse<Void> publishActionWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = publishActionValidateBeforeCall(pageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call publishActionAsync(String pageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishActionValidateBeforeCall(pageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PublishActionRequestBuilder {
        private final String pageId;

        private PublishActionRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Build call for publishAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return publishActionCall(pageId, _callback);
        }


        /**
         * Execute publishAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            publishActionWithHttpInfo(pageId);
        }

        /**
         * Execute publishAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return publishActionWithHttpInfo(pageId);
        }

        /**
         * Execute publishAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return publishActionAsync(pageId, _callback);
        }
    }

    /**
     * Publish landing page
     * Publish a landing page that is in draft, unpublished, or has been previously published and edited.
     * @param pageId The unique id for the page. (required)
     * @return PublishActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public PublishActionRequestBuilder publishAction(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new PublishActionRequestBuilder(pageId);
    }
    private okhttp3.Call unpublishActionCall(String pageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/landing-pages/{page_id}/actions/unpublish"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishActionValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling unpublishAction(Async)");
        }

        return unpublishActionCall(pageId, _callback);

    }


    private ApiResponse<Void> unpublishActionWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = unpublishActionValidateBeforeCall(pageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unpublishActionAsync(String pageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishActionValidateBeforeCall(pageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnpublishActionRequestBuilder {
        private final String pageId;

        private UnpublishActionRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Build call for unpublishAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unpublishActionCall(pageId, _callback);
        }


        /**
         * Execute unpublishAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unpublishActionWithHttpInfo(pageId);
        }

        /**
         * Execute unpublishAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unpublishActionWithHttpInfo(pageId);
        }

        /**
         * Execute unpublishAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unpublishActionAsync(pageId, _callback);
        }
    }

    /**
     * Unpublish landing page
     * Unpublish a landing page that is in draft or has been published.
     * @param pageId The unique id for the page. (required)
     * @return UnpublishActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UnpublishActionRequestBuilder unpublishAction(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new UnpublishActionRequestBuilder(pageId);
    }
    private okhttp3.Call updatePageByIdCall(String pageId, LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = landingPagesUpdatePageByIdRequest;

        // create path and map variables
        String localVarPath = "/landing-pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePageByIdValidateBeforeCall(String pageId, LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling updatePageById(Async)");
        }

        // verify the required parameter 'landingPagesUpdatePageByIdRequest' is set
        if (landingPagesUpdatePageByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'landingPagesUpdatePageByIdRequest' when calling updatePageById(Async)");
        }

        return updatePageByIdCall(pageId, landingPagesUpdatePageByIdRequest, _callback);

    }


    private ApiResponse<LandingPagesUpdatePageByIdResponse> updatePageByIdWithHttpInfo(String pageId, LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePageByIdValidateBeforeCall(pageId, landingPagesUpdatePageByIdRequest, null);
        Type localVarReturnType = new TypeToken<LandingPagesUpdatePageByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePageByIdAsync(String pageId, LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest, final ApiCallback<LandingPagesUpdatePageByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePageByIdValidateBeforeCall(pageId, landingPagesUpdatePageByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<LandingPagesUpdatePageByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePageByIdRequestBuilder {
        private final String pageId;
        private String title;
        private String description;
        private String name;
        private String storeId;
        private String listId;
        private TrackingSettingsProperty tracking;

        private UpdatePageByIdRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Set title
         * @param title The title of this landing page seen in the browser&#39;s title bar. (optional)
         * @return UpdatePageByIdRequestBuilder
         */
        public UpdatePageByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of this landing page. (optional)
         * @return UpdatePageByIdRequestBuilder
         */
        public UpdatePageByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of this landing page. (optional)
         * @return UpdatePageByIdRequestBuilder
         */
        public UpdatePageByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set storeId
         * @param storeId The ID of the store associated with this landing page. (optional)
         * @return UpdatePageByIdRequestBuilder
         */
        public UpdatePageByIdRequestBuilder storeId(String storeId) {
            this.storeId = storeId;
            return this;
        }
        
        /**
         * Set listId
         * @param listId The list&#39;s ID associated with this landing page. (optional)
         * @return UpdatePageByIdRequestBuilder
         */
        public UpdatePageByIdRequestBuilder listId(String listId) {
            this.listId = listId;
            return this;
        }
        
        /**
         * Set tracking
         * @param tracking  (optional)
         * @return UpdatePageByIdRequestBuilder
         */
        public UpdatePageByIdRequestBuilder tracking(TrackingSettingsProperty tracking) {
            this.tracking = tracking;
            return this;
        }
        
        /**
         * Build call for updatePageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest = buildBodyParams();
            return updatePageByIdCall(pageId, landingPagesUpdatePageByIdRequest, _callback);
        }

        private LandingPagesUpdatePageByIdRequest buildBodyParams() {
            LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest = new LandingPagesUpdatePageByIdRequest();
            landingPagesUpdatePageByIdRequest.title(this.title);
            landingPagesUpdatePageByIdRequest.description(this.description);
            landingPagesUpdatePageByIdRequest.name(this.name);
            landingPagesUpdatePageByIdRequest.storeId(this.storeId);
            landingPagesUpdatePageByIdRequest.listId(this.listId);
            landingPagesUpdatePageByIdRequest.tracking(this.tracking);
            return landingPagesUpdatePageByIdRequest;
        }

        /**
         * Execute updatePageById request
         * @return LandingPagesUpdatePageByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public LandingPagesUpdatePageByIdResponse execute() throws ApiException {
            LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest = buildBodyParams();
            ApiResponse<LandingPagesUpdatePageByIdResponse> localVarResp = updatePageByIdWithHttpInfo(pageId, landingPagesUpdatePageByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePageById request with HTTP info returned
         * @return ApiResponse&lt;LandingPagesUpdatePageByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LandingPagesUpdatePageByIdResponse> executeWithHttpInfo() throws ApiException {
            LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest = buildBodyParams();
            return updatePageByIdWithHttpInfo(pageId, landingPagesUpdatePageByIdRequest);
        }

        /**
         * Execute updatePageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LandingPagesUpdatePageByIdResponse> _callback) throws ApiException {
            LandingPagesUpdatePageByIdRequest landingPagesUpdatePageByIdRequest = buildBodyParams();
            return updatePageByIdAsync(pageId, landingPagesUpdatePageByIdRequest, _callback);
        }
    }

    /**
     * Update landing page
     * Update a landing page.
     * @param pageId The unique id for the page. (required)
     * @param landingPagesUpdatePageByIdRequest  (required)
     * @return UpdatePageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePageByIdRequestBuilder updatePageById(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new UpdatePageByIdRequestBuilder(pageId);
    }
}
