/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.VerifiedDomainsAddDomainToAccount200Response;
import com.konfigthis.client.model.VerifiedDomainsAddDomainToAccountRequest;
import com.konfigthis.client.model.VerifiedDomainsAddDomainToAccountResponse;
import com.konfigthis.client.model.VerifiedDomainsAddDomainToAccountdefaultResponse;
import com.konfigthis.client.model.VerifiedDomainsDeleteDomainResponse;
import com.konfigthis.client.model.VerifiedDomainsDeleteDomaindefaultResponse;
import com.konfigthis.client.model.VerifiedDomainsGetInfo200Response;
import com.konfigthis.client.model.VerifiedDomainsGetInfoResponse;
import com.konfigthis.client.model.VerifiedDomainsGetInfodefaultResponse;
import com.konfigthis.client.model.VerifiedDomainsListSendingDomains200Response;
import com.konfigthis.client.model.VerifiedDomainsListSendingDomainsResponse;
import com.konfigthis.client.model.VerifiedDomainsListSendingDomainsdefaultResponse;
import com.konfigthis.client.model.VerifiedDomainsVerifyDomainForSending200Response;
import com.konfigthis.client.model.VerifiedDomainsVerifyDomainForSendingRequest;
import com.konfigthis.client.model.VerifiedDomainsVerifyDomainForSendingResponse;
import com.konfigthis.client.model.VerifiedDomainsVerifyDomainForSendingdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VerifiedDomainsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifiedDomainsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VerifiedDomainsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDomainToAccountCall(VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifiedDomainsAddDomainToAccountRequest;

        // create path and map variables
        String localVarPath = "/verified-domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDomainToAccountValidateBeforeCall(VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifiedDomainsAddDomainToAccountRequest' is set
        if (verifiedDomainsAddDomainToAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'verifiedDomainsAddDomainToAccountRequest' when calling addDomainToAccount(Async)");
        }

        return addDomainToAccountCall(verifiedDomainsAddDomainToAccountRequest, _callback);

    }


    private ApiResponse<VerifiedDomainsAddDomainToAccountResponse> addDomainToAccountWithHttpInfo(VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = addDomainToAccountValidateBeforeCall(verifiedDomainsAddDomainToAccountRequest, null);
        Type localVarReturnType = new TypeToken<VerifiedDomainsAddDomainToAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDomainToAccountAsync(VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest, final ApiCallback<VerifiedDomainsAddDomainToAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDomainToAccountValidateBeforeCall(verifiedDomainsAddDomainToAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifiedDomainsAddDomainToAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDomainToAccountRequestBuilder {
        private final String verificationEmail;

        private AddDomainToAccountRequestBuilder(String verificationEmail) {
            this.verificationEmail = verificationEmail;
        }

        /**
         * Build call for addDomainToAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly-created domain. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest = buildBodyParams();
            return addDomainToAccountCall(verifiedDomainsAddDomainToAccountRequest, _callback);
        }

        private VerifiedDomainsAddDomainToAccountRequest buildBodyParams() {
            VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest = new VerifiedDomainsAddDomainToAccountRequest();
            verifiedDomainsAddDomainToAccountRequest.verificationEmail(this.verificationEmail);
            return verifiedDomainsAddDomainToAccountRequest;
        }

        /**
         * Execute addDomainToAccount request
         * @return VerifiedDomainsAddDomainToAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly-created domain. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public VerifiedDomainsAddDomainToAccountResponse execute() throws ApiException {
            VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest = buildBodyParams();
            ApiResponse<VerifiedDomainsAddDomainToAccountResponse> localVarResp = addDomainToAccountWithHttpInfo(verifiedDomainsAddDomainToAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDomainToAccount request with HTTP info returned
         * @return ApiResponse&lt;VerifiedDomainsAddDomainToAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly-created domain. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifiedDomainsAddDomainToAccountResponse> executeWithHttpInfo() throws ApiException {
            VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest = buildBodyParams();
            return addDomainToAccountWithHttpInfo(verifiedDomainsAddDomainToAccountRequest);
        }

        /**
         * Execute addDomainToAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly-created domain. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifiedDomainsAddDomainToAccountResponse> _callback) throws ApiException {
            VerifiedDomainsAddDomainToAccountRequest verifiedDomainsAddDomainToAccountRequest = buildBodyParams();
            return addDomainToAccountAsync(verifiedDomainsAddDomainToAccountRequest, _callback);
        }
    }

    /**
     * Add domain to account
     * Add a domain to the account.
     * @param verifiedDomainsAddDomainToAccountRequest  (required)
     * @return AddDomainToAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly-created domain. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public AddDomainToAccountRequestBuilder addDomainToAccount(String verificationEmail) throws IllegalArgumentException {
        if (verificationEmail == null) throw new IllegalArgumentException("\"verificationEmail\" is required but got null");
            

        return new AddDomainToAccountRequestBuilder(verificationEmail);
    }
    private okhttp3.Call deleteDomainCall(String domainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verified-domains/{domain_name}"
            .replace("{" + "domain_name" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainValidateBeforeCall(String domainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling deleteDomain(Async)");
        }

        return deleteDomainCall(domainName, _callback);

    }


    private ApiResponse<Void> deleteDomainWithHttpInfo(String domainName) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(domainName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDomainAsync(String domainName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(domainName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDomainRequestBuilder {
        private final String domainName;

        private DeleteDomainRequestBuilder(String domainName) {
            this.domainName = domainName;
        }

        /**
         * Build call for deleteDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDomainCall(domainName, _callback);
        }


        /**
         * Execute deleteDomain request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDomainWithHttpInfo(domainName);
        }

        /**
         * Execute deleteDomain request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDomainWithHttpInfo(domainName);
        }

        /**
         * Execute deleteDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDomainAsync(domainName, _callback);
        }
    }

    /**
     * Delete domain
     * Delete a verified domain from the account.
     * @param domainName The domain name. (required)
     * @return DeleteDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDomainRequestBuilder deleteDomain(String domainName) throws IllegalArgumentException {
        if (domainName == null) throw new IllegalArgumentException("\"domainName\" is required but got null");
            

        return new DeleteDomainRequestBuilder(domainName);
    }
    private okhttp3.Call getInfoCall(String domainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verified-domains/{domain_name}"
            .replace("{" + "domain_name" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String domainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling getInfo(Async)");
        }

        return getInfoCall(domainName, _callback);

    }


    private ApiResponse<VerifiedDomainsGetInfoResponse> getInfoWithHttpInfo(String domainName) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(domainName, null);
        Type localVarReturnType = new TypeToken<VerifiedDomainsGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String domainName, final ApiCallback<VerifiedDomainsGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(domainName, _callback);
        Type localVarReturnType = new TypeToken<VerifiedDomainsGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String domainName;

        private GetInfoRequestBuilder(String domainName) {
            this.domainName = domainName;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(domainName, _callback);
        }


        /**
         * Execute getInfo request
         * @return VerifiedDomainsGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public VerifiedDomainsGetInfoResponse execute() throws ApiException {
            ApiResponse<VerifiedDomainsGetInfoResponse> localVarResp = getInfoWithHttpInfo(domainName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;VerifiedDomainsGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifiedDomainsGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(domainName);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifiedDomainsGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(domainName, _callback);
        }
    }

    /**
     * Get domain info
     * Get the details for a single domain on the account.
     * @param domainName The domain name. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String domainName) throws IllegalArgumentException {
        if (domainName == null) throw new IllegalArgumentException("\"domainName\" is required but got null");
            

        return new GetInfoRequestBuilder(domainName);
    }
    private okhttp3.Call listSendingDomainsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verified-domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSendingDomainsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSendingDomainsCall(_callback);

    }


    private ApiResponse<VerifiedDomainsListSendingDomainsResponse> listSendingDomainsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSendingDomainsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VerifiedDomainsListSendingDomainsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSendingDomainsAsync(final ApiCallback<VerifiedDomainsListSendingDomainsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSendingDomainsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VerifiedDomainsListSendingDomainsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSendingDomainsRequestBuilder {

        private ListSendingDomainsRequestBuilder() {
        }

        /**
         * Build call for listSendingDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domains on the account. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSendingDomainsCall(_callback);
        }


        /**
         * Execute listSendingDomains request
         * @return VerifiedDomainsListSendingDomainsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domains on the account. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public VerifiedDomainsListSendingDomainsResponse execute() throws ApiException {
            ApiResponse<VerifiedDomainsListSendingDomainsResponse> localVarResp = listSendingDomainsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSendingDomains request with HTTP info returned
         * @return ApiResponse&lt;VerifiedDomainsListSendingDomainsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domains on the account. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifiedDomainsListSendingDomainsResponse> executeWithHttpInfo() throws ApiException {
            return listSendingDomainsWithHttpInfo();
        }

        /**
         * Execute listSendingDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domains on the account. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifiedDomainsListSendingDomainsResponse> _callback) throws ApiException {
            return listSendingDomainsAsync(_callback);
        }
    }

    /**
     * List sending domains
     * Get all of the sending domains on the account.
     * @return ListSendingDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domains on the account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListSendingDomainsRequestBuilder listSendingDomains() throws IllegalArgumentException {
        return new ListSendingDomainsRequestBuilder();
    }
    private okhttp3.Call verifyDomainForSendingCall(String domainName, VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifiedDomainsVerifyDomainForSendingRequest;

        // create path and map variables
        String localVarPath = "/verified-domains/{domain_name}/actions/verify"
            .replace("{" + "domain_name" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDomainForSendingValidateBeforeCall(String domainName, VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling verifyDomainForSending(Async)");
        }

        // verify the required parameter 'verifiedDomainsVerifyDomainForSendingRequest' is set
        if (verifiedDomainsVerifyDomainForSendingRequest == null) {
            throw new ApiException("Missing the required parameter 'verifiedDomainsVerifyDomainForSendingRequest' when calling verifyDomainForSending(Async)");
        }

        return verifyDomainForSendingCall(domainName, verifiedDomainsVerifyDomainForSendingRequest, _callback);

    }


    private ApiResponse<VerifiedDomainsVerifyDomainForSendingResponse> verifyDomainForSendingWithHttpInfo(String domainName, VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyDomainForSendingValidateBeforeCall(domainName, verifiedDomainsVerifyDomainForSendingRequest, null);
        Type localVarReturnType = new TypeToken<VerifiedDomainsVerifyDomainForSendingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDomainForSendingAsync(String domainName, VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest, final ApiCallback<VerifiedDomainsVerifyDomainForSendingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDomainForSendingValidateBeforeCall(domainName, verifiedDomainsVerifyDomainForSendingRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifiedDomainsVerifyDomainForSendingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDomainForSendingRequestBuilder {
        private final String code;
        private final String domainName;

        private VerifyDomainForSendingRequestBuilder(String code, String domainName) {
            this.code = code;
            this.domainName = domainName;
        }

        /**
         * Build call for verifyDomainForSending
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domain being verified for sending. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest = buildBodyParams();
            return verifyDomainForSendingCall(domainName, verifiedDomainsVerifyDomainForSendingRequest, _callback);
        }

        private VerifiedDomainsVerifyDomainForSendingRequest buildBodyParams() {
            VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest = new VerifiedDomainsVerifyDomainForSendingRequest();
            verifiedDomainsVerifyDomainForSendingRequest.code(this.code);
            return verifiedDomainsVerifyDomainForSendingRequest;
        }

        /**
         * Execute verifyDomainForSending request
         * @return VerifiedDomainsVerifyDomainForSendingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domain being verified for sending. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public VerifiedDomainsVerifyDomainForSendingResponse execute() throws ApiException {
            VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest = buildBodyParams();
            ApiResponse<VerifiedDomainsVerifyDomainForSendingResponse> localVarResp = verifyDomainForSendingWithHttpInfo(domainName, verifiedDomainsVerifyDomainForSendingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDomainForSending request with HTTP info returned
         * @return ApiResponse&lt;VerifiedDomainsVerifyDomainForSendingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domain being verified for sending. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifiedDomainsVerifyDomainForSendingResponse> executeWithHttpInfo() throws ApiException {
            VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest = buildBodyParams();
            return verifyDomainForSendingWithHttpInfo(domainName, verifiedDomainsVerifyDomainForSendingRequest);
        }

        /**
         * Execute verifyDomainForSending request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The domain being verified for sending. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifiedDomainsVerifyDomainForSendingResponse> _callback) throws ApiException {
            VerifiedDomainsVerifyDomainForSendingRequest verifiedDomainsVerifyDomainForSendingRequest = buildBodyParams();
            return verifyDomainForSendingAsync(domainName, verifiedDomainsVerifyDomainForSendingRequest, _callback);
        }
    }

    /**
     * Verify domain
     * Verify a domain for sending.
     * @param domainName The domain name. (required)
     * @param verifiedDomainsVerifyDomainForSendingRequest  (required)
     * @return VerifyDomainForSendingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain being verified for sending. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDomainForSendingRequestBuilder verifyDomainForSending(String code, String domainName) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (domainName == null) throw new IllegalArgumentException("\"domainName\" is required but got null");
            

        return new VerifyDomainForSendingRequestBuilder(code, domainName);
    }
}
