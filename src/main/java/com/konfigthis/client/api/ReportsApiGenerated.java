/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.ReportsCampaignRecipientInfo200Response;
import com.konfigthis.client.model.ReportsCampaignRecipientInfoResponse;
import com.konfigthis.client.model.ReportsCampaignRecipientInfodefaultResponse;
import com.konfigthis.client.model.ReportsGetAbuseReport200Response;
import com.konfigthis.client.model.ReportsGetAbuseReportResponse;
import com.konfigthis.client.model.ReportsGetAbuseReportdefaultResponse;
import com.konfigthis.client.model.ReportsGetCampaignClickDetails200Response;
import com.konfigthis.client.model.ReportsGetCampaignClickDetailsResponse;
import com.konfigthis.client.model.ReportsGetCampaignClickDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsGetCampaignProductActivity200Response;
import com.konfigthis.client.model.ReportsGetCampaignProductActivityResponse;
import com.konfigthis.client.model.ReportsGetCampaignProductActivitydefaultResponse;
import com.konfigthis.client.model.ReportsGetSubscriberActivity200Response;
import com.konfigthis.client.model.ReportsGetSubscriberActivityResponse;
import com.konfigthis.client.model.ReportsGetSubscriberActivitydefaultResponse;
import com.konfigthis.client.model.ReportsGetUnsubscribedMemberInfo200Response;
import com.konfigthis.client.model.ReportsGetUnsubscribedMemberInfoResponse;
import com.konfigthis.client.model.ReportsGetUnsubscribedMemberInfodefaultResponse;
import com.konfigthis.client.model.ReportsListAbuseReports200Response;
import com.konfigthis.client.model.ReportsListAbuseReportsResponse;
import com.konfigthis.client.model.ReportsListAbuseReportsdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignFeedback200Response;
import com.konfigthis.client.model.ReportsListCampaignFeedbackResponse;
import com.konfigthis.client.model.ReportsListCampaignFeedbackdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignOpenDetails200Response;
import com.konfigthis.client.model.ReportsListCampaignOpenDetailsResponse;
import com.konfigthis.client.model.ReportsListCampaignOpenDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignRecipients200Response;
import com.konfigthis.client.model.ReportsListCampaignRecipientsResponse;
import com.konfigthis.client.model.ReportsListCampaignRecipientsdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignReports200Response;
import com.konfigthis.client.model.ReportsListCampaignReportsResponse;
import com.konfigthis.client.model.ReportsListCampaignReportsdefaultResponse;
import com.konfigthis.client.model.ReportsListChildCampaignReports200Response;
import com.konfigthis.client.model.ReportsListChildCampaignReportsResponse;
import com.konfigthis.client.model.ReportsListChildCampaignReportsdefaultResponse;
import com.konfigthis.client.model.ReportsListClickedLinkSubscribers200Response;
import com.konfigthis.client.model.ReportsListClickedLinkSubscribersResponse;
import com.konfigthis.client.model.ReportsListClickedLinkSubscribersdefaultResponse;
import com.konfigthis.client.model.ReportsListDomainPerformanceStats200Response;
import com.konfigthis.client.model.ReportsListDomainPerformanceStatsResponse;
import com.konfigthis.client.model.ReportsListDomainPerformanceStatsdefaultResponse;
import com.konfigthis.client.model.ReportsListEepurlActivity200Response;
import com.konfigthis.client.model.ReportsListEepurlActivityResponse;
import com.konfigthis.client.model.ReportsListEepurlActivitydefaultResponse;
import com.konfigthis.client.model.ReportsListEmailActivity200Response;
import com.konfigthis.client.model.ReportsListEmailActivityResponse;
import com.konfigthis.client.model.ReportsListEmailActivitydefaultResponse;
import com.konfigthis.client.model.ReportsListTopOpenLocations200Response;
import com.konfigthis.client.model.ReportsListTopOpenLocationsResponse;
import com.konfigthis.client.model.ReportsListTopOpenLocationsdefaultResponse;
import com.konfigthis.client.model.ReportsListUnsubscribedMembers200Response;
import com.konfigthis.client.model.ReportsListUnsubscribedMembersResponse;
import com.konfigthis.client.model.ReportsListUnsubscribedMembersdefaultResponse;
import com.konfigthis.client.model.ReportsOpenSubscriberDetails200Response;
import com.konfigthis.client.model.ReportsOpenSubscriberDetailsResponse;
import com.konfigthis.client.model.ReportsOpenSubscriberDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsSpecificCampaignReport200Response;
import com.konfigthis.client.model.ReportsSpecificCampaignReportResponse;
import com.konfigthis.client.model.ReportsSpecificCampaignReportdefaultResponse;
import com.konfigthis.client.model.ReportsSpecificLinkDetails200Response;
import com.konfigthis.client.model.ReportsSpecificLinkDetailsResponse;
import com.konfigthis.client.model.ReportsSpecificLinkDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsSpecificLinkSubscriber200Response;
import com.konfigthis.client.model.ReportsSpecificLinkSubscriberResponse;
import com.konfigthis.client.model.ReportsSpecificLinkSubscriberdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call campaignRecipientInfoCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/sent-to/{subscriber_hash}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call campaignRecipientInfoValidateBeforeCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling campaignRecipientInfo(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling campaignRecipientInfo(Async)");
        }

        return campaignRecipientInfoCall(campaignId, subscriberHash, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsCampaignRecipientInfoResponse> campaignRecipientInfoWithHttpInfo(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = campaignRecipientInfoValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsCampaignRecipientInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call campaignRecipientInfoAsync(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsCampaignRecipientInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = campaignRecipientInfoValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsCampaignRecipientInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CampaignRecipientInfoRequestBuilder {
        private final String campaignId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;

        private CampaignRecipientInfoRequestBuilder(String campaignId, String subscriberHash) {
            this.campaignId = campaignId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return CampaignRecipientInfoRequestBuilder
         */
        public CampaignRecipientInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return CampaignRecipientInfoRequestBuilder
         */
        public CampaignRecipientInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for campaignRecipientInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return campaignRecipientInfoCall(campaignId, subscriberHash, fields, excludeFields, _callback);
        }


        /**
         * Execute campaignRecipientInfo request
         * @return ReportsCampaignRecipientInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsCampaignRecipientInfoResponse execute() throws ApiException {
            ApiResponse<ReportsCampaignRecipientInfoResponse> localVarResp = campaignRecipientInfoWithHttpInfo(campaignId, subscriberHash, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute campaignRecipientInfo request with HTTP info returned
         * @return ApiResponse&lt;ReportsCampaignRecipientInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsCampaignRecipientInfoResponse> executeWithHttpInfo() throws ApiException {
            return campaignRecipientInfoWithHttpInfo(campaignId, subscriberHash, fields, excludeFields);
        }

        /**
         * Execute campaignRecipientInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsCampaignRecipientInfoResponse> _callback) throws ApiException {
            return campaignRecipientInfoAsync(campaignId, subscriberHash, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign recipient info
     * Get information about a specific campaign recipient.
     * @param campaignId The unique id for the campaign. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return CampaignRecipientInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public CampaignRecipientInfoRequestBuilder campaignRecipientInfo(String campaignId, String subscriberHash) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new CampaignRecipientInfoRequestBuilder(campaignId, subscriberHash);
    }
    private okhttp3.Call getAbuseReportCall(String campaignId, String reportId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/abuse-reports/{report_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAbuseReportValidateBeforeCall(String campaignId, String reportId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getAbuseReport(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getAbuseReport(Async)");
        }

        return getAbuseReportCall(campaignId, reportId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsGetAbuseReportResponse> getAbuseReportWithHttpInfo(String campaignId, String reportId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getAbuseReportValidateBeforeCall(campaignId, reportId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsGetAbuseReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAbuseReportAsync(String campaignId, String reportId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsGetAbuseReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAbuseReportValidateBeforeCall(campaignId, reportId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetAbuseReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAbuseReportRequestBuilder {
        private final String campaignId;
        private final String reportId;
        private List<String> fields;
        private List<String> excludeFields;

        private GetAbuseReportRequestBuilder(String campaignId, String reportId) {
            this.campaignId = campaignId;
            this.reportId = reportId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAbuseReportRequestBuilder
         */
        public GetAbuseReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetAbuseReportRequestBuilder
         */
        public GetAbuseReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getAbuseReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAbuseReportCall(campaignId, reportId, fields, excludeFields, _callback);
        }


        /**
         * Execute getAbuseReport request
         * @return ReportsGetAbuseReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetAbuseReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetAbuseReportResponse> localVarResp = getAbuseReportWithHttpInfo(campaignId, reportId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAbuseReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetAbuseReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetAbuseReportResponse> executeWithHttpInfo() throws ApiException {
            return getAbuseReportWithHttpInfo(campaignId, reportId, fields, excludeFields);
        }

        /**
         * Execute getAbuseReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetAbuseReportResponse> _callback) throws ApiException {
            return getAbuseReportAsync(campaignId, reportId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get abuse report
     * Get information about a specific abuse report for a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param reportId The id for the abuse report. (required)
     * @return GetAbuseReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetAbuseReportRequestBuilder getAbuseReport(String campaignId, String reportId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetAbuseReportRequestBuilder(campaignId, reportId);
    }
    private okhttp3.Call getCampaignClickDetailsCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/click-details"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignClickDetailsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignClickDetails(Async)");
        }

        return getCampaignClickDetailsCall(campaignId, fields, excludeFields, count, offset, sortField, sortDir, _callback);

    }


    private ApiResponse<ReportsGetCampaignClickDetailsResponse> getCampaignClickDetailsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = getCampaignClickDetailsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<ReportsGetCampaignClickDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCampaignClickDetailsAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir, final ApiCallback<ReportsGetCampaignClickDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignClickDetailsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetCampaignClickDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCampaignClickDetailsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String sortField;
        private String sortDir;

        private GetCampaignClickDetailsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCampaignClickDetailsRequestBuilder
         */
        public GetCampaignClickDetailsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCampaignClickDetailsRequestBuilder
         */
        public GetCampaignClickDetailsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetCampaignClickDetailsRequestBuilder
         */
        public GetCampaignClickDetailsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetCampaignClickDetailsRequestBuilder
         */
        public GetCampaignClickDetailsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns click reports sorted by the specified field. (optional)
         * @return GetCampaignClickDetailsRequestBuilder
         */
        public GetCampaignClickDetailsRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return GetCampaignClickDetailsRequestBuilder
         */
        public GetCampaignClickDetailsRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for getCampaignClickDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCampaignClickDetailsCall(campaignId, fields, excludeFields, count, offset, sortField, sortDir, _callback);
        }


        /**
         * Execute getCampaignClickDetails request
         * @return ReportsGetCampaignClickDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetCampaignClickDetailsResponse execute() throws ApiException {
            ApiResponse<ReportsGetCampaignClickDetailsResponse> localVarResp = getCampaignClickDetailsWithHttpInfo(campaignId, fields, excludeFields, count, offset, sortField, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCampaignClickDetails request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetCampaignClickDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetCampaignClickDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getCampaignClickDetailsWithHttpInfo(campaignId, fields, excludeFields, count, offset, sortField, sortDir);
        }

        /**
         * Execute getCampaignClickDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetCampaignClickDetailsResponse> _callback) throws ApiException {
            return getCampaignClickDetailsAsync(campaignId, fields, excludeFields, count, offset, sortField, sortDir, _callback);
        }
    }

    /**
     * List campaign details
     * Get information about clicks on specific links in your Mailchimp campaigns.
     * @param campaignId The unique id for the campaign. (required)
     * @return GetCampaignClickDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignClickDetailsRequestBuilder getCampaignClickDetails(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new GetCampaignClickDetailsRequestBuilder(campaignId);
    }
    private okhttp3.Call getCampaignProductActivityCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/ecommerce-product-activity"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignProductActivityValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignProductActivity(Async)");
        }

        return getCampaignProductActivityCall(campaignId, fields, excludeFields, count, offset, sortField, _callback);

    }


    private ApiResponse<ReportsGetCampaignProductActivityResponse> getCampaignProductActivityWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField) throws ApiException {
        okhttp3.Call localVarCall = getCampaignProductActivityValidateBeforeCall(campaignId, fields, excludeFields, count, offset, sortField, null);
        Type localVarReturnType = new TypeToken<ReportsGetCampaignProductActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCampaignProductActivityAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, final ApiCallback<ReportsGetCampaignProductActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignProductActivityValidateBeforeCall(campaignId, fields, excludeFields, count, offset, sortField, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetCampaignProductActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCampaignProductActivityRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String sortField;

        private GetCampaignProductActivityRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCampaignProductActivityRequestBuilder
         */
        public GetCampaignProductActivityRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetCampaignProductActivityRequestBuilder
         */
        public GetCampaignProductActivityRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return GetCampaignProductActivityRequestBuilder
         */
        public GetCampaignProductActivityRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return GetCampaignProductActivityRequestBuilder
         */
        public GetCampaignProductActivityRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns files sorted by the specified field. (optional)
         * @return GetCampaignProductActivityRequestBuilder
         */
        public GetCampaignProductActivityRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Build call for getCampaignProductActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCampaignProductActivityCall(campaignId, fields, excludeFields, count, offset, sortField, _callback);
        }


        /**
         * Execute getCampaignProductActivity request
         * @return ReportsGetCampaignProductActivityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetCampaignProductActivityResponse execute() throws ApiException {
            ApiResponse<ReportsGetCampaignProductActivityResponse> localVarResp = getCampaignProductActivityWithHttpInfo(campaignId, fields, excludeFields, count, offset, sortField);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCampaignProductActivity request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetCampaignProductActivityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetCampaignProductActivityResponse> executeWithHttpInfo() throws ApiException {
            return getCampaignProductActivityWithHttpInfo(campaignId, fields, excludeFields, count, offset, sortField);
        }

        /**
         * Execute getCampaignProductActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetCampaignProductActivityResponse> _callback) throws ApiException {
            return getCampaignProductActivityAsync(campaignId, fields, excludeFields, count, offset, sortField, _callback);
        }
    }

    /**
     * List campaign product activity
     * Get breakdown of product activity for a campaign
     * @param campaignId The unique id for the campaign. (required)
     * @return GetCampaignProductActivityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ecommerce Product Activity Instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignProductActivityRequestBuilder getCampaignProductActivity(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new GetCampaignProductActivityRequestBuilder(campaignId);
    }
    private okhttp3.Call getSubscriberActivityCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/email-activity/{subscriber_hash}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriberActivityValidateBeforeCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, String since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getSubscriberActivity(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getSubscriberActivity(Async)");
        }

        return getSubscriberActivityCall(campaignId, subscriberHash, fields, excludeFields, since, _callback);

    }


    private ApiResponse<ReportsGetSubscriberActivityResponse> getSubscriberActivityWithHttpInfo(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, String since) throws ApiException {
        okhttp3.Call localVarCall = getSubscriberActivityValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, since, null);
        Type localVarReturnType = new TypeToken<ReportsGetSubscriberActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriberActivityAsync(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, String since, final ApiCallback<ReportsGetSubscriberActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriberActivityValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, since, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetSubscriberActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubscriberActivityRequestBuilder {
        private final String campaignId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;
        private String since;

        private GetSubscriberActivityRequestBuilder(String campaignId, String subscriberHash) {
            this.campaignId = campaignId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSubscriberActivityRequestBuilder
         */
        public GetSubscriberActivityRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetSubscriberActivityRequestBuilder
         */
        public GetSubscriberActivityRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set since
         * @param since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return GetSubscriberActivityRequestBuilder
         */
        public GetSubscriberActivityRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Build call for getSubscriberActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriberActivityCall(campaignId, subscriberHash, fields, excludeFields, since, _callback);
        }


        /**
         * Execute getSubscriberActivity request
         * @return ReportsGetSubscriberActivityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetSubscriberActivityResponse execute() throws ApiException {
            ApiResponse<ReportsGetSubscriberActivityResponse> localVarResp = getSubscriberActivityWithHttpInfo(campaignId, subscriberHash, fields, excludeFields, since);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubscriberActivity request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetSubscriberActivityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetSubscriberActivityResponse> executeWithHttpInfo() throws ApiException {
            return getSubscriberActivityWithHttpInfo(campaignId, subscriberHash, fields, excludeFields, since);
        }

        /**
         * Execute getSubscriberActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetSubscriberActivityResponse> _callback) throws ApiException {
            return getSubscriberActivityAsync(campaignId, subscriberHash, fields, excludeFields, since, _callback);
        }
    }

    /**
     * Get subscriber email activity
     * Get a specific list member&#39;s activity in a campaign including opens, clicks, and bounces.
     * @param campaignId The unique id for the campaign. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return GetSubscriberActivityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriberActivityRequestBuilder getSubscriberActivity(String campaignId, String subscriberHash) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetSubscriberActivityRequestBuilder(campaignId, subscriberHash);
    }
    private okhttp3.Call getUnsubscribedMemberInfoCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/unsubscribed/{subscriber_hash}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnsubscribedMemberInfoValidateBeforeCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getUnsubscribedMemberInfo(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling getUnsubscribedMemberInfo(Async)");
        }

        return getUnsubscribedMemberInfoCall(campaignId, subscriberHash, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsGetUnsubscribedMemberInfoResponse> getUnsubscribedMemberInfoWithHttpInfo(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = getUnsubscribedMemberInfoValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsGetUnsubscribedMemberInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnsubscribedMemberInfoAsync(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsGetUnsubscribedMemberInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnsubscribedMemberInfoValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetUnsubscribedMemberInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUnsubscribedMemberInfoRequestBuilder {
        private final String campaignId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;

        private GetUnsubscribedMemberInfoRequestBuilder(String campaignId, String subscriberHash) {
            this.campaignId = campaignId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetUnsubscribedMemberInfoRequestBuilder
         */
        public GetUnsubscribedMemberInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return GetUnsubscribedMemberInfoRequestBuilder
         */
        public GetUnsubscribedMemberInfoRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for getUnsubscribedMemberInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnsubscribedMemberInfoCall(campaignId, subscriberHash, fields, excludeFields, _callback);
        }


        /**
         * Execute getUnsubscribedMemberInfo request
         * @return ReportsGetUnsubscribedMemberInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetUnsubscribedMemberInfoResponse execute() throws ApiException {
            ApiResponse<ReportsGetUnsubscribedMemberInfoResponse> localVarResp = getUnsubscribedMemberInfoWithHttpInfo(campaignId, subscriberHash, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUnsubscribedMemberInfo request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetUnsubscribedMemberInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetUnsubscribedMemberInfoResponse> executeWithHttpInfo() throws ApiException {
            return getUnsubscribedMemberInfoWithHttpInfo(campaignId, subscriberHash, fields, excludeFields);
        }

        /**
         * Execute getUnsubscribedMemberInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetUnsubscribedMemberInfoResponse> _callback) throws ApiException {
            return getUnsubscribedMemberInfoAsync(campaignId, subscriberHash, fields, excludeFields, _callback);
        }
    }

    /**
     * Get unsubscribed member
     * Get information about a specific list member who unsubscribed from a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return GetUnsubscribedMemberInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public GetUnsubscribedMemberInfoRequestBuilder getUnsubscribedMemberInfo(String campaignId, String subscriberHash) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new GetUnsubscribedMemberInfoRequestBuilder(campaignId, subscriberHash);
    }
    private okhttp3.Call listAbuseReportsCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/abuse-reports"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAbuseReportsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listAbuseReports(Async)");
        }

        return listAbuseReportsCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsListAbuseReportsResponse> listAbuseReportsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listAbuseReportsValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsListAbuseReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAbuseReportsAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsListAbuseReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAbuseReportsValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsListAbuseReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAbuseReportsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListAbuseReportsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAbuseReportsRequestBuilder
         */
        public ListAbuseReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListAbuseReportsRequestBuilder
         */
        public ListAbuseReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listAbuseReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAbuseReportsCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute listAbuseReports request
         * @return ReportsListAbuseReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListAbuseReportsResponse execute() throws ApiException {
            ApiResponse<ReportsListAbuseReportsResponse> localVarResp = listAbuseReportsWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAbuseReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsListAbuseReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListAbuseReportsResponse> executeWithHttpInfo() throws ApiException {
            return listAbuseReportsWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute listAbuseReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListAbuseReportsResponse> _callback) throws ApiException {
            return listAbuseReportsAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * List abuse reports
     * Get a list of abuse complaints for a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListAbuseReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListAbuseReportsRequestBuilder listAbuseReports(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListAbuseReportsRequestBuilder(campaignId);
    }
    private okhttp3.Call listCampaignFeedbackCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/advice"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCampaignFeedbackValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listCampaignFeedback(Async)");
        }

        return listCampaignFeedbackCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsListCampaignFeedbackResponse> listCampaignFeedbackWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listCampaignFeedbackValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsListCampaignFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCampaignFeedbackAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsListCampaignFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCampaignFeedbackValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsListCampaignFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCampaignFeedbackRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListCampaignFeedbackRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignFeedbackRequestBuilder
         */
        public ListCampaignFeedbackRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignFeedbackRequestBuilder
         */
        public ListCampaignFeedbackRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listCampaignFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCampaignFeedbackCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute listCampaignFeedback request
         * @return ReportsListCampaignFeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListCampaignFeedbackResponse execute() throws ApiException {
            ApiResponse<ReportsListCampaignFeedbackResponse> localVarResp = listCampaignFeedbackWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCampaignFeedback request with HTTP info returned
         * @return ApiResponse&lt;ReportsListCampaignFeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListCampaignFeedbackResponse> executeWithHttpInfo() throws ApiException {
            return listCampaignFeedbackWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute listCampaignFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListCampaignFeedbackResponse> _callback) throws ApiException {
            return listCampaignFeedbackAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * List campaign feedback
     * Get feedback based on a campaign&#39;s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListCampaignFeedbackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCampaignFeedbackRequestBuilder listCampaignFeedback(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListCampaignFeedbackRequestBuilder(campaignId);
    }
    private okhttp3.Call listCampaignOpenDetailsCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/open-details"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCampaignOpenDetailsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listCampaignOpenDetails(Async)");
        }

        return listCampaignOpenDetailsCall(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir, _callback);

    }


    private ApiResponse<ReportsListCampaignOpenDetailsResponse> listCampaignOpenDetailsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listCampaignOpenDetailsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<ReportsListCampaignOpenDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCampaignOpenDetailsAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, String sortField, String sortDir, final ApiCallback<ReportsListCampaignOpenDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCampaignOpenDetailsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ReportsListCampaignOpenDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCampaignOpenDetailsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String since;
        private String sortField;
        private String sortDir;

        private ListCampaignOpenDetailsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set since
         * @param since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set sortField
         * @param sortField Returns open reports sorted by the specified field. (optional)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder sortField(String sortField) {
            this.sortField = sortField;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Determines the order direction for sorted results. (optional)
         * @return ListCampaignOpenDetailsRequestBuilder
         */
        public ListCampaignOpenDetailsRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for listCampaignOpenDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCampaignOpenDetailsCall(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir, _callback);
        }


        /**
         * Execute listCampaignOpenDetails request
         * @return ReportsListCampaignOpenDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListCampaignOpenDetailsResponse execute() throws ApiException {
            ApiResponse<ReportsListCampaignOpenDetailsResponse> localVarResp = listCampaignOpenDetailsWithHttpInfo(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCampaignOpenDetails request with HTTP info returned
         * @return ApiResponse&lt;ReportsListCampaignOpenDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListCampaignOpenDetailsResponse> executeWithHttpInfo() throws ApiException {
            return listCampaignOpenDetailsWithHttpInfo(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir);
        }

        /**
         * Execute listCampaignOpenDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListCampaignOpenDetailsResponse> _callback) throws ApiException {
            return listCampaignOpenDetailsAsync(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir, _callback);
        }
    }

    /**
     * List campaign open details
     * Get detailed information about any campaign emails that were opened by a list member.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListCampaignOpenDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCampaignOpenDetailsRequestBuilder listCampaignOpenDetails(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListCampaignOpenDetailsRequestBuilder(campaignId);
    }
    private okhttp3.Call listCampaignRecipientsCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/sent-to"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCampaignRecipientsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listCampaignRecipients(Async)");
        }

        return listCampaignRecipientsCall(campaignId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ReportsListCampaignRecipientsResponse> listCampaignRecipientsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listCampaignRecipientsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ReportsListCampaignRecipientsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCampaignRecipientsAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ReportsListCampaignRecipientsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCampaignRecipientsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportsListCampaignRecipientsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCampaignRecipientsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListCampaignRecipientsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignRecipientsRequestBuilder
         */
        public ListCampaignRecipientsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignRecipientsRequestBuilder
         */
        public ListCampaignRecipientsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListCampaignRecipientsRequestBuilder
         */
        public ListCampaignRecipientsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListCampaignRecipientsRequestBuilder
         */
        public ListCampaignRecipientsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listCampaignRecipients
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCampaignRecipientsCall(campaignId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listCampaignRecipients request
         * @return ReportsListCampaignRecipientsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListCampaignRecipientsResponse execute() throws ApiException {
            ApiResponse<ReportsListCampaignRecipientsResponse> localVarResp = listCampaignRecipientsWithHttpInfo(campaignId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCampaignRecipients request with HTTP info returned
         * @return ApiResponse&lt;ReportsListCampaignRecipientsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListCampaignRecipientsResponse> executeWithHttpInfo() throws ApiException {
            return listCampaignRecipientsWithHttpInfo(campaignId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listCampaignRecipients request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListCampaignRecipientsResponse> _callback) throws ApiException {
            return listCampaignRecipientsAsync(campaignId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List campaign recipients
     * Get information about campaign recipients.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListCampaignRecipientsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCampaignRecipientsRequestBuilder listCampaignRecipients(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListCampaignRecipientsRequestBuilder(campaignId);
    }
    private okhttp3.Call listCampaignReportsCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (beforeSendTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_send_time", beforeSendTime));
        }

        if (sinceSendTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_send_time", sinceSendTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCampaignReportsValidateBeforeCall(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, final ApiCallback _callback) throws ApiException {
        return listCampaignReportsCall(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime, _callback);

    }


    private ApiResponse<ReportsListCampaignReportsResponse> listCampaignReportsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime) throws ApiException {
        okhttp3.Call localVarCall = listCampaignReportsValidateBeforeCall(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime, null);
        Type localVarReturnType = new TypeToken<ReportsListCampaignReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCampaignReportsAsync(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, final ApiCallback<ReportsListCampaignReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCampaignReportsValidateBeforeCall(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime, _callback);
        Type localVarReturnType = new TypeToken<ReportsListCampaignReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCampaignReportsRequestBuilder {
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String type;
        private OffsetDateTime beforeSendTime;
        private OffsetDateTime sinceSendTime;

        private ListCampaignReportsRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set type
         * @param type The campaign type. (optional)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set beforeSendTime
         * @param beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder beforeSendTime(OffsetDateTime beforeSendTime) {
            this.beforeSendTime = beforeSendTime;
            return this;
        }
        
        /**
         * Set sinceSendTime
         * @param sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListCampaignReportsRequestBuilder
         */
        public ListCampaignReportsRequestBuilder sinceSendTime(OffsetDateTime sinceSendTime) {
            this.sinceSendTime = sinceSendTime;
            return this;
        }
        
        /**
         * Build call for listCampaignReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCampaignReportsCall(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime, _callback);
        }


        /**
         * Execute listCampaignReports request
         * @return ReportsListCampaignReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListCampaignReportsResponse execute() throws ApiException {
            ApiResponse<ReportsListCampaignReportsResponse> localVarResp = listCampaignReportsWithHttpInfo(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCampaignReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsListCampaignReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListCampaignReportsResponse> executeWithHttpInfo() throws ApiException {
            return listCampaignReportsWithHttpInfo(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime);
        }

        /**
         * Execute listCampaignReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListCampaignReportsResponse> _callback) throws ApiException {
            return listCampaignReportsAsync(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime, _callback);
        }
    }

    /**
     * List campaign reports
     * Get campaign reports.
     * @return ListCampaignReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListCampaignReportsRequestBuilder listCampaignReports() throws IllegalArgumentException {
        return new ListCampaignReportsRequestBuilder();
    }
    private okhttp3.Call listChildCampaignReportsCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/sub-reports"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChildCampaignReportsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listChildCampaignReports(Async)");
        }

        return listChildCampaignReportsCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsListChildCampaignReportsResponse> listChildCampaignReportsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listChildCampaignReportsValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsListChildCampaignReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listChildCampaignReportsAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsListChildCampaignReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChildCampaignReportsValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsListChildCampaignReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListChildCampaignReportsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListChildCampaignReportsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListChildCampaignReportsRequestBuilder
         */
        public ListChildCampaignReportsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListChildCampaignReportsRequestBuilder
         */
        public ListChildCampaignReportsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listChildCampaignReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChildCampaignReportsCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute listChildCampaignReports request
         * @return ReportsListChildCampaignReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListChildCampaignReportsResponse execute() throws ApiException {
            ApiResponse<ReportsListChildCampaignReportsResponse> localVarResp = listChildCampaignReportsWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listChildCampaignReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsListChildCampaignReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListChildCampaignReportsResponse> executeWithHttpInfo() throws ApiException {
            return listChildCampaignReportsWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute listChildCampaignReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListChildCampaignReportsResponse> _callback) throws ApiException {
            return listChildCampaignReportsAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * List child campaign reports
     * Get a list of reports with child campaigns for a specific parent campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListChildCampaignReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListChildCampaignReportsRequestBuilder listChildCampaignReports(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListChildCampaignReportsRequestBuilder(campaignId);
    }
    private okhttp3.Call listClickedLinkSubscribersCall(String campaignId, String linkId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/click-details/{link_id}/members"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClickedLinkSubscribersValidateBeforeCall(String campaignId, String linkId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listClickedLinkSubscribers(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling listClickedLinkSubscribers(Async)");
        }

        return listClickedLinkSubscribersCall(campaignId, linkId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ReportsListClickedLinkSubscribersResponse> listClickedLinkSubscribersWithHttpInfo(String campaignId, String linkId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listClickedLinkSubscribersValidateBeforeCall(campaignId, linkId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ReportsListClickedLinkSubscribersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listClickedLinkSubscribersAsync(String campaignId, String linkId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ReportsListClickedLinkSubscribersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClickedLinkSubscribersValidateBeforeCall(campaignId, linkId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportsListClickedLinkSubscribersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListClickedLinkSubscribersRequestBuilder {
        private final String campaignId;
        private final String linkId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListClickedLinkSubscribersRequestBuilder(String campaignId, String linkId) {
            this.campaignId = campaignId;
            this.linkId = linkId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListClickedLinkSubscribersRequestBuilder
         */
        public ListClickedLinkSubscribersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListClickedLinkSubscribersRequestBuilder
         */
        public ListClickedLinkSubscribersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListClickedLinkSubscribersRequestBuilder
         */
        public ListClickedLinkSubscribersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListClickedLinkSubscribersRequestBuilder
         */
        public ListClickedLinkSubscribersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listClickedLinkSubscribers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listClickedLinkSubscribersCall(campaignId, linkId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listClickedLinkSubscribers request
         * @return ReportsListClickedLinkSubscribersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListClickedLinkSubscribersResponse execute() throws ApiException {
            ApiResponse<ReportsListClickedLinkSubscribersResponse> localVarResp = listClickedLinkSubscribersWithHttpInfo(campaignId, linkId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listClickedLinkSubscribers request with HTTP info returned
         * @return ApiResponse&lt;ReportsListClickedLinkSubscribersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListClickedLinkSubscribersResponse> executeWithHttpInfo() throws ApiException {
            return listClickedLinkSubscribersWithHttpInfo(campaignId, linkId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listClickedLinkSubscribers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListClickedLinkSubscribersResponse> _callback) throws ApiException {
            return listClickedLinkSubscribersAsync(campaignId, linkId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List clicked link subscribers
     * Get information about list members who clicked on a specific link in a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param linkId The id for the link. (required)
     * @return ListClickedLinkSubscribersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListClickedLinkSubscribersRequestBuilder listClickedLinkSubscribers(String campaignId, String linkId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new ListClickedLinkSubscribersRequestBuilder(campaignId, linkId);
    }
    private okhttp3.Call listDomainPerformanceStatsCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/domain-performance"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDomainPerformanceStatsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listDomainPerformanceStats(Async)");
        }

        return listDomainPerformanceStatsCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsListDomainPerformanceStatsResponse> listDomainPerformanceStatsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listDomainPerformanceStatsValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsListDomainPerformanceStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDomainPerformanceStatsAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsListDomainPerformanceStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDomainPerformanceStatsValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsListDomainPerformanceStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDomainPerformanceStatsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListDomainPerformanceStatsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListDomainPerformanceStatsRequestBuilder
         */
        public ListDomainPerformanceStatsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListDomainPerformanceStatsRequestBuilder
         */
        public ListDomainPerformanceStatsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listDomainPerformanceStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDomainPerformanceStatsCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute listDomainPerformanceStats request
         * @return ReportsListDomainPerformanceStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListDomainPerformanceStatsResponse execute() throws ApiException {
            ApiResponse<ReportsListDomainPerformanceStatsResponse> localVarResp = listDomainPerformanceStatsWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDomainPerformanceStats request with HTTP info returned
         * @return ApiResponse&lt;ReportsListDomainPerformanceStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListDomainPerformanceStatsResponse> executeWithHttpInfo() throws ApiException {
            return listDomainPerformanceStatsWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute listDomainPerformanceStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListDomainPerformanceStatsResponse> _callback) throws ApiException {
            return listDomainPerformanceStatsAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * List domain performance stats
     * Get statistics for the top-performing email domains in a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListDomainPerformanceStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListDomainPerformanceStatsRequestBuilder listDomainPerformanceStats(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListDomainPerformanceStatsRequestBuilder(campaignId);
    }
    private okhttp3.Call listEepurlActivityCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/eepurl"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEepurlActivityValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listEepurlActivity(Async)");
        }

        return listEepurlActivityCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsListEepurlActivityResponse> listEepurlActivityWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = listEepurlActivityValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsListEepurlActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEepurlActivityAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsListEepurlActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEepurlActivityValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsListEepurlActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEepurlActivityRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private ListEepurlActivityRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListEepurlActivityRequestBuilder
         */
        public ListEepurlActivityRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListEepurlActivityRequestBuilder
         */
        public ListEepurlActivityRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for listEepurlActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEepurlActivityCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute listEepurlActivity request
         * @return ReportsListEepurlActivityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListEepurlActivityResponse execute() throws ApiException {
            ApiResponse<ReportsListEepurlActivityResponse> localVarResp = listEepurlActivityWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEepurlActivity request with HTTP info returned
         * @return ApiResponse&lt;ReportsListEepurlActivityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListEepurlActivityResponse> executeWithHttpInfo() throws ApiException {
            return listEepurlActivityWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute listEepurlActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListEepurlActivityResponse> _callback) throws ApiException {
            return listEepurlActivityAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * List EepURL activity
     * Get a summary of social activity for the campaign, tracked by EepURL.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListEepurlActivityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListEepurlActivityRequestBuilder listEepurlActivity(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListEepurlActivityRequestBuilder(campaignId);
    }
    private okhttp3.Call listEmailActivityCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/email-activity"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmailActivityValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listEmailActivity(Async)");
        }

        return listEmailActivityCall(campaignId, fields, excludeFields, count, offset, since, _callback);

    }


    private ApiResponse<ReportsListEmailActivityResponse> listEmailActivityWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since) throws ApiException {
        okhttp3.Call localVarCall = listEmailActivityValidateBeforeCall(campaignId, fields, excludeFields, count, offset, since, null);
        Type localVarReturnType = new TypeToken<ReportsListEmailActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmailActivityAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String since, final ApiCallback<ReportsListEmailActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmailActivityValidateBeforeCall(campaignId, fields, excludeFields, count, offset, since, _callback);
        Type localVarReturnType = new TypeToken<ReportsListEmailActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmailActivityRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;
        private String since;

        private ListEmailActivityRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListEmailActivityRequestBuilder
         */
        public ListEmailActivityRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListEmailActivityRequestBuilder
         */
        public ListEmailActivityRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListEmailActivityRequestBuilder
         */
        public ListEmailActivityRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListEmailActivityRequestBuilder
         */
        public ListEmailActivityRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set since
         * @param since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
         * @return ListEmailActivityRequestBuilder
         */
        public ListEmailActivityRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Build call for listEmailActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmailActivityCall(campaignId, fields, excludeFields, count, offset, since, _callback);
        }


        /**
         * Execute listEmailActivity request
         * @return ReportsListEmailActivityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListEmailActivityResponse execute() throws ApiException {
            ApiResponse<ReportsListEmailActivityResponse> localVarResp = listEmailActivityWithHttpInfo(campaignId, fields, excludeFields, count, offset, since);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmailActivity request with HTTP info returned
         * @return ApiResponse&lt;ReportsListEmailActivityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListEmailActivityResponse> executeWithHttpInfo() throws ApiException {
            return listEmailActivityWithHttpInfo(campaignId, fields, excludeFields, count, offset, since);
        }

        /**
         * Execute listEmailActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListEmailActivityResponse> _callback) throws ApiException {
            return listEmailActivityAsync(campaignId, fields, excludeFields, count, offset, since, _callback);
        }
    }

    /**
     * List email activity
     * Get a list of member&#39;s subscriber activity in a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListEmailActivityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmailActivityRequestBuilder listEmailActivity(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListEmailActivityRequestBuilder(campaignId);
    }
    private okhttp3.Call listTopOpenLocationsCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/locations"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTopOpenLocationsValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listTopOpenLocations(Async)");
        }

        return listTopOpenLocationsCall(campaignId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ReportsListTopOpenLocationsResponse> listTopOpenLocationsWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listTopOpenLocationsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ReportsListTopOpenLocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTopOpenLocationsAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ReportsListTopOpenLocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTopOpenLocationsValidateBeforeCall(campaignId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportsListTopOpenLocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTopOpenLocationsRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListTopOpenLocationsRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListTopOpenLocationsRequestBuilder
         */
        public ListTopOpenLocationsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListTopOpenLocationsRequestBuilder
         */
        public ListTopOpenLocationsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListTopOpenLocationsRequestBuilder
         */
        public ListTopOpenLocationsRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListTopOpenLocationsRequestBuilder
         */
        public ListTopOpenLocationsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listTopOpenLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTopOpenLocationsCall(campaignId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listTopOpenLocations request
         * @return ReportsListTopOpenLocationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListTopOpenLocationsResponse execute() throws ApiException {
            ApiResponse<ReportsListTopOpenLocationsResponse> localVarResp = listTopOpenLocationsWithHttpInfo(campaignId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTopOpenLocations request with HTTP info returned
         * @return ApiResponse&lt;ReportsListTopOpenLocationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListTopOpenLocationsResponse> executeWithHttpInfo() throws ApiException {
            return listTopOpenLocationsWithHttpInfo(campaignId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listTopOpenLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListTopOpenLocationsResponse> _callback) throws ApiException {
            return listTopOpenLocationsAsync(campaignId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List top open activities
     * Get top open locations for a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListTopOpenLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListTopOpenLocationsRequestBuilder listTopOpenLocations(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListTopOpenLocationsRequestBuilder(campaignId);
    }
    private okhttp3.Call listUnsubscribedMembersCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/unsubscribed"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnsubscribedMembersValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listUnsubscribedMembers(Async)");
        }

        return listUnsubscribedMembersCall(campaignId, fields, excludeFields, count, offset, _callback);

    }


    private ApiResponse<ReportsListUnsubscribedMembersResponse> listUnsubscribedMembersWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listUnsubscribedMembersValidateBeforeCall(campaignId, fields, excludeFields, count, offset, null);
        Type localVarReturnType = new TypeToken<ReportsListUnsubscribedMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnsubscribedMembersAsync(String campaignId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, final ApiCallback<ReportsListUnsubscribedMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUnsubscribedMembersValidateBeforeCall(campaignId, fields, excludeFields, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportsListUnsubscribedMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUnsubscribedMembersRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;
        private Integer count;
        private Integer offset;

        private ListUnsubscribedMembersRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListUnsubscribedMembersRequestBuilder
         */
        public ListUnsubscribedMembersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return ListUnsubscribedMembersRequestBuilder
         */
        public ListUnsubscribedMembersRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Set count
         * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
         * @return ListUnsubscribedMembersRequestBuilder
         */
        public ListUnsubscribedMembersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
         * @return ListUnsubscribedMembersRequestBuilder
         */
        public ListUnsubscribedMembersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listUnsubscribedMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnsubscribedMembersCall(campaignId, fields, excludeFields, count, offset, _callback);
        }


        /**
         * Execute listUnsubscribedMembers request
         * @return ReportsListUnsubscribedMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListUnsubscribedMembersResponse execute() throws ApiException {
            ApiResponse<ReportsListUnsubscribedMembersResponse> localVarResp = listUnsubscribedMembersWithHttpInfo(campaignId, fields, excludeFields, count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUnsubscribedMembers request with HTTP info returned
         * @return ApiResponse&lt;ReportsListUnsubscribedMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListUnsubscribedMembersResponse> executeWithHttpInfo() throws ApiException {
            return listUnsubscribedMembersWithHttpInfo(campaignId, fields, excludeFields, count, offset);
        }

        /**
         * Execute listUnsubscribedMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListUnsubscribedMembersResponse> _callback) throws ApiException {
            return listUnsubscribedMembersAsync(campaignId, fields, excludeFields, count, offset, _callback);
        }
    }

    /**
     * List unsubscribed members
     * Get information about members who have unsubscribed from a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return ListUnsubscribedMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public ListUnsubscribedMembersRequestBuilder listUnsubscribedMembers(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new ListUnsubscribedMembersRequestBuilder(campaignId);
    }
    private okhttp3.Call openSubscriberDetailsCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/open-details/{subscriber_hash}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openSubscriberDetailsValidateBeforeCall(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling openSubscriberDetails(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling openSubscriberDetails(Async)");
        }

        return openSubscriberDetailsCall(campaignId, subscriberHash, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsOpenSubscriberDetailsResponse> openSubscriberDetailsWithHttpInfo(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = openSubscriberDetailsValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsOpenSubscriberDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call openSubscriberDetailsAsync(String campaignId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsOpenSubscriberDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openSubscriberDetailsValidateBeforeCall(campaignId, subscriberHash, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsOpenSubscriberDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OpenSubscriberDetailsRequestBuilder {
        private final String campaignId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;

        private OpenSubscriberDetailsRequestBuilder(String campaignId, String subscriberHash) {
            this.campaignId = campaignId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return OpenSubscriberDetailsRequestBuilder
         */
        public OpenSubscriberDetailsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return OpenSubscriberDetailsRequestBuilder
         */
        public OpenSubscriberDetailsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for openSubscriberDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return openSubscriberDetailsCall(campaignId, subscriberHash, fields, excludeFields, _callback);
        }


        /**
         * Execute openSubscriberDetails request
         * @return ReportsOpenSubscriberDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsOpenSubscriberDetailsResponse execute() throws ApiException {
            ApiResponse<ReportsOpenSubscriberDetailsResponse> localVarResp = openSubscriberDetailsWithHttpInfo(campaignId, subscriberHash, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute openSubscriberDetails request with HTTP info returned
         * @return ApiResponse&lt;ReportsOpenSubscriberDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsOpenSubscriberDetailsResponse> executeWithHttpInfo() throws ApiException {
            return openSubscriberDetailsWithHttpInfo(campaignId, subscriberHash, fields, excludeFields);
        }

        /**
         * Execute openSubscriberDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsOpenSubscriberDetailsResponse> _callback) throws ApiException {
            return openSubscriberDetailsAsync(campaignId, subscriberHash, fields, excludeFields, _callback);
        }
    }

    /**
     * Get opened campaign subscriber
     * Get information about a specific subscriber who opened a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return OpenSubscriberDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public OpenSubscriberDetailsRequestBuilder openSubscriberDetails(String campaignId, String subscriberHash) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new OpenSubscriberDetailsRequestBuilder(campaignId, subscriberHash);
    }
    private okhttp3.Call specificCampaignReportCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificCampaignReportValidateBeforeCall(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling specificCampaignReport(Async)");
        }

        return specificCampaignReportCall(campaignId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsSpecificCampaignReportResponse> specificCampaignReportWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = specificCampaignReportValidateBeforeCall(campaignId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsSpecificCampaignReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificCampaignReportAsync(String campaignId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsSpecificCampaignReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificCampaignReportValidateBeforeCall(campaignId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsSpecificCampaignReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificCampaignReportRequestBuilder {
        private final String campaignId;
        private List<String> fields;
        private List<String> excludeFields;

        private SpecificCampaignReportRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return SpecificCampaignReportRequestBuilder
         */
        public SpecificCampaignReportRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return SpecificCampaignReportRequestBuilder
         */
        public SpecificCampaignReportRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for specificCampaignReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificCampaignReportCall(campaignId, fields, excludeFields, _callback);
        }


        /**
         * Execute specificCampaignReport request
         * @return ReportsSpecificCampaignReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsSpecificCampaignReportResponse execute() throws ApiException {
            ApiResponse<ReportsSpecificCampaignReportResponse> localVarResp = specificCampaignReportWithHttpInfo(campaignId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificCampaignReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsSpecificCampaignReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsSpecificCampaignReportResponse> executeWithHttpInfo() throws ApiException {
            return specificCampaignReportWithHttpInfo(campaignId, fields, excludeFields);
        }

        /**
         * Execute specificCampaignReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsSpecificCampaignReportResponse> _callback) throws ApiException {
            return specificCampaignReportAsync(campaignId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign report
     * Get report details for a specific sent campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @return SpecificCampaignReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificCampaignReportRequestBuilder specificCampaignReport(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        return new SpecificCampaignReportRequestBuilder(campaignId);
    }
    private okhttp3.Call specificLinkDetailsCall(String campaignId, String linkId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/click-details/{link_id}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificLinkDetailsValidateBeforeCall(String campaignId, String linkId, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling specificLinkDetails(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling specificLinkDetails(Async)");
        }

        return specificLinkDetailsCall(campaignId, linkId, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsSpecificLinkDetailsResponse> specificLinkDetailsWithHttpInfo(String campaignId, String linkId, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = specificLinkDetailsValidateBeforeCall(campaignId, linkId, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsSpecificLinkDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificLinkDetailsAsync(String campaignId, String linkId, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsSpecificLinkDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificLinkDetailsValidateBeforeCall(campaignId, linkId, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsSpecificLinkDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificLinkDetailsRequestBuilder {
        private final String campaignId;
        private final String linkId;
        private List<String> fields;
        private List<String> excludeFields;

        private SpecificLinkDetailsRequestBuilder(String campaignId, String linkId) {
            this.campaignId = campaignId;
            this.linkId = linkId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return SpecificLinkDetailsRequestBuilder
         */
        public SpecificLinkDetailsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return SpecificLinkDetailsRequestBuilder
         */
        public SpecificLinkDetailsRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for specificLinkDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificLinkDetailsCall(campaignId, linkId, fields, excludeFields, _callback);
        }


        /**
         * Execute specificLinkDetails request
         * @return ReportsSpecificLinkDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsSpecificLinkDetailsResponse execute() throws ApiException {
            ApiResponse<ReportsSpecificLinkDetailsResponse> localVarResp = specificLinkDetailsWithHttpInfo(campaignId, linkId, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificLinkDetails request with HTTP info returned
         * @return ApiResponse&lt;ReportsSpecificLinkDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsSpecificLinkDetailsResponse> executeWithHttpInfo() throws ApiException {
            return specificLinkDetailsWithHttpInfo(campaignId, linkId, fields, excludeFields);
        }

        /**
         * Execute specificLinkDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsSpecificLinkDetailsResponse> _callback) throws ApiException {
            return specificLinkDetailsAsync(campaignId, linkId, fields, excludeFields, _callback);
        }
    }

    /**
     * Get campaign link details
     * Get click details for a specific link in a campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param linkId The id for the link. (required)
     * @return SpecificLinkDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificLinkDetailsRequestBuilder specificLinkDetails(String campaignId, String linkId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new SpecificLinkDetailsRequestBuilder(campaignId, linkId);
    }
    private okhttp3.Call specificLinkSubscriberCall(String campaignId, String linkId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}"
            .replace("{" + "campaign_id" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()))
            .replace("{" + "subscriber_hash" + "}", localVarApiClient.escapeString(subscriberHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (excludeFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_fields", excludeFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificLinkSubscriberValidateBeforeCall(String campaignId, String linkId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling specificLinkSubscriber(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling specificLinkSubscriber(Async)");
        }

        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new ApiException("Missing the required parameter 'subscriberHash' when calling specificLinkSubscriber(Async)");
        }

        return specificLinkSubscriberCall(campaignId, linkId, subscriberHash, fields, excludeFields, _callback);

    }


    private ApiResponse<ReportsSpecificLinkSubscriberResponse> specificLinkSubscriberWithHttpInfo(String campaignId, String linkId, String subscriberHash, List<String> fields, List<String> excludeFields) throws ApiException {
        okhttp3.Call localVarCall = specificLinkSubscriberValidateBeforeCall(campaignId, linkId, subscriberHash, fields, excludeFields, null);
        Type localVarReturnType = new TypeToken<ReportsSpecificLinkSubscriberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificLinkSubscriberAsync(String campaignId, String linkId, String subscriberHash, List<String> fields, List<String> excludeFields, final ApiCallback<ReportsSpecificLinkSubscriberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificLinkSubscriberValidateBeforeCall(campaignId, linkId, subscriberHash, fields, excludeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsSpecificLinkSubscriberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificLinkSubscriberRequestBuilder {
        private final String campaignId;
        private final String linkId;
        private final String subscriberHash;
        private List<String> fields;
        private List<String> excludeFields;

        private SpecificLinkSubscriberRequestBuilder(String campaignId, String linkId, String subscriberHash) {
            this.campaignId = campaignId;
            this.linkId = linkId;
            this.subscriberHash = subscriberHash;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
         * @return SpecificLinkSubscriberRequestBuilder
         */
        public SpecificLinkSubscriberRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set excludeFields
         * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
         * @return SpecificLinkSubscriberRequestBuilder
         */
        public SpecificLinkSubscriberRequestBuilder excludeFields(List<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }
        
        /**
         * Build call for specificLinkSubscriber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificLinkSubscriberCall(campaignId, linkId, subscriberHash, fields, excludeFields, _callback);
        }


        /**
         * Execute specificLinkSubscriber request
         * @return ReportsSpecificLinkSubscriberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsSpecificLinkSubscriberResponse execute() throws ApiException {
            ApiResponse<ReportsSpecificLinkSubscriberResponse> localVarResp = specificLinkSubscriberWithHttpInfo(campaignId, linkId, subscriberHash, fields, excludeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificLinkSubscriber request with HTTP info returned
         * @return ApiResponse&lt;ReportsSpecificLinkSubscriberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsSpecificLinkSubscriberResponse> executeWithHttpInfo() throws ApiException {
            return specificLinkSubscriberWithHttpInfo(campaignId, linkId, subscriberHash, fields, excludeFields);
        }

        /**
         * Execute specificLinkSubscriber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsSpecificLinkSubscriberResponse> _callback) throws ApiException {
            return specificLinkSubscriberAsync(campaignId, linkId, subscriberHash, fields, excludeFields, _callback);
        }
    }

    /**
     * Get clicked link subscriber
     * Get information about a specific subscriber who clicked a link in a specific campaign.
     * @param campaignId The unique id for the campaign. (required)
     * @param linkId The id for the link. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return SpecificLinkSubscriberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error generated by the Mailchimp API. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificLinkSubscriberRequestBuilder specificLinkSubscriber(String campaignId, String linkId, String subscriberHash) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        if (subscriberHash == null) throw new IllegalArgumentException("\"subscriberHash\" is required but got null");
            

        return new SpecificLinkSubscriberRequestBuilder(campaignId, linkId, subscriberHash);
    }
}
