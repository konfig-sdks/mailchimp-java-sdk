/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ABTestOptionsProperty1;
import com.konfigthis.client.model.ABTestingOptionsProperty;
import com.konfigthis.client.model.CampaignDeliveryStatusProperty;
import com.konfigthis.client.model.CampaignReportSummaryProperty2;
import com.konfigthis.client.model.CampaignSettingsProperty4;
import com.konfigthis.client.model.CampaignSocialCardProperty;
import com.konfigthis.client.model.CampaignTrackingOptionsProperty;
import com.konfigthis.client.model.ListProperty18;
import com.konfigthis.client.model.RSSOptionsProperty2;
import com.konfigthis.client.model.ResendShortcutEligibilityProperty;
import com.konfigthis.client.model.ResourceLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A summary of an individual campaign&#39;s settings and content.
 */
@ApiModel(description = "A summary of an individual campaign's settings and content.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CampaignsCreateNewMailchimpCampaign200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_WEB_ID = "web_id";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private Integer webId;

  public static final String SERIALIZED_NAME_PARENT_CAMPAIGN_ID = "parent_campaign_id";
  @SerializedName(SERIALIZED_NAME_PARENT_CAMPAIGN_ID)
  private String parentCampaignId;

  /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    REGULAR("regular"),
    
    PLAINTEXT("plaintext"),
    
    ABSPLIT("absplit"),
    
    RSS("rss"),
    
    VARIATE("variate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_LONG_ARCHIVE_URL = "long_archive_url";
  @SerializedName(SERIALIZED_NAME_LONG_ARCHIVE_URL)
  private String longArchiveUrl;

  /**
   * The current status of the campaign.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    SAVE("save"),
    
    PAUSED("paused"),
    
    SCHEDULE("schedule"),
    
    SENDING("sending"),
    
    SENT("sent"),
    
    CANCELED("canceled"),
    
    CANCELING("canceling"),
    
    ARCHIVED("archived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_EMAILS_SENT = "emails_sent";
  @SerializedName(SERIALIZED_NAME_EMAILS_SENT)
  private Integer emailsSent;

  public static final String SERIALIZED_NAME_SEND_TIME = "send_time";
  @SerializedName(SERIALIZED_NAME_SEND_TIME)
  private OffsetDateTime sendTime;

  /**
   * How the campaign&#39;s content is put together.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
 public enum ContentTypeEnum {
    TEMPLATE("template"),
    
    HTML("html"),
    
    URL("url"),
    
    MULTICHANNEL("multichannel");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String SERIALIZED_NAME_NEEDS_BLOCK_REFRESH = "needs_block_refresh";
  @SerializedName(SERIALIZED_NAME_NEEDS_BLOCK_REFRESH)
  private Boolean needsBlockRefresh;

  public static final String SERIALIZED_NAME_RESENDABLE = "resendable";
  @SerializedName(SERIALIZED_NAME_RESENDABLE)
  private Boolean resendable;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private ListProperty18 recipients;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private CampaignSettingsProperty4 settings;

  public static final String SERIALIZED_NAME_VARIATE_SETTINGS = "variate_settings";
  @SerializedName(SERIALIZED_NAME_VARIATE_SETTINGS)
  private ABTestOptionsProperty1 variateSettings;

  public static final String SERIALIZED_NAME_TRACKING = "tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private CampaignTrackingOptionsProperty tracking;

  public static final String SERIALIZED_NAME_RSS_OPTS = "rss_opts";
  @SerializedName(SERIALIZED_NAME_RSS_OPTS)
  private RSSOptionsProperty2 rssOpts;

  public static final String SERIALIZED_NAME_AB_SPLIT_OPTS = "ab_split_opts";
  @SerializedName(SERIALIZED_NAME_AB_SPLIT_OPTS)
  private ABTestingOptionsProperty abSplitOpts;

  public static final String SERIALIZED_NAME_SOCIAL_CARD = "social_card";
  @SerializedName(SERIALIZED_NAME_SOCIAL_CARD)
  private CampaignSocialCardProperty socialCard;

  public static final String SERIALIZED_NAME_REPORT_SUMMARY = "report_summary";
  @SerializedName(SERIALIZED_NAME_REPORT_SUMMARY)
  private CampaignReportSummaryProperty2 reportSummary;

  public static final String SERIALIZED_NAME_DELIVERY_STATUS = "delivery_status";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STATUS)
  private CampaignDeliveryStatusProperty deliveryStatus;

  public static final String SERIALIZED_NAME_RESEND_SHORTCUT_ELIGIBILITY = "resend_shortcut_eligibility";
  @SerializedName(SERIALIZED_NAME_RESEND_SHORTCUT_ELIGIBILITY)
  private ResendShortcutEligibilityProperty resendShortcutEligibility;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public CampaignsCreateNewMailchimpCampaign200Response() {
  }

  
  public CampaignsCreateNewMailchimpCampaign200Response(
     String id, 
     Integer webId, 
     String parentCampaignId, 
     OffsetDateTime createTime, 
     String archiveUrl, 
     String longArchiveUrl, 
     StatusEnum status, 
     Integer emailsSent, 
     OffsetDateTime sendTime, 
     Boolean needsBlockRefresh, 
     Boolean resendable, 
     List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.webId = webId;
    this.parentCampaignId = parentCampaignId;
    this.createTime = createTime;
    this.archiveUrl = archiveUrl;
    this.longArchiveUrl = longArchiveUrl;
    this.status = status;
    this.emailsSent = emailsSent;
    this.sendTime = sendTime;
    this.needsBlockRefresh = needsBlockRefresh;
    this.resendable = resendable;
    this.links = links;
  }

   /**
   * A string that uniquely identifies this campaign.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string that uniquely identifies this campaign.")

  public String getId() {
    return id;
  }




   /**
   * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at &#x60;https://{dc}.admin.mailchimp.com/campaigns/show/?id&#x3D;{web_id}&#x60;.
   * @return webId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.")

  public Integer getWebId() {
    return webId;
  }




   /**
   * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
   * @return parentCampaignId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.")

  public String getParentCampaignId() {
    return parentCampaignId;
  }




  public CampaignsCreateNewMailchimpCampaign200Response type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


   /**
   * The date and time the campaign was created in ISO 8601 format.
   * @return createTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the campaign was created in ISO 8601 format.")

  public OffsetDateTime getCreateTime() {
    return createTime;
  }




   /**
   * The link to the campaign&#39;s archive version in ISO 8601 format.
   * @return archiveUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The link to the campaign's archive version in ISO 8601 format.")

  public String getArchiveUrl() {
    return archiveUrl;
  }




   /**
   * The original link to the campaign&#39;s archive version.
   * @return longArchiveUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original link to the campaign's archive version.")

  public String getLongArchiveUrl() {
    return longArchiveUrl;
  }




   /**
   * The current status of the campaign.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current status of the campaign.")

  public StatusEnum getStatus() {
    return status;
  }




   /**
   * The total number of emails sent for this campaign.
   * @return emailsSent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of emails sent for this campaign.")

  public Integer getEmailsSent() {
    return emailsSent;
  }




   /**
   * The date and time a campaign was sent.
   * @return sendTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time a campaign was sent.")

  public OffsetDateTime getSendTime() {
    return sendTime;
  }




  public CampaignsCreateNewMailchimpCampaign200Response contentType(ContentTypeEnum contentType) {
    
    
    
    
    this.contentType = contentType;
    return this;
  }

   /**
   * How the campaign&#39;s content is put together.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How the campaign's content is put together.")

  public ContentTypeEnum getContentType() {
    return contentType;
  }


  public void setContentType(ContentTypeEnum contentType) {
    
    
    
    this.contentType = contentType;
  }


   /**
   * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
   * @return needsBlockRefresh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.")

  public Boolean getNeedsBlockRefresh() {
    return needsBlockRefresh;
  }




   /**
   * Determines if the campaign qualifies to be resent to non-openers.
   * @return resendable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if the campaign qualifies to be resent to non-openers.")

  public Boolean getResendable() {
    return resendable;
  }




  public CampaignsCreateNewMailchimpCampaign200Response recipients(ListProperty18 recipients) {
    
    
    
    
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ListProperty18 getRecipients() {
    return recipients;
  }


  public void setRecipients(ListProperty18 recipients) {
    
    
    
    this.recipients = recipients;
  }


  public CampaignsCreateNewMailchimpCampaign200Response settings(CampaignSettingsProperty4 settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignSettingsProperty4 getSettings() {
    return settings;
  }


  public void setSettings(CampaignSettingsProperty4 settings) {
    
    
    
    this.settings = settings;
  }


  public CampaignsCreateNewMailchimpCampaign200Response variateSettings(ABTestOptionsProperty1 variateSettings) {
    
    
    
    
    this.variateSettings = variateSettings;
    return this;
  }

   /**
   * Get variateSettings
   * @return variateSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ABTestOptionsProperty1 getVariateSettings() {
    return variateSettings;
  }


  public void setVariateSettings(ABTestOptionsProperty1 variateSettings) {
    
    
    
    this.variateSettings = variateSettings;
  }


  public CampaignsCreateNewMailchimpCampaign200Response tracking(CampaignTrackingOptionsProperty tracking) {
    
    
    
    
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignTrackingOptionsProperty getTracking() {
    return tracking;
  }


  public void setTracking(CampaignTrackingOptionsProperty tracking) {
    
    
    
    this.tracking = tracking;
  }


  public CampaignsCreateNewMailchimpCampaign200Response rssOpts(RSSOptionsProperty2 rssOpts) {
    
    
    
    
    this.rssOpts = rssOpts;
    return this;
  }

   /**
   * Get rssOpts
   * @return rssOpts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RSSOptionsProperty2 getRssOpts() {
    return rssOpts;
  }


  public void setRssOpts(RSSOptionsProperty2 rssOpts) {
    
    
    
    this.rssOpts = rssOpts;
  }


  public CampaignsCreateNewMailchimpCampaign200Response abSplitOpts(ABTestingOptionsProperty abSplitOpts) {
    
    
    
    
    this.abSplitOpts = abSplitOpts;
    return this;
  }

   /**
   * Get abSplitOpts
   * @return abSplitOpts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ABTestingOptionsProperty getAbSplitOpts() {
    return abSplitOpts;
  }


  public void setAbSplitOpts(ABTestingOptionsProperty abSplitOpts) {
    
    
    
    this.abSplitOpts = abSplitOpts;
  }


  public CampaignsCreateNewMailchimpCampaign200Response socialCard(CampaignSocialCardProperty socialCard) {
    
    
    
    
    this.socialCard = socialCard;
    return this;
  }

   /**
   * Get socialCard
   * @return socialCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignSocialCardProperty getSocialCard() {
    return socialCard;
  }


  public void setSocialCard(CampaignSocialCardProperty socialCard) {
    
    
    
    this.socialCard = socialCard;
  }


  public CampaignsCreateNewMailchimpCampaign200Response reportSummary(CampaignReportSummaryProperty2 reportSummary) {
    
    
    
    
    this.reportSummary = reportSummary;
    return this;
  }

   /**
   * Get reportSummary
   * @return reportSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignReportSummaryProperty2 getReportSummary() {
    return reportSummary;
  }


  public void setReportSummary(CampaignReportSummaryProperty2 reportSummary) {
    
    
    
    this.reportSummary = reportSummary;
  }


  public CampaignsCreateNewMailchimpCampaign200Response deliveryStatus(CampaignDeliveryStatusProperty deliveryStatus) {
    
    
    
    
    this.deliveryStatus = deliveryStatus;
    return this;
  }

   /**
   * Get deliveryStatus
   * @return deliveryStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignDeliveryStatusProperty getDeliveryStatus() {
    return deliveryStatus;
  }


  public void setDeliveryStatus(CampaignDeliveryStatusProperty deliveryStatus) {
    
    
    
    this.deliveryStatus = deliveryStatus;
  }


  public CampaignsCreateNewMailchimpCampaign200Response resendShortcutEligibility(ResendShortcutEligibilityProperty resendShortcutEligibility) {
    
    
    
    
    this.resendShortcutEligibility = resendShortcutEligibility;
    return this;
  }

   /**
   * Get resendShortcutEligibility
   * @return resendShortcutEligibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResendShortcutEligibilityProperty getResendShortcutEligibility() {
    return resendShortcutEligibility;
  }


  public void setResendShortcutEligibility(ResendShortcutEligibilityProperty resendShortcutEligibility) {
    
    
    
    this.resendShortcutEligibility = resendShortcutEligibility;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CampaignsCreateNewMailchimpCampaign200Response instance itself
   */
  public CampaignsCreateNewMailchimpCampaign200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignsCreateNewMailchimpCampaign200Response campaignsCreateNewMailchimpCampaign200Response = (CampaignsCreateNewMailchimpCampaign200Response) o;
    return Objects.equals(this.id, campaignsCreateNewMailchimpCampaign200Response.id) &&
        Objects.equals(this.webId, campaignsCreateNewMailchimpCampaign200Response.webId) &&
        Objects.equals(this.parentCampaignId, campaignsCreateNewMailchimpCampaign200Response.parentCampaignId) &&
        Objects.equals(this.type, campaignsCreateNewMailchimpCampaign200Response.type) &&
        Objects.equals(this.createTime, campaignsCreateNewMailchimpCampaign200Response.createTime) &&
        Objects.equals(this.archiveUrl, campaignsCreateNewMailchimpCampaign200Response.archiveUrl) &&
        Objects.equals(this.longArchiveUrl, campaignsCreateNewMailchimpCampaign200Response.longArchiveUrl) &&
        Objects.equals(this.status, campaignsCreateNewMailchimpCampaign200Response.status) &&
        Objects.equals(this.emailsSent, campaignsCreateNewMailchimpCampaign200Response.emailsSent) &&
        Objects.equals(this.sendTime, campaignsCreateNewMailchimpCampaign200Response.sendTime) &&
        Objects.equals(this.contentType, campaignsCreateNewMailchimpCampaign200Response.contentType) &&
        Objects.equals(this.needsBlockRefresh, campaignsCreateNewMailchimpCampaign200Response.needsBlockRefresh) &&
        Objects.equals(this.resendable, campaignsCreateNewMailchimpCampaign200Response.resendable) &&
        Objects.equals(this.recipients, campaignsCreateNewMailchimpCampaign200Response.recipients) &&
        Objects.equals(this.settings, campaignsCreateNewMailchimpCampaign200Response.settings) &&
        Objects.equals(this.variateSettings, campaignsCreateNewMailchimpCampaign200Response.variateSettings) &&
        Objects.equals(this.tracking, campaignsCreateNewMailchimpCampaign200Response.tracking) &&
        Objects.equals(this.rssOpts, campaignsCreateNewMailchimpCampaign200Response.rssOpts) &&
        Objects.equals(this.abSplitOpts, campaignsCreateNewMailchimpCampaign200Response.abSplitOpts) &&
        Objects.equals(this.socialCard, campaignsCreateNewMailchimpCampaign200Response.socialCard) &&
        Objects.equals(this.reportSummary, campaignsCreateNewMailchimpCampaign200Response.reportSummary) &&
        Objects.equals(this.deliveryStatus, campaignsCreateNewMailchimpCampaign200Response.deliveryStatus) &&
        Objects.equals(this.resendShortcutEligibility, campaignsCreateNewMailchimpCampaign200Response.resendShortcutEligibility) &&
        Objects.equals(this.links, campaignsCreateNewMailchimpCampaign200Response.links)&&
        Objects.equals(this.additionalProperties, campaignsCreateNewMailchimpCampaign200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, webId, parentCampaignId, type, createTime, archiveUrl, longArchiveUrl, status, emailsSent, sendTime, contentType, needsBlockRefresh, resendable, recipients, settings, variateSettings, tracking, rssOpts, abSplitOpts, socialCard, reportSummary, deliveryStatus, resendShortcutEligibility, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignsCreateNewMailchimpCampaign200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    parentCampaignId: ").append(toIndentedString(parentCampaignId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    longArchiveUrl: ").append(toIndentedString(longArchiveUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    needsBlockRefresh: ").append(toIndentedString(needsBlockRefresh)).append("\n");
    sb.append("    resendable: ").append(toIndentedString(resendable)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    variateSettings: ").append(toIndentedString(variateSettings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    rssOpts: ").append(toIndentedString(rssOpts)).append("\n");
    sb.append("    abSplitOpts: ").append(toIndentedString(abSplitOpts)).append("\n");
    sb.append("    socialCard: ").append(toIndentedString(socialCard)).append("\n");
    sb.append("    reportSummary: ").append(toIndentedString(reportSummary)).append("\n");
    sb.append("    deliveryStatus: ").append(toIndentedString(deliveryStatus)).append("\n");
    sb.append("    resendShortcutEligibility: ").append(toIndentedString(resendShortcutEligibility)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("web_id");
    openapiFields.add("parent_campaign_id");
    openapiFields.add("type");
    openapiFields.add("create_time");
    openapiFields.add("archive_url");
    openapiFields.add("long_archive_url");
    openapiFields.add("status");
    openapiFields.add("emails_sent");
    openapiFields.add("send_time");
    openapiFields.add("content_type");
    openapiFields.add("needs_block_refresh");
    openapiFields.add("resendable");
    openapiFields.add("recipients");
    openapiFields.add("settings");
    openapiFields.add("variate_settings");
    openapiFields.add("tracking");
    openapiFields.add("rss_opts");
    openapiFields.add("ab_split_opts");
    openapiFields.add("social_card");
    openapiFields.add("report_summary");
    openapiFields.add("delivery_status");
    openapiFields.add("resend_shortcut_eligibility");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignsCreateNewMailchimpCampaign200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignsCreateNewMailchimpCampaign200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignsCreateNewMailchimpCampaign200Response is not found in the empty JSON string", CampaignsCreateNewMailchimpCampaign200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("parent_campaign_id") != null && !jsonObj.get("parent_campaign_id").isJsonNull()) && !jsonObj.get("parent_campaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_campaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_campaign_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("archive_url") != null && !jsonObj.get("archive_url").isJsonNull()) && !jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if ((jsonObj.get("long_archive_url") != null && !jsonObj.get("long_archive_url").isJsonNull()) && !jsonObj.get("long_archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `long_archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("long_archive_url").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      // validate the optional field `recipients`
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        ListProperty18.validateJsonObject(jsonObj.getAsJsonObject("recipients"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        CampaignSettingsProperty4.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      }
      // validate the optional field `variate_settings`
      if (jsonObj.get("variate_settings") != null && !jsonObj.get("variate_settings").isJsonNull()) {
        ABTestOptionsProperty1.validateJsonObject(jsonObj.getAsJsonObject("variate_settings"));
      }
      // validate the optional field `tracking`
      if (jsonObj.get("tracking") != null && !jsonObj.get("tracking").isJsonNull()) {
        CampaignTrackingOptionsProperty.validateJsonObject(jsonObj.getAsJsonObject("tracking"));
      }
      // validate the optional field `rss_opts`
      if (jsonObj.get("rss_opts") != null && !jsonObj.get("rss_opts").isJsonNull()) {
        RSSOptionsProperty2.validateJsonObject(jsonObj.getAsJsonObject("rss_opts"));
      }
      // validate the optional field `ab_split_opts`
      if (jsonObj.get("ab_split_opts") != null && !jsonObj.get("ab_split_opts").isJsonNull()) {
        ABTestingOptionsProperty.validateJsonObject(jsonObj.getAsJsonObject("ab_split_opts"));
      }
      // validate the optional field `social_card`
      if (jsonObj.get("social_card") != null && !jsonObj.get("social_card").isJsonNull()) {
        CampaignSocialCardProperty.validateJsonObject(jsonObj.getAsJsonObject("social_card"));
      }
      // validate the optional field `report_summary`
      if (jsonObj.get("report_summary") != null && !jsonObj.get("report_summary").isJsonNull()) {
        CampaignReportSummaryProperty2.validateJsonObject(jsonObj.getAsJsonObject("report_summary"));
      }
      // validate the optional field `delivery_status`
      if (jsonObj.get("delivery_status") != null && !jsonObj.get("delivery_status").isJsonNull()) {
        CampaignDeliveryStatusProperty.validateJsonObject(jsonObj.getAsJsonObject("delivery_status"));
      }
      // validate the optional field `resend_shortcut_eligibility`
      if (jsonObj.get("resend_shortcut_eligibility") != null && !jsonObj.get("resend_shortcut_eligibility").isJsonNull()) {
        ResendShortcutEligibilityProperty.validateJsonObject(jsonObj.getAsJsonObject("resend_shortcut_eligibility"));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignsCreateNewMailchimpCampaign200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignsCreateNewMailchimpCampaign200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignsCreateNewMailchimpCampaign200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignsCreateNewMailchimpCampaign200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignsCreateNewMailchimpCampaign200Response>() {
           @Override
           public void write(JsonWriter out, CampaignsCreateNewMailchimpCampaign200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignsCreateNewMailchimpCampaign200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CampaignsCreateNewMailchimpCampaign200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignsCreateNewMailchimpCampaign200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignsCreateNewMailchimpCampaign200Response
  * @throws IOException if the JSON string is invalid with respect to CampaignsCreateNewMailchimpCampaign200Response
  */
  public static CampaignsCreateNewMailchimpCampaign200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignsCreateNewMailchimpCampaign200Response.class);
  }

 /**
  * Convert an instance of CampaignsCreateNewMailchimpCampaign200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

