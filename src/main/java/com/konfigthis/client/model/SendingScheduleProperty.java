/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DailySendingDaysProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The schedule for sending the RSS Campaign.
 */
@ApiModel(description = "The schedule for sending the RSS Campaign.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SendingScheduleProperty {
  public static final String SERIALIZED_NAME_HOUR = "hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private Integer hour;

  public static final String SERIALIZED_NAME_DAILY_SEND = "daily_send";
  @SerializedName(SERIALIZED_NAME_DAILY_SEND)
  private DailySendingDaysProperty dailySend;

  /**
   * The day of the week to send a weekly RSS Campaign.
   */
  @JsonAdapter(WeeklySendDayEnum.Adapter.class)
 public enum WeeklySendDayEnum {
    SUNDAY("sunday"),
    
    MONDAY("monday"),
    
    TUESDAY("tuesday"),
    
    WEDNESDAY("wednesday"),
    
    THURSDAY("thursday"),
    
    FRIDAY("friday"),
    
    SATURDAY("saturday");

    private String value;

    WeeklySendDayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeeklySendDayEnum fromValue(String value) {
      for (WeeklySendDayEnum b : WeeklySendDayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WeeklySendDayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeeklySendDayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeeklySendDayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WeeklySendDayEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WEEKLY_SEND_DAY = "weekly_send_day";
  @SerializedName(SERIALIZED_NAME_WEEKLY_SEND_DAY)
  private WeeklySendDayEnum weeklySendDay;

  public static final String SERIALIZED_NAME_MONTHLY_SEND_DATE = "monthly_send_date";
  @SerializedName(SERIALIZED_NAME_MONTHLY_SEND_DATE)
  private Double monthlySendDate;

  public SendingScheduleProperty() {
  }

  public SendingScheduleProperty hour(Integer hour) {
    if (hour != null && hour < 0) {
      throw new IllegalArgumentException("Invalid value for hour. Must be greater than or equal to 0.");
    }
    if (hour != null && hour > 23) {
      throw new IllegalArgumentException("Invalid value for hour. Must be less than or equal to 23.");
    }
    
    
    this.hour = hour;
    return this;
  }

   /**
   * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, &#39;4&#39; would be 4am in [your account&#39;s default time zone](https://mailchimp.com/help/set-account-defaults/).
   * minimum: 0
   * maximum: 23
   * @return hour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).")

  public Integer getHour() {
    return hour;
  }


  public void setHour(Integer hour) {
    if (hour != null && hour < 0) {
      throw new IllegalArgumentException("Invalid value for hour. Must be greater than or equal to 0.");
    }
    if (hour != null && hour > 23) {
      throw new IllegalArgumentException("Invalid value for hour. Must be less than or equal to 23.");
    }
    
    this.hour = hour;
  }


  public SendingScheduleProperty dailySend(DailySendingDaysProperty dailySend) {
    
    
    
    
    this.dailySend = dailySend;
    return this;
  }

   /**
   * Get dailySend
   * @return dailySend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DailySendingDaysProperty getDailySend() {
    return dailySend;
  }


  public void setDailySend(DailySendingDaysProperty dailySend) {
    
    
    
    this.dailySend = dailySend;
  }


  public SendingScheduleProperty weeklySendDay(WeeklySendDayEnum weeklySendDay) {
    
    
    
    
    this.weeklySendDay = weeklySendDay;
    return this;
  }

   /**
   * The day of the week to send a weekly RSS Campaign.
   * @return weeklySendDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The day of the week to send a weekly RSS Campaign.")

  public WeeklySendDayEnum getWeeklySendDay() {
    return weeklySendDay;
  }


  public void setWeeklySendDay(WeeklySendDayEnum weeklySendDay) {
    
    
    
    this.weeklySendDay = weeklySendDay;
  }


  public SendingScheduleProperty monthlySendDate(Double monthlySendDate) {
    if (monthlySendDate != null && monthlySendDate < 0) {
      throw new IllegalArgumentException("Invalid value for monthlySendDate. Must be greater than or equal to 0.");
    }
    if (monthlySendDate != null && monthlySendDate > 31) {
      throw new IllegalArgumentException("Invalid value for monthlySendDate. Must be less than or equal to 31.");
    }
    
    
    this.monthlySendDate = monthlySendDate;
    return this;
  }

  public SendingScheduleProperty monthlySendDate(Integer monthlySendDate) {
    if (monthlySendDate != null && monthlySendDate < 0) {
      throw new IllegalArgumentException("Invalid value for monthlySendDate. Must be greater than or equal to 0.");
    }
    if (monthlySendDate != null && monthlySendDate > 31) {
      throw new IllegalArgumentException("Invalid value for monthlySendDate. Must be less than or equal to 31.");
    }
    
    
    this.monthlySendDate = monthlySendDate.doubleValue();
    return this;
  }

   /**
   * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where &#39;0&#39; is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
   * minimum: 0
   * maximum: 31
   * @return monthlySendDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.")

  public Double getMonthlySendDate() {
    return monthlySendDate;
  }


  public void setMonthlySendDate(Double monthlySendDate) {
    if (monthlySendDate != null && monthlySendDate < 0) {
      throw new IllegalArgumentException("Invalid value for monthlySendDate. Must be greater than or equal to 0.");
    }
    if (monthlySendDate != null && monthlySendDate > 31) {
      throw new IllegalArgumentException("Invalid value for monthlySendDate. Must be less than or equal to 31.");
    }
    
    this.monthlySendDate = monthlySendDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SendingScheduleProperty instance itself
   */
  public SendingScheduleProperty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendingScheduleProperty sendingScheduleProperty = (SendingScheduleProperty) o;
    return Objects.equals(this.hour, sendingScheduleProperty.hour) &&
        Objects.equals(this.dailySend, sendingScheduleProperty.dailySend) &&
        Objects.equals(this.weeklySendDay, sendingScheduleProperty.weeklySendDay) &&
        Objects.equals(this.monthlySendDate, sendingScheduleProperty.monthlySendDate)&&
        Objects.equals(this.additionalProperties, sendingScheduleProperty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hour, dailySend, weeklySendDay, monthlySendDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendingScheduleProperty {\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    dailySend: ").append(toIndentedString(dailySend)).append("\n");
    sb.append("    weeklySendDay: ").append(toIndentedString(weeklySendDay)).append("\n");
    sb.append("    monthlySendDate: ").append(toIndentedString(monthlySendDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hour");
    openapiFields.add("daily_send");
    openapiFields.add("weekly_send_day");
    openapiFields.add("monthly_send_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SendingScheduleProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SendingScheduleProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendingScheduleProperty is not found in the empty JSON string", SendingScheduleProperty.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `daily_send`
      if (jsonObj.get("daily_send") != null && !jsonObj.get("daily_send").isJsonNull()) {
        DailySendingDaysProperty.validateJsonObject(jsonObj.getAsJsonObject("daily_send"));
      }
      if ((jsonObj.get("weekly_send_day") != null && !jsonObj.get("weekly_send_day").isJsonNull()) && !jsonObj.get("weekly_send_day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weekly_send_day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weekly_send_day").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendingScheduleProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendingScheduleProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendingScheduleProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendingScheduleProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<SendingScheduleProperty>() {
           @Override
           public void write(JsonWriter out, SendingScheduleProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SendingScheduleProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SendingScheduleProperty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SendingScheduleProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SendingScheduleProperty
  * @throws IOException if the JSON string is invalid with respect to SendingScheduleProperty
  */
  public static SendingScheduleProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendingScheduleProperty.class);
  }

 /**
  * Convert an instance of SendingScheduleProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

