/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CollectionOfContentForListSignupForms1;
import com.konfigthis.client.model.CollectionOfElementStyleForListSignupForms1;
import com.konfigthis.client.model.ResourceLink;
import com.konfigthis.client.model.SignupFormHeaderOptionsProperty1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * List signup form.
 */
@ApiModel(description = "List signup form.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SignupForm {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private SignupFormHeaderOptionsProperty1 header;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private List<CollectionOfContentForListSignupForms1> contents = null;

  public static final String SERIALIZED_NAME_STYLES = "styles";
  @SerializedName(SERIALIZED_NAME_STYLES)
  private List<CollectionOfElementStyleForListSignupForms1> styles = null;

  public static final String SERIALIZED_NAME_SIGNUP_FORM_URL = "signup_form_url";
  @SerializedName(SERIALIZED_NAME_SIGNUP_FORM_URL)
  private String signupFormUrl;

  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public SignupForm() {
  }

  
  public SignupForm(
     String listId, 
     List<ResourceLink> links
  ) {
    this();
    this.listId = listId;
    this.links = links;
  }

  public SignupForm header(SignupFormHeaderOptionsProperty1 header) {
    
    
    
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SignupFormHeaderOptionsProperty1 getHeader() {
    return header;
  }


  public void setHeader(SignupFormHeaderOptionsProperty1 header) {
    
    
    
    this.header = header;
  }


  public SignupForm contents(List<CollectionOfContentForListSignupForms1> contents) {
    
    
    
    
    this.contents = contents;
    return this;
  }

  public SignupForm addContentsItem(CollectionOfContentForListSignupForms1 contentsItem) {
    if (this.contents == null) {
      this.contents = new ArrayList<>();
    }
    this.contents.add(contentsItem);
    return this;
  }

   /**
   * The signup form body content.
   * @return contents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The signup form body content.")

  public List<CollectionOfContentForListSignupForms1> getContents() {
    return contents;
  }


  public void setContents(List<CollectionOfContentForListSignupForms1> contents) {
    
    
    
    this.contents = contents;
  }


  public SignupForm styles(List<CollectionOfElementStyleForListSignupForms1> styles) {
    
    
    
    
    this.styles = styles;
    return this;
  }

  public SignupForm addStylesItem(CollectionOfElementStyleForListSignupForms1 stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

   /**
   * An array of objects, each representing an element style for the signup form.
   * @return styles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of objects, each representing an element style for the signup form.")

  public List<CollectionOfElementStyleForListSignupForms1> getStyles() {
    return styles;
  }


  public void setStyles(List<CollectionOfElementStyleForListSignupForms1> styles) {
    
    
    
    this.styles = styles;
  }


  public SignupForm signupFormUrl(String signupFormUrl) {
    
    
    
    
    this.signupFormUrl = signupFormUrl;
    return this;
  }

   /**
   * Signup form URL.
   * @return signupFormUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signup form URL.")

  public String getSignupFormUrl() {
    return signupFormUrl;
  }


  public void setSignupFormUrl(String signupFormUrl) {
    
    
    
    this.signupFormUrl = signupFormUrl;
  }


   /**
   * The signup form&#39;s list id.
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4ca5becb8d", value = "The signup form's list id.")

  public String getListId() {
    return listId;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SignupForm instance itself
   */
  public SignupForm putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignupForm signupForm = (SignupForm) o;
    return Objects.equals(this.header, signupForm.header) &&
        Objects.equals(this.contents, signupForm.contents) &&
        Objects.equals(this.styles, signupForm.styles) &&
        Objects.equals(this.signupFormUrl, signupForm.signupFormUrl) &&
        Objects.equals(this.listId, signupForm.listId) &&
        Objects.equals(this.links, signupForm.links)&&
        Objects.equals(this.additionalProperties, signupForm.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, contents, styles, signupFormUrl, listId, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignupForm {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    signupFormUrl: ").append(toIndentedString(signupFormUrl)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("contents");
    openapiFields.add("styles");
    openapiFields.add("signup_form_url");
    openapiFields.add("list_id");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignupForm
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SignupForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignupForm is not found in the empty JSON string", SignupForm.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        SignupFormHeaderOptionsProperty1.validateJsonObject(jsonObj.getAsJsonObject("header"));
      }
      if (jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) {
        JsonArray jsonArraycontents = jsonObj.getAsJsonArray("contents");
        if (jsonArraycontents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contents` to be an array in the JSON string but got `%s`", jsonObj.get("contents").toString()));
          }

          // validate the optional field `contents` (array)
          for (int i = 0; i < jsonArraycontents.size(); i++) {
            CollectionOfContentForListSignupForms1.validateJsonObject(jsonArraycontents.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("styles") != null && !jsonObj.get("styles").isJsonNull()) {
        JsonArray jsonArraystyles = jsonObj.getAsJsonArray("styles");
        if (jsonArraystyles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("styles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `styles` to be an array in the JSON string but got `%s`", jsonObj.get("styles").toString()));
          }

          // validate the optional field `styles` (array)
          for (int i = 0; i < jsonArraystyles.size(); i++) {
            CollectionOfElementStyleForListSignupForms1.validateJsonObject(jsonArraystyles.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("signup_form_url") != null && !jsonObj.get("signup_form_url").isJsonNull()) && !jsonObj.get("signup_form_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signup_form_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signup_form_url").toString()));
      }
      if ((jsonObj.get("list_id") != null && !jsonObj.get("list_id").isJsonNull()) && !jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignupForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignupForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignupForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignupForm.class));

       return (TypeAdapter<T>) new TypeAdapter<SignupForm>() {
           @Override
           public void write(JsonWriter out, SignupForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SignupForm read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SignupForm instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignupForm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignupForm
  * @throws IOException if the JSON string is invalid with respect to SignupForm
  */
  public static SignupForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignupForm.class);
  }

 /**
  * Convert an instance of SignupForm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

