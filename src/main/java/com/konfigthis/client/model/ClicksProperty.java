/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * An object describing the click activity for the campaign.
 */
@ApiModel(description = "An object describing the click activity for the campaign.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ClicksProperty {
  public static final String SERIALIZED_NAME_CLICKS_TOTAL = "clicks_total";
  @SerializedName(SERIALIZED_NAME_CLICKS_TOTAL)
  private Integer clicksTotal;

  public static final String SERIALIZED_NAME_UNIQUE_CLICKS = "unique_clicks";
  @SerializedName(SERIALIZED_NAME_UNIQUE_CLICKS)
  private Integer uniqueClicks;

  public static final String SERIALIZED_NAME_UNIQUE_SUBSCRIBER_CLICKS = "unique_subscriber_clicks";
  @SerializedName(SERIALIZED_NAME_UNIQUE_SUBSCRIBER_CLICKS)
  private Integer uniqueSubscriberClicks;

  public static final String SERIALIZED_NAME_CLICK_RATE = "click_rate";
  @SerializedName(SERIALIZED_NAME_CLICK_RATE)
  private Double clickRate;

  public static final String SERIALIZED_NAME_LAST_CLICK = "last_click";
  @SerializedName(SERIALIZED_NAME_LAST_CLICK)
  private OffsetDateTime lastClick;

  public ClicksProperty() {
  }

  public ClicksProperty clicksTotal(Integer clicksTotal) {
    
    
    
    
    this.clicksTotal = clicksTotal;
    return this;
  }

   /**
   * The total number of clicks for the campaign.
   * @return clicksTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of clicks for the campaign.")

  public Integer getClicksTotal() {
    return clicksTotal;
  }


  public void setClicksTotal(Integer clicksTotal) {
    
    
    
    this.clicksTotal = clicksTotal;
  }


  public ClicksProperty uniqueClicks(Integer uniqueClicks) {
    
    
    
    
    this.uniqueClicks = uniqueClicks;
    return this;
  }

   /**
   * The total number of unique clicks for links across a campaign.
   * @return uniqueClicks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of unique clicks for links across a campaign.")

  public Integer getUniqueClicks() {
    return uniqueClicks;
  }


  public void setUniqueClicks(Integer uniqueClicks) {
    
    
    
    this.uniqueClicks = uniqueClicks;
  }


  public ClicksProperty uniqueSubscriberClicks(Integer uniqueSubscriberClicks) {
    
    
    
    
    this.uniqueSubscriberClicks = uniqueSubscriberClicks;
    return this;
  }

   /**
   * The total number of subscribers who clicked on a campaign.
   * @return uniqueSubscriberClicks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of subscribers who clicked on a campaign.")

  public Integer getUniqueSubscriberClicks() {
    return uniqueSubscriberClicks;
  }


  public void setUniqueSubscriberClicks(Integer uniqueSubscriberClicks) {
    
    
    
    this.uniqueSubscriberClicks = uniqueSubscriberClicks;
  }


  public ClicksProperty clickRate(Double clickRate) {
    
    
    
    
    this.clickRate = clickRate;
    return this;
  }

  public ClicksProperty clickRate(Integer clickRate) {
    
    
    
    
    this.clickRate = clickRate.doubleValue();
    return this;
  }

   /**
   * The number of unique clicks divided by the total number of successful deliveries.
   * @return clickRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of unique clicks divided by the total number of successful deliveries.")

  public Double getClickRate() {
    return clickRate;
  }


  public void setClickRate(Double clickRate) {
    
    
    
    this.clickRate = clickRate;
  }


  public ClicksProperty lastClick(OffsetDateTime lastClick) {
    
    
    
    
    this.lastClick = lastClick;
    return this;
  }

   /**
   * The date and time of the last recorded click for the campaign in ISO 8601 format.
   * @return lastClick
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time of the last recorded click for the campaign in ISO 8601 format.")

  public OffsetDateTime getLastClick() {
    return lastClick;
  }


  public void setLastClick(OffsetDateTime lastClick) {
    
    
    
    this.lastClick = lastClick;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ClicksProperty instance itself
   */
  public ClicksProperty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClicksProperty clicksProperty = (ClicksProperty) o;
    return Objects.equals(this.clicksTotal, clicksProperty.clicksTotal) &&
        Objects.equals(this.uniqueClicks, clicksProperty.uniqueClicks) &&
        Objects.equals(this.uniqueSubscriberClicks, clicksProperty.uniqueSubscriberClicks) &&
        Objects.equals(this.clickRate, clicksProperty.clickRate) &&
        Objects.equals(this.lastClick, clicksProperty.lastClick)&&
        Objects.equals(this.additionalProperties, clicksProperty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clicksTotal, uniqueClicks, uniqueSubscriberClicks, clickRate, lastClick, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClicksProperty {\n");
    sb.append("    clicksTotal: ").append(toIndentedString(clicksTotal)).append("\n");
    sb.append("    uniqueClicks: ").append(toIndentedString(uniqueClicks)).append("\n");
    sb.append("    uniqueSubscriberClicks: ").append(toIndentedString(uniqueSubscriberClicks)).append("\n");
    sb.append("    clickRate: ").append(toIndentedString(clickRate)).append("\n");
    sb.append("    lastClick: ").append(toIndentedString(lastClick)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clicks_total");
    openapiFields.add("unique_clicks");
    openapiFields.add("unique_subscriber_clicks");
    openapiFields.add("click_rate");
    openapiFields.add("last_click");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClicksProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ClicksProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClicksProperty is not found in the empty JSON string", ClicksProperty.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClicksProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClicksProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClicksProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClicksProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ClicksProperty>() {
           @Override
           public void write(JsonWriter out, ClicksProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ClicksProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ClicksProperty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClicksProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClicksProperty
  * @throws IOException if the JSON string is invalid with respect to ClicksProperty
  */
  public static ClicksProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClicksProperty.class);
  }

 /**
  * Convert an instance of ClicksProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

