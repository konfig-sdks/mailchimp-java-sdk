/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The events that can trigger the webhook and whether they are enabled.
 */
@ApiModel(description = "The events that can trigger the webhook and whether they are enabled.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventsProperty5 {
  public static final String SERIALIZED_NAME_SUBSCRIBE = "subscribe";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE)
  private Boolean subscribe;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE = "unsubscribe";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE)
  private Boolean unsubscribe;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private Boolean profile;

  public static final String SERIALIZED_NAME_CLEANED = "cleaned";
  @SerializedName(SERIALIZED_NAME_CLEANED)
  private Boolean cleaned;

  public static final String SERIALIZED_NAME_UPEMAIL = "upemail";
  @SerializedName(SERIALIZED_NAME_UPEMAIL)
  private Boolean upemail;

  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private Boolean campaign;

  public EventsProperty5() {
  }

  public EventsProperty5 subscribe(Boolean subscribe) {
    
    
    
    
    this.subscribe = subscribe;
    return this;
  }

   /**
   * Whether the webhook is triggered when a list subscriber is added.
   * @return subscribe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webhook is triggered when a list subscriber is added.")

  public Boolean getSubscribe() {
    return subscribe;
  }


  public void setSubscribe(Boolean subscribe) {
    
    
    
    this.subscribe = subscribe;
  }


  public EventsProperty5 unsubscribe(Boolean unsubscribe) {
    
    
    
    
    this.unsubscribe = unsubscribe;
    return this;
  }

   /**
   * Whether the webhook is triggered when a list member unsubscribes.
   * @return unsubscribe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webhook is triggered when a list member unsubscribes.")

  public Boolean getUnsubscribe() {
    return unsubscribe;
  }


  public void setUnsubscribe(Boolean unsubscribe) {
    
    
    
    this.unsubscribe = unsubscribe;
  }


  public EventsProperty5 profile(Boolean profile) {
    
    
    
    
    this.profile = profile;
    return this;
  }

   /**
   * Whether the webhook is triggered when a subscriber&#39;s profile is updated.
   * @return profile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webhook is triggered when a subscriber's profile is updated.")

  public Boolean getProfile() {
    return profile;
  }


  public void setProfile(Boolean profile) {
    
    
    
    this.profile = profile;
  }


  public EventsProperty5 cleaned(Boolean cleaned) {
    
    
    
    
    this.cleaned = cleaned;
    return this;
  }

   /**
   * Whether the webhook is triggered when a subscriber&#39;s email address is cleaned from the list.
   * @return cleaned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webhook is triggered when a subscriber's email address is cleaned from the list.")

  public Boolean getCleaned() {
    return cleaned;
  }


  public void setCleaned(Boolean cleaned) {
    
    
    
    this.cleaned = cleaned;
  }


  public EventsProperty5 upemail(Boolean upemail) {
    
    
    
    
    this.upemail = upemail;
    return this;
  }

   /**
   * Whether the webhook is triggered when a subscriber&#39;s email address is changed.
   * @return upemail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webhook is triggered when a subscriber's email address is changed.")

  public Boolean getUpemail() {
    return upemail;
  }


  public void setUpemail(Boolean upemail) {
    
    
    
    this.upemail = upemail;
  }


  public EventsProperty5 campaign(Boolean campaign) {
    
    
    
    
    this.campaign = campaign;
    return this;
  }

   /**
   * Whether the webhook is triggered when a campaign is sent or cancelled.
   * @return campaign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webhook is triggered when a campaign is sent or cancelled.")

  public Boolean getCampaign() {
    return campaign;
  }


  public void setCampaign(Boolean campaign) {
    
    
    
    this.campaign = campaign;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventsProperty5 instance itself
   */
  public EventsProperty5 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventsProperty5 eventsProperty5 = (EventsProperty5) o;
    return Objects.equals(this.subscribe, eventsProperty5.subscribe) &&
        Objects.equals(this.unsubscribe, eventsProperty5.unsubscribe) &&
        Objects.equals(this.profile, eventsProperty5.profile) &&
        Objects.equals(this.cleaned, eventsProperty5.cleaned) &&
        Objects.equals(this.upemail, eventsProperty5.upemail) &&
        Objects.equals(this.campaign, eventsProperty5.campaign)&&
        Objects.equals(this.additionalProperties, eventsProperty5.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscribe, unsubscribe, profile, cleaned, upemail, campaign, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventsProperty5 {\n");
    sb.append("    subscribe: ").append(toIndentedString(subscribe)).append("\n");
    sb.append("    unsubscribe: ").append(toIndentedString(unsubscribe)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    cleaned: ").append(toIndentedString(cleaned)).append("\n");
    sb.append("    upemail: ").append(toIndentedString(upemail)).append("\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subscribe");
    openapiFields.add("unsubscribe");
    openapiFields.add("profile");
    openapiFields.add("cleaned");
    openapiFields.add("upemail");
    openapiFields.add("campaign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventsProperty5
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventsProperty5.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventsProperty5 is not found in the empty JSON string", EventsProperty5.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventsProperty5.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventsProperty5' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventsProperty5> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventsProperty5.class));

       return (TypeAdapter<T>) new TypeAdapter<EventsProperty5>() {
           @Override
           public void write(JsonWriter out, EventsProperty5 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventsProperty5 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EventsProperty5 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventsProperty5 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventsProperty5
  * @throws IOException if the JSON string is invalid with respect to EventsProperty5
  */
  public static EventsProperty5 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventsProperty5.class);
  }

 /**
  * Convert an instance of EventsProperty5 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

