/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CombinationsPropertyInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The settings specific to A/B test campaigns.
 */
@ApiModel(description = "The settings specific to A/B test campaigns.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ABTestOptionsProperty1 {
  public static final String SERIALIZED_NAME_WINNING_COMBINATION_ID = "winning_combination_id";
  @SerializedName(SERIALIZED_NAME_WINNING_COMBINATION_ID)
  private String winningCombinationId;

  public static final String SERIALIZED_NAME_WINNING_CAMPAIGN_ID = "winning_campaign_id";
  @SerializedName(SERIALIZED_NAME_WINNING_CAMPAIGN_ID)
  private String winningCampaignId;

  /**
   * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with &#39;manual&#39; as the winner_criteria, the winner must be chosen in the Mailchimp web application.
   */
  @JsonAdapter(WinnerCriteriaEnum.Adapter.class)
 public enum WinnerCriteriaEnum {
    OPENS("opens"),
    
    CLICKS("clicks"),
    
    MANUAL("manual"),
    
    TOTAL_REVENUE("total_revenue");

    private String value;

    WinnerCriteriaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WinnerCriteriaEnum fromValue(String value) {
      for (WinnerCriteriaEnum b : WinnerCriteriaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WinnerCriteriaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WinnerCriteriaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WinnerCriteriaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WinnerCriteriaEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WINNER_CRITERIA = "winner_criteria";
  @SerializedName(SERIALIZED_NAME_WINNER_CRITERIA)
  private WinnerCriteriaEnum winnerCriteria;

  public static final String SERIALIZED_NAME_WAIT_TIME = "wait_time";
  @SerializedName(SERIALIZED_NAME_WAIT_TIME)
  private Integer waitTime;

  public static final String SERIALIZED_NAME_TEST_SIZE = "test_size";
  @SerializedName(SERIALIZED_NAME_TEST_SIZE)
  private Integer testSize;

  public static final String SERIALIZED_NAME_SUBJECT_LINES = "subject_lines";
  @SerializedName(SERIALIZED_NAME_SUBJECT_LINES)
  private List<String> subjectLines = null;

  public static final String SERIALIZED_NAME_SEND_TIMES = "send_times";
  @SerializedName(SERIALIZED_NAME_SEND_TIMES)
  private List<OffsetDateTime> sendTimes = null;

  public static final String SERIALIZED_NAME_FROM_NAMES = "from_names";
  @SerializedName(SERIALIZED_NAME_FROM_NAMES)
  private List<String> fromNames = null;

  public static final String SERIALIZED_NAME_REPLY_TO_ADDRESSES = "reply_to_addresses";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_ADDRESSES)
  private List<String> replyToAddresses = null;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private List<String> contents = null;

  public static final String SERIALIZED_NAME_COMBINATIONS = "combinations";
  @SerializedName(SERIALIZED_NAME_COMBINATIONS)
  private List<CombinationsPropertyInner> combinations = null;

  public ABTestOptionsProperty1() {
  }

  
  public ABTestOptionsProperty1(
     String winningCombinationId, 
     String winningCampaignId, 
     List<String> contents, 
     List<CombinationsPropertyInner> combinations
  ) {
    this();
    this.winningCombinationId = winningCombinationId;
    this.winningCampaignId = winningCampaignId;
    this.contents = contents;
    this.combinations = combinations;
  }

   /**
   * ID for the winning combination.
   * @return winningCombinationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID for the winning combination.")

  public String getWinningCombinationId() {
    return winningCombinationId;
  }




   /**
   * ID of the campaign that was sent to the remaining recipients based on the winning combination.
   * @return winningCampaignId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the campaign that was sent to the remaining recipients based on the winning combination.")

  public String getWinningCampaignId() {
    return winningCampaignId;
  }




  public ABTestOptionsProperty1 winnerCriteria(WinnerCriteriaEnum winnerCriteria) {
    
    
    
    
    this.winnerCriteria = winnerCriteria;
    return this;
  }

   /**
   * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with &#39;manual&#39; as the winner_criteria, the winner must be chosen in the Mailchimp web application.
   * @return winnerCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.")

  public WinnerCriteriaEnum getWinnerCriteria() {
    return winnerCriteria;
  }


  public void setWinnerCriteria(WinnerCriteriaEnum winnerCriteria) {
    
    
    
    this.winnerCriteria = winnerCriteria;
  }


  public ABTestOptionsProperty1 waitTime(Integer waitTime) {
    
    
    
    
    this.waitTime = waitTime;
    return this;
  }

   /**
   * The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.
   * @return waitTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.")

  public Integer getWaitTime() {
    return waitTime;
  }


  public void setWaitTime(Integer waitTime) {
    
    
    
    this.waitTime = waitTime;
  }


  public ABTestOptionsProperty1 testSize(Integer testSize) {
    
    
    
    
    this.testSize = testSize;
    return this;
  }

   /**
   * The percentage of recipients to send the test combinations to, must be a value between 10 and 100.
   * @return testSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of recipients to send the test combinations to, must be a value between 10 and 100.")

  public Integer getTestSize() {
    return testSize;
  }


  public void setTestSize(Integer testSize) {
    
    
    
    this.testSize = testSize;
  }


  public ABTestOptionsProperty1 subjectLines(List<String> subjectLines) {
    
    
    
    
    this.subjectLines = subjectLines;
    return this;
  }

  public ABTestOptionsProperty1 addSubjectLinesItem(String subjectLinesItem) {
    if (this.subjectLines == null) {
      this.subjectLines = new ArrayList<>();
    }
    this.subjectLines.add(subjectLinesItem);
    return this;
  }

   /**
   * The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.
   * @return subjectLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.")

  public List<String> getSubjectLines() {
    return subjectLines;
  }


  public void setSubjectLines(List<String> subjectLines) {
    
    
    
    this.subjectLines = subjectLines;
  }


  public ABTestOptionsProperty1 sendTimes(List<OffsetDateTime> sendTimes) {
    
    
    
    
    this.sendTimes = sendTimes;
    return this;
  }

  public ABTestOptionsProperty1 addSendTimesItem(OffsetDateTime sendTimesItem) {
    if (this.sendTimes == null) {
      this.sendTimes = new ArrayList<>();
    }
    this.sendTimes.add(sendTimesItem);
    return this;
  }

   /**
   * The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.
   * @return sendTimes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.")

  public List<OffsetDateTime> getSendTimes() {
    return sendTimes;
  }


  public void setSendTimes(List<OffsetDateTime> sendTimes) {
    
    
    
    this.sendTimes = sendTimes;
  }


  public ABTestOptionsProperty1 fromNames(List<String> fromNames) {
    
    
    
    
    this.fromNames = fromNames;
    return this;
  }

  public ABTestOptionsProperty1 addFromNamesItem(String fromNamesItem) {
    if (this.fromNames == null) {
      this.fromNames = new ArrayList<>();
    }
    this.fromNames.add(fromNamesItem);
    return this;
  }

   /**
   * The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.
   * @return fromNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.")

  public List<String> getFromNames() {
    return fromNames;
  }


  public void setFromNames(List<String> fromNames) {
    
    
    
    this.fromNames = fromNames;
  }


  public ABTestOptionsProperty1 replyToAddresses(List<String> replyToAddresses) {
    
    
    
    
    this.replyToAddresses = replyToAddresses;
    return this;
  }

  public ABTestOptionsProperty1 addReplyToAddressesItem(String replyToAddressesItem) {
    if (this.replyToAddresses == null) {
      this.replyToAddresses = new ArrayList<>();
    }
    this.replyToAddresses.add(replyToAddressesItem);
    return this;
  }

   /**
   * The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.
   * @return replyToAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.")

  public List<String> getReplyToAddresses() {
    return replyToAddresses;
  }


  public void setReplyToAddresses(List<String> replyToAddresses) {
    
    
    
    this.replyToAddresses = replyToAddresses;
  }


   /**
   * Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field &#39;variate_contents&#39;.
   * @return contents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'.")

  public List<String> getContents() {
    return contents;
  }




   /**
   * Combinations of possible variables used to build emails.
   * @return combinations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combinations of possible variables used to build emails.")

  public List<CombinationsPropertyInner> getCombinations() {
    return combinations;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ABTestOptionsProperty1 instance itself
   */
  public ABTestOptionsProperty1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ABTestOptionsProperty1 aBTestOptionsProperty1 = (ABTestOptionsProperty1) o;
    return Objects.equals(this.winningCombinationId, aBTestOptionsProperty1.winningCombinationId) &&
        Objects.equals(this.winningCampaignId, aBTestOptionsProperty1.winningCampaignId) &&
        Objects.equals(this.winnerCriteria, aBTestOptionsProperty1.winnerCriteria) &&
        Objects.equals(this.waitTime, aBTestOptionsProperty1.waitTime) &&
        Objects.equals(this.testSize, aBTestOptionsProperty1.testSize) &&
        Objects.equals(this.subjectLines, aBTestOptionsProperty1.subjectLines) &&
        Objects.equals(this.sendTimes, aBTestOptionsProperty1.sendTimes) &&
        Objects.equals(this.fromNames, aBTestOptionsProperty1.fromNames) &&
        Objects.equals(this.replyToAddresses, aBTestOptionsProperty1.replyToAddresses) &&
        Objects.equals(this.contents, aBTestOptionsProperty1.contents) &&
        Objects.equals(this.combinations, aBTestOptionsProperty1.combinations)&&
        Objects.equals(this.additionalProperties, aBTestOptionsProperty1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(winningCombinationId, winningCampaignId, winnerCriteria, waitTime, testSize, subjectLines, sendTimes, fromNames, replyToAddresses, contents, combinations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ABTestOptionsProperty1 {\n");
    sb.append("    winningCombinationId: ").append(toIndentedString(winningCombinationId)).append("\n");
    sb.append("    winningCampaignId: ").append(toIndentedString(winningCampaignId)).append("\n");
    sb.append("    winnerCriteria: ").append(toIndentedString(winnerCriteria)).append("\n");
    sb.append("    waitTime: ").append(toIndentedString(waitTime)).append("\n");
    sb.append("    testSize: ").append(toIndentedString(testSize)).append("\n");
    sb.append("    subjectLines: ").append(toIndentedString(subjectLines)).append("\n");
    sb.append("    sendTimes: ").append(toIndentedString(sendTimes)).append("\n");
    sb.append("    fromNames: ").append(toIndentedString(fromNames)).append("\n");
    sb.append("    replyToAddresses: ").append(toIndentedString(replyToAddresses)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    combinations: ").append(toIndentedString(combinations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("winning_combination_id");
    openapiFields.add("winning_campaign_id");
    openapiFields.add("winner_criteria");
    openapiFields.add("wait_time");
    openapiFields.add("test_size");
    openapiFields.add("subject_lines");
    openapiFields.add("send_times");
    openapiFields.add("from_names");
    openapiFields.add("reply_to_addresses");
    openapiFields.add("contents");
    openapiFields.add("combinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ABTestOptionsProperty1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ABTestOptionsProperty1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ABTestOptionsProperty1 is not found in the empty JSON string", ABTestOptionsProperty1.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("winning_combination_id") != null && !jsonObj.get("winning_combination_id").isJsonNull()) && !jsonObj.get("winning_combination_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `winning_combination_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("winning_combination_id").toString()));
      }
      if ((jsonObj.get("winning_campaign_id") != null && !jsonObj.get("winning_campaign_id").isJsonNull()) && !jsonObj.get("winning_campaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `winning_campaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("winning_campaign_id").toString()));
      }
      if ((jsonObj.get("winner_criteria") != null && !jsonObj.get("winner_criteria").isJsonNull()) && !jsonObj.get("winner_criteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `winner_criteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("winner_criteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subject_lines") != null && !jsonObj.get("subject_lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_lines` to be an array in the JSON string but got `%s`", jsonObj.get("subject_lines").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("send_times") != null && !jsonObj.get("send_times").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `send_times` to be an array in the JSON string but got `%s`", jsonObj.get("send_times").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("from_names") != null && !jsonObj.get("from_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_names` to be an array in the JSON string but got `%s`", jsonObj.get("from_names").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reply_to_addresses") != null && !jsonObj.get("reply_to_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply_to_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("reply_to_addresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents` to be an array in the JSON string but got `%s`", jsonObj.get("contents").toString()));
      }
      if (jsonObj.get("combinations") != null && !jsonObj.get("combinations").isJsonNull()) {
        JsonArray jsonArraycombinations = jsonObj.getAsJsonArray("combinations");
        if (jsonArraycombinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("combinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `combinations` to be an array in the JSON string but got `%s`", jsonObj.get("combinations").toString()));
          }

          // validate the optional field `combinations` (array)
          for (int i = 0; i < jsonArraycombinations.size(); i++) {
            CombinationsPropertyInner.validateJsonObject(jsonArraycombinations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ABTestOptionsProperty1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ABTestOptionsProperty1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ABTestOptionsProperty1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ABTestOptionsProperty1.class));

       return (TypeAdapter<T>) new TypeAdapter<ABTestOptionsProperty1>() {
           @Override
           public void write(JsonWriter out, ABTestOptionsProperty1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ABTestOptionsProperty1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ABTestOptionsProperty1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ABTestOptionsProperty1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ABTestOptionsProperty1
  * @throws IOException if the JSON string is invalid with respect to ABTestOptionsProperty1
  */
  public static ABTestOptionsProperty1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ABTestOptionsProperty1.class);
  }

 /**
  * Convert an instance of ABTestOptionsProperty1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

