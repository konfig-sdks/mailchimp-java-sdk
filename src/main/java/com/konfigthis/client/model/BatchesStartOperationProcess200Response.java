/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourceLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The status of a batch request
 */
@ApiModel(description = "The status of a batch request")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BatchesStartOperationProcess200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("pending"),
    
    PREPROCESSING("preprocessing"),
    
    STARTED("started"),
    
    FINALIZING("finalizing"),
    
    FINISHED("finished");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL_OPERATIONS = "total_operations";
  @SerializedName(SERIALIZED_NAME_TOTAL_OPERATIONS)
  private Integer totalOperations;

  public static final String SERIALIZED_NAME_FINISHED_OPERATIONS = "finished_operations";
  @SerializedName(SERIALIZED_NAME_FINISHED_OPERATIONS)
  private Integer finishedOperations;

  public static final String SERIALIZED_NAME_ERRORED_OPERATIONS = "errored_operations";
  @SerializedName(SERIALIZED_NAME_ERRORED_OPERATIONS)
  private Integer erroredOperations;

  public static final String SERIALIZED_NAME_SUBMITTED_AT = "submitted_at";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AT)
  private OffsetDateTime submittedAt;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_RESPONSE_BODY_URL = "response_body_url";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY_URL)
  private String responseBodyUrl;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public BatchesStartOperationProcess200Response() {
  }

  
  public BatchesStartOperationProcess200Response(
     String id, 
     StatusEnum status, 
     Integer totalOperations, 
     Integer finishedOperations, 
     Integer erroredOperations, 
     OffsetDateTime submittedAt, 
     OffsetDateTime completedAt, 
     String responseBodyUrl, 
     List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.status = status;
    this.totalOperations = totalOperations;
    this.finishedOperations = finishedOperations;
    this.erroredOperations = erroredOperations;
    this.submittedAt = submittedAt;
    this.completedAt = completedAt;
    this.responseBodyUrl = responseBodyUrl;
    this.links = links;
  }

   /**
   * A string that uniquely identifies this batch request.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string that uniquely identifies this batch request.")

  public String getId() {
    return id;
  }




   /**
   * The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.")

  public StatusEnum getStatus() {
    return status;
  }




   /**
   * The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.
   * @return totalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.")

  public Integer getTotalOperations() {
    return totalOperations;
  }




   /**
   * The number of completed operations. This includes operations that returned an error.
   * @return finishedOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of completed operations. This includes operations that returned an error.")

  public Integer getFinishedOperations() {
    return finishedOperations;
  }




   /**
   * The number of completed operations that returned an error.
   * @return erroredOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of completed operations that returned an error.")

  public Integer getErroredOperations() {
    return erroredOperations;
  }




   /**
   * The date and time when the server received the batch request in ISO 8601 format.
   * @return submittedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time when the server received the batch request in ISO 8601 format.")

  public OffsetDateTime getSubmittedAt() {
    return submittedAt;
  }




   /**
   * The date and time when all operations in the batch request completed in ISO 8601 format.
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time when all operations in the batch request completed in ISO 8601 format.")

  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }




   /**
   * The URL of the gzipped archive of the results of all the operations.
   * @return responseBodyUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the gzipped archive of the results of all the operations.")

  public String getResponseBodyUrl() {
    return responseBodyUrl;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BatchesStartOperationProcess200Response instance itself
   */
  public BatchesStartOperationProcess200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchesStartOperationProcess200Response batchesStartOperationProcess200Response = (BatchesStartOperationProcess200Response) o;
    return Objects.equals(this.id, batchesStartOperationProcess200Response.id) &&
        Objects.equals(this.status, batchesStartOperationProcess200Response.status) &&
        Objects.equals(this.totalOperations, batchesStartOperationProcess200Response.totalOperations) &&
        Objects.equals(this.finishedOperations, batchesStartOperationProcess200Response.finishedOperations) &&
        Objects.equals(this.erroredOperations, batchesStartOperationProcess200Response.erroredOperations) &&
        Objects.equals(this.submittedAt, batchesStartOperationProcess200Response.submittedAt) &&
        Objects.equals(this.completedAt, batchesStartOperationProcess200Response.completedAt) &&
        Objects.equals(this.responseBodyUrl, batchesStartOperationProcess200Response.responseBodyUrl) &&
        Objects.equals(this.links, batchesStartOperationProcess200Response.links)&&
        Objects.equals(this.additionalProperties, batchesStartOperationProcess200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, totalOperations, finishedOperations, erroredOperations, submittedAt, completedAt, responseBodyUrl, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchesStartOperationProcess200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalOperations: ").append(toIndentedString(totalOperations)).append("\n");
    sb.append("    finishedOperations: ").append(toIndentedString(finishedOperations)).append("\n");
    sb.append("    erroredOperations: ").append(toIndentedString(erroredOperations)).append("\n");
    sb.append("    submittedAt: ").append(toIndentedString(submittedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    responseBodyUrl: ").append(toIndentedString(responseBodyUrl)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("total_operations");
    openapiFields.add("finished_operations");
    openapiFields.add("errored_operations");
    openapiFields.add("submitted_at");
    openapiFields.add("completed_at");
    openapiFields.add("response_body_url");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BatchesStartOperationProcess200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BatchesStartOperationProcess200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchesStartOperationProcess200Response is not found in the empty JSON string", BatchesStartOperationProcess200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("response_body_url") != null && !jsonObj.get("response_body_url").isJsonNull()) && !jsonObj.get("response_body_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_body_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_body_url").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchesStartOperationProcess200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchesStartOperationProcess200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchesStartOperationProcess200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchesStartOperationProcess200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchesStartOperationProcess200Response>() {
           @Override
           public void write(JsonWriter out, BatchesStartOperationProcess200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchesStartOperationProcess200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BatchesStartOperationProcess200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BatchesStartOperationProcess200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BatchesStartOperationProcess200Response
  * @throws IOException if the JSON string is invalid with respect to BatchesStartOperationProcess200Response
  */
  public static BatchesStartOperationProcess200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchesStartOperationProcess200Response.class);
  }

 /**
  * Convert an instance of BatchesStartOperationProcess200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

