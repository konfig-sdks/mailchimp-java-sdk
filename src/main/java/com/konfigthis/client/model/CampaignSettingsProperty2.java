/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The settings for your campaign, including subject, from name, reply-to address, and more.
 */
@ApiModel(description = "The settings for your campaign, including subject, from name, reply-to address, and more.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CampaignSettingsProperty2 {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SUBJECT_LINE = "subject_line";
  @SerializedName(SERIALIZED_NAME_SUBJECT_LINE)
  private String subjectLine;

  public static final String SERIALIZED_NAME_PREVIEW_TEXT = "preview_text";
  @SerializedName(SERIALIZED_NAME_PREVIEW_TEXT)
  private String previewText;

  public static final String SERIALIZED_NAME_FROM_NAME = "from_name";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  public static final String SERIALIZED_NAME_REPLY_TO = "reply_to";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_USE_CONVERSATION = "use_conversation";
  @SerializedName(SERIALIZED_NAME_USE_CONVERSATION)
  private Boolean useConversation;

  public static final String SERIALIZED_NAME_TO_NAME = "to_name";
  @SerializedName(SERIALIZED_NAME_TO_NAME)
  private String toName;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folder_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_AUTHENTICATE = "authenticate";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATE)
  private Boolean authenticate;

  public static final String SERIALIZED_NAME_AUTO_FOOTER = "auto_footer";
  @SerializedName(SERIALIZED_NAME_AUTO_FOOTER)
  private Boolean autoFooter;

  public static final String SERIALIZED_NAME_INLINE_CSS = "inline_css";
  @SerializedName(SERIALIZED_NAME_INLINE_CSS)
  private Boolean inlineCss;

  public static final String SERIALIZED_NAME_AUTO_TWEET = "auto_tweet";
  @SerializedName(SERIALIZED_NAME_AUTO_TWEET)
  private Boolean autoTweet;

  public static final String SERIALIZED_NAME_AUTO_FB_POST = "auto_fb_post";
  @SerializedName(SERIALIZED_NAME_AUTO_FB_POST)
  private List<String> autoFbPost = null;

  public static final String SERIALIZED_NAME_FB_COMMENTS = "fb_comments";
  @SerializedName(SERIALIZED_NAME_FB_COMMENTS)
  private Boolean fbComments;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private Integer templateId;

  public CampaignSettingsProperty2() {
  }

  public CampaignSettingsProperty2 title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of the campaign.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The title of the campaign.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CampaignSettingsProperty2 subjectLine(String subjectLine) {
    
    
    
    
    this.subjectLine = subjectLine;
    return this;
  }

   /**
   * The subject line for the campaign.
   * @return subjectLine
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The subject line for the campaign.")

  public String getSubjectLine() {
    return subjectLine;
  }


  public void setSubjectLine(String subjectLine) {
    
    
    
    this.subjectLine = subjectLine;
  }


  public CampaignSettingsProperty2 previewText(String previewText) {
    
    
    
    
    this.previewText = previewText;
    return this;
  }

   /**
   * The preview text for the campaign.
   * @return previewText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The preview text for the campaign.")

  public String getPreviewText() {
    return previewText;
  }


  public void setPreviewText(String previewText) {
    
    
    
    this.previewText = previewText;
  }


  public CampaignSettingsProperty2 fromName(String fromName) {
    
    
    
    
    this.fromName = fromName;
    return this;
  }

   /**
   * The &#39;from&#39; name on the campaign (not an email address).
   * @return fromName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The 'from' name on the campaign (not an email address).")

  public String getFromName() {
    return fromName;
  }


  public void setFromName(String fromName) {
    
    
    
    this.fromName = fromName;
  }


  public CampaignSettingsProperty2 replyTo(String replyTo) {
    
    
    
    
    this.replyTo = replyTo;
    return this;
  }

   /**
   * The reply-to email address for the campaign.
   * @return replyTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reply-to email address for the campaign.")

  public String getReplyTo() {
    return replyTo;
  }


  public void setReplyTo(String replyTo) {
    
    
    
    this.replyTo = replyTo;
  }


  public CampaignSettingsProperty2 useConversation(Boolean useConversation) {
    
    
    
    
    this.useConversation = useConversation;
    return this;
  }

   /**
   * Use Mailchimp Conversation feature to manage out-of-office replies.
   * @return useConversation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use Mailchimp Conversation feature to manage out-of-office replies.")

  public Boolean getUseConversation() {
    return useConversation;
  }


  public void setUseConversation(Boolean useConversation) {
    
    
    
    this.useConversation = useConversation;
  }


  public CampaignSettingsProperty2 toName(String toName) {
    
    
    
    
    this.toName = toName;
    return this;
  }

   /**
   * The campaign&#39;s custom &#39;To&#39; name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).
   * @return toName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/).")

  public String getToName() {
    return toName;
  }


  public void setToName(String toName) {
    
    
    
    this.toName = toName;
  }


  public CampaignSettingsProperty2 folderId(String folderId) {
    
    
    
    
    this.folderId = folderId;
    return this;
  }

   /**
   * If the campaign is listed in a folder, the id for that folder.
   * @return folderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the campaign is listed in a folder, the id for that folder.")

  public String getFolderId() {
    return folderId;
  }


  public void setFolderId(String folderId) {
    
    
    
    this.folderId = folderId;
  }


  public CampaignSettingsProperty2 authenticate(Boolean authenticate) {
    
    
    
    
    this.authenticate = authenticate;
    return this;
  }

   /**
   * Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to &#x60;true&#x60;.
   * @return authenticate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.")

  public Boolean getAuthenticate() {
    return authenticate;
  }


  public void setAuthenticate(Boolean authenticate) {
    
    
    
    this.authenticate = authenticate;
  }


  public CampaignSettingsProperty2 autoFooter(Boolean autoFooter) {
    
    
    
    
    this.autoFooter = autoFooter;
    return this;
  }

   /**
   * Automatically append Mailchimp&#39;s [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.
   * @return autoFooter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.")

  public Boolean getAutoFooter() {
    return autoFooter;
  }


  public void setAutoFooter(Boolean autoFooter) {
    
    
    
    this.autoFooter = autoFooter;
  }


  public CampaignSettingsProperty2 inlineCss(Boolean inlineCss) {
    
    
    
    
    this.inlineCss = inlineCss;
    return this;
  }

   /**
   * Automatically inline the CSS included with the campaign content.
   * @return inlineCss
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Automatically inline the CSS included with the campaign content.")

  public Boolean getInlineCss() {
    return inlineCss;
  }


  public void setInlineCss(Boolean inlineCss) {
    
    
    
    this.inlineCss = inlineCss;
  }


  public CampaignSettingsProperty2 autoTweet(Boolean autoTweet) {
    
    
    
    
    this.autoTweet = autoTweet;
    return this;
  }

   /**
   * Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.
   * @return autoTweet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.")

  public Boolean getAutoTweet() {
    return autoTweet;
  }


  public void setAutoTweet(Boolean autoTweet) {
    
    
    
    this.autoTweet = autoTweet;
  }


  public CampaignSettingsProperty2 autoFbPost(List<String> autoFbPost) {
    
    
    
    
    this.autoFbPost = autoFbPost;
    return this;
  }

  public CampaignSettingsProperty2 addAutoFbPostItem(String autoFbPostItem) {
    if (this.autoFbPost == null) {
      this.autoFbPost = new ArrayList<>();
    }
    this.autoFbPost.add(autoFbPostItem);
    return this;
  }

   /**
   * An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.
   * @return autoFbPost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.")

  public List<String> getAutoFbPost() {
    return autoFbPost;
  }


  public void setAutoFbPost(List<String> autoFbPost) {
    
    
    
    this.autoFbPost = autoFbPost;
  }


  public CampaignSettingsProperty2 fbComments(Boolean fbComments) {
    
    
    
    
    this.fbComments = fbComments;
    return this;
  }

   /**
   * Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to &#x60;true&#x60;.
   * @return fbComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.")

  public Boolean getFbComments() {
    return fbComments;
  }


  public void setFbComments(Boolean fbComments) {
    
    
    
    this.fbComments = fbComments;
  }


  public CampaignSettingsProperty2 templateId(Integer templateId) {
    
    
    
    
    this.templateId = templateId;
    return this;
  }

   /**
   * The id of the template to use.
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the template to use.")

  public Integer getTemplateId() {
    return templateId;
  }


  public void setTemplateId(Integer templateId) {
    
    
    
    this.templateId = templateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CampaignSettingsProperty2 instance itself
   */
  public CampaignSettingsProperty2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignSettingsProperty2 campaignSettingsProperty2 = (CampaignSettingsProperty2) o;
    return Objects.equals(this.title, campaignSettingsProperty2.title) &&
        Objects.equals(this.subjectLine, campaignSettingsProperty2.subjectLine) &&
        Objects.equals(this.previewText, campaignSettingsProperty2.previewText) &&
        Objects.equals(this.fromName, campaignSettingsProperty2.fromName) &&
        Objects.equals(this.replyTo, campaignSettingsProperty2.replyTo) &&
        Objects.equals(this.useConversation, campaignSettingsProperty2.useConversation) &&
        Objects.equals(this.toName, campaignSettingsProperty2.toName) &&
        Objects.equals(this.folderId, campaignSettingsProperty2.folderId) &&
        Objects.equals(this.authenticate, campaignSettingsProperty2.authenticate) &&
        Objects.equals(this.autoFooter, campaignSettingsProperty2.autoFooter) &&
        Objects.equals(this.inlineCss, campaignSettingsProperty2.inlineCss) &&
        Objects.equals(this.autoTweet, campaignSettingsProperty2.autoTweet) &&
        Objects.equals(this.autoFbPost, campaignSettingsProperty2.autoFbPost) &&
        Objects.equals(this.fbComments, campaignSettingsProperty2.fbComments) &&
        Objects.equals(this.templateId, campaignSettingsProperty2.templateId)&&
        Objects.equals(this.additionalProperties, campaignSettingsProperty2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, subjectLine, previewText, fromName, replyTo, useConversation, toName, folderId, authenticate, autoFooter, inlineCss, autoTweet, autoFbPost, fbComments, templateId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignSettingsProperty2 {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subjectLine: ").append(toIndentedString(subjectLine)).append("\n");
    sb.append("    previewText: ").append(toIndentedString(previewText)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    useConversation: ").append(toIndentedString(useConversation)).append("\n");
    sb.append("    toName: ").append(toIndentedString(toName)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    authenticate: ").append(toIndentedString(authenticate)).append("\n");
    sb.append("    autoFooter: ").append(toIndentedString(autoFooter)).append("\n");
    sb.append("    inlineCss: ").append(toIndentedString(inlineCss)).append("\n");
    sb.append("    autoTweet: ").append(toIndentedString(autoTweet)).append("\n");
    sb.append("    autoFbPost: ").append(toIndentedString(autoFbPost)).append("\n");
    sb.append("    fbComments: ").append(toIndentedString(fbComments)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("subject_line");
    openapiFields.add("preview_text");
    openapiFields.add("from_name");
    openapiFields.add("reply_to");
    openapiFields.add("use_conversation");
    openapiFields.add("to_name");
    openapiFields.add("folder_id");
    openapiFields.add("authenticate");
    openapiFields.add("auto_footer");
    openapiFields.add("inline_css");
    openapiFields.add("auto_tweet");
    openapiFields.add("auto_fb_post");
    openapiFields.add("fb_comments");
    openapiFields.add("template_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subject_line");
    openapiRequiredFields.add("from_name");
    openapiRequiredFields.add("reply_to");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignSettingsProperty2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignSettingsProperty2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignSettingsProperty2 is not found in the empty JSON string", CampaignSettingsProperty2.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignSettingsProperty2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("subject_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_line").toString()));
      }
      if ((jsonObj.get("preview_text") != null && !jsonObj.get("preview_text").isJsonNull()) && !jsonObj.get("preview_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preview_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preview_text").toString()));
      }
      if (!jsonObj.get("from_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_name").toString()));
      }
      if (!jsonObj.get("reply_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reply_to").toString()));
      }
      if ((jsonObj.get("to_name") != null && !jsonObj.get("to_name").isJsonNull()) && !jsonObj.get("to_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_name").toString()));
      }
      if ((jsonObj.get("folder_id") != null && !jsonObj.get("folder_id").isJsonNull()) && !jsonObj.get("folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("auto_fb_post") != null && !jsonObj.get("auto_fb_post").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_fb_post` to be an array in the JSON string but got `%s`", jsonObj.get("auto_fb_post").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignSettingsProperty2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignSettingsProperty2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignSettingsProperty2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignSettingsProperty2.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignSettingsProperty2>() {
           @Override
           public void write(JsonWriter out, CampaignSettingsProperty2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignSettingsProperty2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CampaignSettingsProperty2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignSettingsProperty2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignSettingsProperty2
  * @throws IOException if the JSON string is invalid with respect to CampaignSettingsProperty2
  */
  public static CampaignSettingsProperty2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignSettingsProperty2.class);
  }

 /**
  * Convert an instance of CampaignSettingsProperty2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

