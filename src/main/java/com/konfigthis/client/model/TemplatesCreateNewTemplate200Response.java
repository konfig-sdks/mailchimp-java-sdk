/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourceLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about a specific template.
 */
@ApiModel(description = "Information about a specific template.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TemplatesCreateNewTemplate200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DRAG_AND_DROP = "drag_and_drop";
  @SerializedName(SERIALIZED_NAME_DRAG_AND_DROP)
  private Boolean dragAndDrop;

  public static final String SERIALIZED_NAME_RESPONSIVE = "responsive";
  @SerializedName(SERIALIZED_NAME_RESPONSIVE)
  private Boolean responsive;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_EDITED = "date_edited";
  @SerializedName(SERIALIZED_NAME_DATE_EDITED)
  private OffsetDateTime dateEdited;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_EDITED_BY = "edited_by";
  @SerializedName(SERIALIZED_NAME_EDITED_BY)
  private String editedBy;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folder_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_SHARE_URL = "share_url";
  @SerializedName(SERIALIZED_NAME_SHARE_URL)
  private String shareUrl;

  /**
   * How the template&#39;s content is put together.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
 public enum ContentTypeEnum {
    TEMPLATE("template"),
    
    MULTICHANNEL("multichannel"),
    
    HTML("html");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public TemplatesCreateNewTemplate200Response() {
  }

  
  public TemplatesCreateNewTemplate200Response(
     Integer id, 
     String type, 
     Boolean dragAndDrop, 
     Boolean responsive, 
     String category, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateEdited, 
     String createdBy, 
     String editedBy, 
     Boolean active, 
     String thumbnail, 
     String shareUrl, 
     ContentTypeEnum contentType, 
     List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.type = type;
    this.dragAndDrop = dragAndDrop;
    this.responsive = responsive;
    this.category = category;
    this.dateCreated = dateCreated;
    this.dateEdited = dateEdited;
    this.createdBy = createdBy;
    this.editedBy = editedBy;
    this.active = active;
    this.thumbnail = thumbnail;
    this.shareUrl = shareUrl;
    this.contentType = contentType;
    this.links = links;
  }

   /**
   * The individual id for the template.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The individual id for the template.")

  public Integer getId() {
    return id;
  }




   /**
   * The type of template (user, base, or gallery).
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of template (user, base, or gallery).")

  public String getType() {
    return type;
  }




  public TemplatesCreateNewTemplate200Response name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the template.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the template.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


   /**
   * Whether the template uses the drag and drop editor.
   * @return dragAndDrop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the template uses the drag and drop editor.")

  public Boolean getDragAndDrop() {
    return dragAndDrop;
  }




   /**
   * Whether the template contains media queries to make it responsive.
   * @return responsive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the template contains media queries to make it responsive.")

  public Boolean getResponsive() {
    return responsive;
  }




   /**
   * If available, the category the template is listed in.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If available, the category the template is listed in.")

  public String getCategory() {
    return category;
  }




   /**
   * The date and time the template was created in ISO 8601 format.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the template was created in ISO 8601 format.")

  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }




   /**
   * The date and time the template was edited in ISO 8601 format.
   * @return dateEdited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the template was edited in ISO 8601 format.")

  public OffsetDateTime getDateEdited() {
    return dateEdited;
  }




   /**
   * The login name for template&#39;s creator.
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The login name for template's creator.")

  public String getCreatedBy() {
    return createdBy;
  }




   /**
   * The login name who last edited the template.
   * @return editedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The login name who last edited the template.")

  public String getEditedBy() {
    return editedBy;
  }




   /**
   * User templates are not &#39;deleted,&#39; but rather marked as &#39;inactive.&#39; Returns whether the template is still active.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.")

  public Boolean getActive() {
    return active;
  }




  public TemplatesCreateNewTemplate200Response folderId(String folderId) {
    
    
    
    
    this.folderId = folderId;
    return this;
  }

   /**
   * The id of the folder the template is currently in.
   * @return folderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the folder the template is currently in.")

  public String getFolderId() {
    return folderId;
  }


  public void setFolderId(String folderId) {
    
    
    
    this.folderId = folderId;
  }


   /**
   * If available, the URL for a thumbnail of the template.
   * @return thumbnail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If available, the URL for a thumbnail of the template.")

  public String getThumbnail() {
    return thumbnail;
  }




   /**
   * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
   * @return shareUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).")

  public String getShareUrl() {
    return shareUrl;
  }




   /**
   * How the template&#39;s content is put together.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How the template's content is put together.")

  public ContentTypeEnum getContentType() {
    return contentType;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TemplatesCreateNewTemplate200Response instance itself
   */
  public TemplatesCreateNewTemplate200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatesCreateNewTemplate200Response templatesCreateNewTemplate200Response = (TemplatesCreateNewTemplate200Response) o;
    return Objects.equals(this.id, templatesCreateNewTemplate200Response.id) &&
        Objects.equals(this.type, templatesCreateNewTemplate200Response.type) &&
        Objects.equals(this.name, templatesCreateNewTemplate200Response.name) &&
        Objects.equals(this.dragAndDrop, templatesCreateNewTemplate200Response.dragAndDrop) &&
        Objects.equals(this.responsive, templatesCreateNewTemplate200Response.responsive) &&
        Objects.equals(this.category, templatesCreateNewTemplate200Response.category) &&
        Objects.equals(this.dateCreated, templatesCreateNewTemplate200Response.dateCreated) &&
        Objects.equals(this.dateEdited, templatesCreateNewTemplate200Response.dateEdited) &&
        Objects.equals(this.createdBy, templatesCreateNewTemplate200Response.createdBy) &&
        Objects.equals(this.editedBy, templatesCreateNewTemplate200Response.editedBy) &&
        Objects.equals(this.active, templatesCreateNewTemplate200Response.active) &&
        Objects.equals(this.folderId, templatesCreateNewTemplate200Response.folderId) &&
        Objects.equals(this.thumbnail, templatesCreateNewTemplate200Response.thumbnail) &&
        Objects.equals(this.shareUrl, templatesCreateNewTemplate200Response.shareUrl) &&
        Objects.equals(this.contentType, templatesCreateNewTemplate200Response.contentType) &&
        Objects.equals(this.links, templatesCreateNewTemplate200Response.links)&&
        Objects.equals(this.additionalProperties, templatesCreateNewTemplate200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, dragAndDrop, responsive, category, dateCreated, dateEdited, createdBy, editedBy, active, folderId, thumbnail, shareUrl, contentType, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatesCreateNewTemplate200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dragAndDrop: ").append(toIndentedString(dragAndDrop)).append("\n");
    sb.append("    responsive: ").append(toIndentedString(responsive)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateEdited: ").append(toIndentedString(dateEdited)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    editedBy: ").append(toIndentedString(editedBy)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    shareUrl: ").append(toIndentedString(shareUrl)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("drag_and_drop");
    openapiFields.add("responsive");
    openapiFields.add("category");
    openapiFields.add("date_created");
    openapiFields.add("date_edited");
    openapiFields.add("created_by");
    openapiFields.add("edited_by");
    openapiFields.add("active");
    openapiFields.add("folder_id");
    openapiFields.add("thumbnail");
    openapiFields.add("share_url");
    openapiFields.add("content_type");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TemplatesCreateNewTemplate200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TemplatesCreateNewTemplate200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplatesCreateNewTemplate200Response is not found in the empty JSON string", TemplatesCreateNewTemplate200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("edited_by") != null && !jsonObj.get("edited_by").isJsonNull()) && !jsonObj.get("edited_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edited_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edited_by").toString()));
      }
      if ((jsonObj.get("folder_id") != null && !jsonObj.get("folder_id").isJsonNull()) && !jsonObj.get("folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_id").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      if ((jsonObj.get("share_url") != null && !jsonObj.get("share_url").isJsonNull()) && !jsonObj.get("share_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_url").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplatesCreateNewTemplate200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplatesCreateNewTemplate200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplatesCreateNewTemplate200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplatesCreateNewTemplate200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplatesCreateNewTemplate200Response>() {
           @Override
           public void write(JsonWriter out, TemplatesCreateNewTemplate200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplatesCreateNewTemplate200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TemplatesCreateNewTemplate200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplatesCreateNewTemplate200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplatesCreateNewTemplate200Response
  * @throws IOException if the JSON string is invalid with respect to TemplatesCreateNewTemplate200Response
  */
  public static TemplatesCreateNewTemplate200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplatesCreateNewTemplate200Response.class);
  }

 /**
  * Convert an instance of TemplatesCreateNewTemplate200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

