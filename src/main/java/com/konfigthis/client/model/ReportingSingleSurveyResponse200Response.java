/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContactProperty;
import com.konfigthis.client.model.Response;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A single survey response.
 */
@ApiModel(description = "A single survey response.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportingSingleSurveyResponse200Response {
  public static final String SERIALIZED_NAME_RESPONSE_ID = "response_id";
  @SerializedName(SERIALIZED_NAME_RESPONSE_ID)
  private String responseId;

  public static final String SERIALIZED_NAME_SUBMITTED_AT = "submitted_at";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AT)
  private OffsetDateTime submittedAt;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private ContactProperty contact;

  public static final String SERIALIZED_NAME_IS_NEW_CONTACT = "is_new_contact";
  @SerializedName(SERIALIZED_NAME_IS_NEW_CONTACT)
  private Boolean isNewContact;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<Response> results = null;

  public ReportingSingleSurveyResponse200Response() {
  }

  
  public ReportingSingleSurveyResponse200Response(
     String responseId, 
     OffsetDateTime submittedAt
  ) {
    this();
    this.responseId = responseId;
    this.submittedAt = submittedAt;
  }

   /**
   * The ID for the survey response.
   * @return responseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID for the survey response.")

  public String getResponseId() {
    return responseId;
  }




   /**
   * The date and time when the survey response was submitted in ISO 8601 format.
   * @return submittedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time when the survey response was submitted in ISO 8601 format.")

  public OffsetDateTime getSubmittedAt() {
    return submittedAt;
  }




  public ReportingSingleSurveyResponse200Response contact(ContactProperty contact) {
    
    
    
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactProperty getContact() {
    return contact;
  }


  public void setContact(ContactProperty contact) {
    
    
    
    this.contact = contact;
  }


  public ReportingSingleSurveyResponse200Response isNewContact(Boolean isNewContact) {
    
    
    
    
    this.isNewContact = isNewContact;
    return this;
  }

   /**
   * If this contact was added to the Mailchimp audience via this survey.
   * @return isNewContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this contact was added to the Mailchimp audience via this survey.")

  public Boolean getIsNewContact() {
    return isNewContact;
  }


  public void setIsNewContact(Boolean isNewContact) {
    
    
    
    this.isNewContact = isNewContact;
  }


  public ReportingSingleSurveyResponse200Response results(List<Response> results) {
    
    
    
    
    this.results = results;
    return this;
  }

  public ReportingSingleSurveyResponse200Response addResultsItem(Response resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * The survey questions and the answers to those questions.
   * @return results
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The survey questions and the answers to those questions.")

  public List<Response> getResults() {
    return results;
  }


  public void setResults(List<Response> results) {
    
    
    
    this.results = results;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportingSingleSurveyResponse200Response instance itself
   */
  public ReportingSingleSurveyResponse200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportingSingleSurveyResponse200Response reportingSingleSurveyResponse200Response = (ReportingSingleSurveyResponse200Response) o;
    return Objects.equals(this.responseId, reportingSingleSurveyResponse200Response.responseId) &&
        Objects.equals(this.submittedAt, reportingSingleSurveyResponse200Response.submittedAt) &&
        Objects.equals(this.contact, reportingSingleSurveyResponse200Response.contact) &&
        Objects.equals(this.isNewContact, reportingSingleSurveyResponse200Response.isNewContact) &&
        Objects.equals(this.results, reportingSingleSurveyResponse200Response.results)&&
        Objects.equals(this.additionalProperties, reportingSingleSurveyResponse200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseId, submittedAt, contact, isNewContact, results, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportingSingleSurveyResponse200Response {\n");
    sb.append("    responseId: ").append(toIndentedString(responseId)).append("\n");
    sb.append("    submittedAt: ").append(toIndentedString(submittedAt)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    isNewContact: ").append(toIndentedString(isNewContact)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("response_id");
    openapiFields.add("submitted_at");
    openapiFields.add("contact");
    openapiFields.add("is_new_contact");
    openapiFields.add("results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportingSingleSurveyResponse200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportingSingleSurveyResponse200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportingSingleSurveyResponse200Response is not found in the empty JSON string", ReportingSingleSurveyResponse200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("response_id") != null && !jsonObj.get("response_id").isJsonNull()) && !jsonObj.get("response_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_id").toString()));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        ContactProperty.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            Response.validateJsonObject(jsonArrayresults.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportingSingleSurveyResponse200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportingSingleSurveyResponse200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportingSingleSurveyResponse200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportingSingleSurveyResponse200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportingSingleSurveyResponse200Response>() {
           @Override
           public void write(JsonWriter out, ReportingSingleSurveyResponse200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportingSingleSurveyResponse200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportingSingleSurveyResponse200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportingSingleSurveyResponse200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportingSingleSurveyResponse200Response
  * @throws IOException if the JSON string is invalid with respect to ReportingSingleSurveyResponse200Response
  */
  public static ReportingSingleSurveyResponse200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportingSingleSurveyResponse200Response.class);
  }

 /**
  * Convert an instance of ReportingSingleSurveyResponse200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

