/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourceLink;
import com.konfigthis.client.model.TrackingSettingsProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A summary of an individual landing page&#39;s settings and content.
 */
@ApiModel(description = "A summary of an individual landing page's settings and content.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LandingPage1 {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private Integer templateId;

  /**
   * The status of this landing page.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PUBLISHED("published"),
    
    UNPUBLISHED("unpublished"),
    
    DRAFT("draft");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_WEB_ID = "web_id";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private Integer webId;

  public static final String SERIALIZED_NAME_CREATED_BY_SOURCE = "created_by_source";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_SOURCE)
  private String createdBySource;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_UNPUBLISHED_AT = "unpublished_at";
  @SerializedName(SERIALIZED_NAME_UNPUBLISHED_AT)
  private OffsetDateTime unpublishedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_TRACKING = "tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private TrackingSettingsProperty tracking;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public LandingPage1() {
  }

  
  public LandingPage1(
     String id, 
     Integer templateId, 
     StatusEnum status, 
     String createdBySource, 
     String url, 
     OffsetDateTime createdAt, 
     OffsetDateTime publishedAt, 
     OffsetDateTime unpublishedAt, 
     OffsetDateTime updatedAt, 
     List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.templateId = templateId;
    this.status = status;
    this.createdBySource = createdBySource;
    this.url = url;
    this.createdAt = createdAt;
    this.publishedAt = publishedAt;
    this.unpublishedAt = unpublishedAt;
    this.updatedAt = updatedAt;
    this.links = links;
  }

  public LandingPage1 title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of this landing page seen in the browser&#39;s title bar.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The title of this landing page seen in the browser's title bar.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public LandingPage1 description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of this landing page.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of this landing page.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


   /**
   * A string that uniquely identifies this landing page.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "030092c2e1f0", value = "A string that uniquely identifies this landing page.")

  public String getId() {
    return id;
  }




  public LandingPage1 name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of this landing page.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of this landing page.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


   /**
   * The template_id of this landing page.
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The template_id of this landing page.")

  public Integer getTemplateId() {
    return templateId;
  }




   /**
   * The status of this landing page.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of this landing page.")

  public StatusEnum getStatus() {
    return status;
  }




  public LandingPage1 listId(String listId) {
    
    
    
    
    this.listId = listId;
    return this;
  }

   /**
   * The list&#39;s ID associated with this landing page.
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "fde02ad86b", value = "The list's ID associated with this landing page.")

  public String getListId() {
    return listId;
  }


  public void setListId(String listId) {
    
    
    
    this.listId = listId;
  }


  public LandingPage1 storeId(String storeId) {
    
    
    
    
    this.storeId = storeId;
    return this;
  }

   /**
   * The ID of the store associated with this landing page.
   * @return storeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the store associated with this landing page.")

  public String getStoreId() {
    return storeId;
  }


  public void setStoreId(String storeId) {
    
    
    
    this.storeId = storeId;
  }


  public LandingPage1 webId(Integer webId) {
    
    
    
    
    this.webId = webId;
    return this;
  }

   /**
   * The ID used in the Mailchimp web application.
   * @return webId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID used in the Mailchimp web application.")

  public Integer getWebId() {
    return webId;
  }


  public void setWebId(Integer webId) {
    
    
    
    this.webId = webId;
  }


   /**
   * Created by mobile or web
   * @return createdBySource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Created by mobile or web")

  public String getCreatedBySource() {
    return createdBySource;
  }




   /**
   * The url of the published landing page.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The url of the published landing page.")

  public String getUrl() {
    return url;
  }




   /**
   * The time this landing page was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this landing page was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * The time this landing page was published.
   * @return publishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this landing page was published.")

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }




   /**
   * The time this landing page was unpublished.
   * @return unpublishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this landing page was unpublished.")

  public OffsetDateTime getUnpublishedAt() {
    return unpublishedAt;
  }




   /**
   * The time this landing page was updated at.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this landing page was updated at.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  public LandingPage1 tracking(TrackingSettingsProperty tracking) {
    
    
    
    
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackingSettingsProperty getTracking() {
    return tracking;
  }


  public void setTracking(TrackingSettingsProperty tracking) {
    
    
    
    this.tracking = tracking;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LandingPage1 instance itself
   */
  public LandingPage1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandingPage1 landingPage1 = (LandingPage1) o;
    return Objects.equals(this.title, landingPage1.title) &&
        Objects.equals(this.description, landingPage1.description) &&
        Objects.equals(this.id, landingPage1.id) &&
        Objects.equals(this.name, landingPage1.name) &&
        Objects.equals(this.templateId, landingPage1.templateId) &&
        Objects.equals(this.status, landingPage1.status) &&
        Objects.equals(this.listId, landingPage1.listId) &&
        Objects.equals(this.storeId, landingPage1.storeId) &&
        Objects.equals(this.webId, landingPage1.webId) &&
        Objects.equals(this.createdBySource, landingPage1.createdBySource) &&
        Objects.equals(this.url, landingPage1.url) &&
        Objects.equals(this.createdAt, landingPage1.createdAt) &&
        Objects.equals(this.publishedAt, landingPage1.publishedAt) &&
        Objects.equals(this.unpublishedAt, landingPage1.unpublishedAt) &&
        Objects.equals(this.updatedAt, landingPage1.updatedAt) &&
        Objects.equals(this.tracking, landingPage1.tracking) &&
        Objects.equals(this.links, landingPage1.links)&&
        Objects.equals(this.additionalProperties, landingPage1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, id, name, templateId, status, listId, storeId, webId, createdBySource, url, createdAt, publishedAt, unpublishedAt, updatedAt, tracking, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandingPage1 {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    createdBySource: ").append(toIndentedString(createdBySource)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    unpublishedAt: ").append(toIndentedString(unpublishedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("template_id");
    openapiFields.add("status");
    openapiFields.add("list_id");
    openapiFields.add("store_id");
    openapiFields.add("web_id");
    openapiFields.add("created_by_source");
    openapiFields.add("url");
    openapiFields.add("created_at");
    openapiFields.add("published_at");
    openapiFields.add("unpublished_at");
    openapiFields.add("updated_at");
    openapiFields.add("tracking");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LandingPage1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LandingPage1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandingPage1 is not found in the empty JSON string", LandingPage1.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("list_id") != null && !jsonObj.get("list_id").isJsonNull()) && !jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if ((jsonObj.get("created_by_source") != null && !jsonObj.get("created_by_source").isJsonNull()) && !jsonObj.get("created_by_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by_source").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `tracking`
      if (jsonObj.get("tracking") != null && !jsonObj.get("tracking").isJsonNull()) {
        TrackingSettingsProperty.validateJsonObject(jsonObj.getAsJsonObject("tracking"));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandingPage1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandingPage1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandingPage1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandingPage1.class));

       return (TypeAdapter<T>) new TypeAdapter<LandingPage1>() {
           @Override
           public void write(JsonWriter out, LandingPage1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LandingPage1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LandingPage1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LandingPage1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LandingPage1
  * @throws IOException if the JSON string is invalid with respect to LandingPage1
  */
  public static LandingPage1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandingPage1.class);
  }

 /**
  * Convert an instance of LandingPage1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

