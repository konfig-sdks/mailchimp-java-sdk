/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LocationProperty2;
import com.konfigthis.client.model.MarketingPermission1;
import com.konfigthis.client.model.NotesProperty;
import com.konfigthis.client.model.ResourceLink;
import com.konfigthis.client.model.SubscriberStatsProperty4;
import com.konfigthis.client.model.TagsPropertyInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed.
 */
@ApiModel(description = "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ListsAddMemberToList200Response {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagsPropertyInner> tags = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_UNIQUE_EMAIL_ID = "unique_email_id";
  @SerializedName(SERIALIZED_NAME_UNIQUE_EMAIL_ID)
  private String uniqueEmailId;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contact_id";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_WEB_ID = "web_id";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private Integer webId;

  public static final String SERIALIZED_NAME_EMAIL_TYPE = "email_type";
  @SerializedName(SERIALIZED_NAME_EMAIL_TYPE)
  private String emailType;

  /**
   * Subscriber&#39;s current status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    SUBSCRIBED("subscribed"),
    
    UNSUBSCRIBED("unsubscribed"),
    
    CLEANED("cleaned"),
    
    PENDING("pending"),
    
    TRANSACTIONAL("transactional"),
    
    ARCHIVED("archived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_REASON = "unsubscribe_reason";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_REASON)
  private String unsubscribeReason;

  public static final String SERIALIZED_NAME_CONSENTS_TO_ONE_TO_ONE_MESSAGING = "consents_to_one_to_one_messaging";
  @SerializedName(SERIALIZED_NAME_CONSENTS_TO_ONE_TO_ONE_MESSAGING)
  private Boolean consentsToOneToOneMessaging;

  public static final String SERIALIZED_NAME_SMS_PHONE_NUMBER = "sms_phone_number";
  @SerializedName(SERIALIZED_NAME_SMS_PHONE_NUMBER)
  private String smsPhoneNumber;

  /**
   * The status of an SMS subscription.
   */
  @JsonAdapter(SmsSubscriptionStatusEnum.Adapter.class)
 public enum SmsSubscriptionStatusEnum {
    SUBSCRIBED("subscribed"),
    
    UNSUBSCRIBED("unsubscribed"),
    
    NONSUBSCRIBED("nonsubscribed"),
    
    PENDING("pending");

    private String value;

    SmsSubscriptionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmsSubscriptionStatusEnum fromValue(String value) {
      for (SmsSubscriptionStatusEnum b : SmsSubscriptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmsSubscriptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmsSubscriptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmsSubscriptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SmsSubscriptionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SMS_SUBSCRIPTION_STATUS = "sms_subscription_status";
  @SerializedName(SERIALIZED_NAME_SMS_SUBSCRIPTION_STATUS)
  private SmsSubscriptionStatusEnum smsSubscriptionStatus;

  public static final String SERIALIZED_NAME_SMS_SUBSCRIPTION_LAST_UPDATED = "sms_subscription_last_updated";
  @SerializedName(SERIALIZED_NAME_SMS_SUBSCRIPTION_LAST_UPDATED)
  private String smsSubscriptionLastUpdated;

  public static final String SERIALIZED_NAME_MERGE_FIELDS = "merge_fields";
  @SerializedName(SERIALIZED_NAME_MERGE_FIELDS)
  private Map<String, Object> mergeFields = null;

  public static final String SERIALIZED_NAME_INTERESTS = "interests";
  @SerializedName(SERIALIZED_NAME_INTERESTS)
  private Map<String, Boolean> interests = null;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private SubscriberStatsProperty4 stats;

  public static final String SERIALIZED_NAME_IP_SIGNUP = "ip_signup";
  @SerializedName(SERIALIZED_NAME_IP_SIGNUP)
  private String ipSignup;

  public static final String SERIALIZED_NAME_TIMESTAMP_SIGNUP = "timestamp_signup";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_SIGNUP)
  private OffsetDateTime timestampSignup;

  public static final String SERIALIZED_NAME_IP_OPT = "ip_opt";
  @SerializedName(SERIALIZED_NAME_IP_OPT)
  private String ipOpt;

  public static final String SERIALIZED_NAME_TIMESTAMP_OPT = "timestamp_opt";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_OPT)
  private OffsetDateTime timestampOpt;

  public static final String SERIALIZED_NAME_MEMBER_RATING = "member_rating";
  @SerializedName(SERIALIZED_NAME_MEMBER_RATING)
  private Integer memberRating;

  public static final String SERIALIZED_NAME_LAST_CHANGED = "last_changed";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGED)
  private OffsetDateTime lastChanged;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_VIP = "vip";
  @SerializedName(SERIALIZED_NAME_VIP)
  private Boolean vip;

  public static final String SERIALIZED_NAME_EMAIL_CLIENT = "email_client";
  @SerializedName(SERIALIZED_NAME_EMAIL_CLIENT)
  private String emailClient;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationProperty2 location;

  public static final String SERIALIZED_NAME_MARKETING_PERMISSIONS = "marketing_permissions";
  @SerializedName(SERIALIZED_NAME_MARKETING_PERMISSIONS)
  private List<MarketingPermission1> marketingPermissions = null;

  public static final String SERIALIZED_NAME_LAST_NOTE = "last_note";
  @SerializedName(SERIALIZED_NAME_LAST_NOTE)
  private NotesProperty lastNote;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TAGS_COUNT = "tags_count";
  @SerializedName(SERIALIZED_NAME_TAGS_COUNT)
  private Integer tagsCount;

  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public ListsAddMemberToList200Response() {
  }

  
  public ListsAddMemberToList200Response(
     String id, 
     String uniqueEmailId, 
     String contactId, 
     String fullName, 
     Integer webId, 
     Boolean consentsToOneToOneMessaging, 
     String ipSignup, 
     OffsetDateTime timestampSignup, 
     String ipOpt, 
     OffsetDateTime timestampOpt, 
     Integer memberRating, 
     OffsetDateTime lastChanged, 
     String emailClient, 
     String source, 
     Integer tagsCount, 
     String listId, 
     List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.uniqueEmailId = uniqueEmailId;
    this.contactId = contactId;
    this.fullName = fullName;
    this.webId = webId;
    this.consentsToOneToOneMessaging = consentsToOneToOneMessaging;
    this.ipSignup = ipSignup;
    this.timestampSignup = timestampSignup;
    this.ipOpt = ipOpt;
    this.timestampOpt = timestampOpt;
    this.memberRating = memberRating;
    this.lastChanged = lastChanged;
    this.emailClient = emailClient;
    this.source = source;
    this.tagsCount = tagsCount;
    this.listId = listId;
    this.links = links;
  }

  public ListsAddMemberToList200Response tags(List<TagsPropertyInner> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public ListsAddMemberToList200Response addTagsItem(TagsPropertyInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/).")

  public List<TagsPropertyInner> getTags() {
    return tags;
  }


  public void setTags(List<TagsPropertyInner> tags) {
    
    
    
    this.tags = tags;
  }


   /**
   * The MD5 hash of the lowercase version of the list member&#39;s email address.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The MD5 hash of the lowercase version of the list member's email address.")

  public String getId() {
    return id;
  }




  public ListsAddMemberToList200Response emailAddress(String emailAddress) {
    
    
    
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Email address for a subscriber.
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address for a subscriber.")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    
    
    
    this.emailAddress = emailAddress;
  }


   /**
   * An identifier for the address across all of Mailchimp.
   * @return uniqueEmailId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An identifier for the address across all of Mailchimp.")

  public String getUniqueEmailId() {
    return uniqueEmailId;
  }




   /**
   * As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the &#x60;id&#x60; is the MD5 hash of their email address, this &#x60;contact_id&#x60; is agnostic of contact’s inclusion of an email address.
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address.")

  public String getContactId() {
    return contactId;
  }




   /**
   * The contact&#39;s full name.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact's full name.")

  public String getFullName() {
    return fullName;
  }




   /**
   * The ID used in the Mailchimp web application. View this member in your Mailchimp account at &#x60;https://{dc}.admin.mailchimp.com/lists/members/view?id&#x3D;{web_id}&#x60;.
   * @return webId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`.")

  public Integer getWebId() {
    return webId;
  }




  public ListsAddMemberToList200Response emailType(String emailType) {
    
    
    
    
    this.emailType = emailType;
    return this;
  }

   /**
   * Type of email this member asked to get (&#39;html&#39; or &#39;text&#39;).
   * @return emailType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of email this member asked to get ('html' or 'text').")

  public String getEmailType() {
    return emailType;
  }


  public void setEmailType(String emailType) {
    
    
    
    this.emailType = emailType;
  }


  public ListsAddMemberToList200Response status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Subscriber&#39;s current status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscriber's current status.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ListsAddMemberToList200Response unsubscribeReason(String unsubscribeReason) {
    
    
    
    
    this.unsubscribeReason = unsubscribeReason;
    return this;
  }

   /**
   * A subscriber&#39;s reason for unsubscribing.
   * @return unsubscribeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A subscriber's reason for unsubscribing.")

  public String getUnsubscribeReason() {
    return unsubscribeReason;
  }


  public void setUnsubscribeReason(String unsubscribeReason) {
    
    
    
    this.unsubscribeReason = unsubscribeReason;
  }


   /**
   * Indicates whether a contact consents to 1:1 messaging.
   * @return consentsToOneToOneMessaging
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether a contact consents to 1:1 messaging.")

  public Boolean getConsentsToOneToOneMessaging() {
    return consentsToOneToOneMessaging;
  }




  public ListsAddMemberToList200Response smsPhoneNumber(String smsPhoneNumber) {
    
    
    
    
    this.smsPhoneNumber = smsPhoneNumber;
    return this;
  }

   /**
   * A US phone number for SMS contact.
   * @return smsPhoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A US phone number for SMS contact.")

  public String getSmsPhoneNumber() {
    return smsPhoneNumber;
  }


  public void setSmsPhoneNumber(String smsPhoneNumber) {
    
    
    
    this.smsPhoneNumber = smsPhoneNumber;
  }


  public ListsAddMemberToList200Response smsSubscriptionStatus(SmsSubscriptionStatusEnum smsSubscriptionStatus) {
    
    
    
    
    this.smsSubscriptionStatus = smsSubscriptionStatus;
    return this;
  }

   /**
   * The status of an SMS subscription.
   * @return smsSubscriptionStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of an SMS subscription.")

  public SmsSubscriptionStatusEnum getSmsSubscriptionStatus() {
    return smsSubscriptionStatus;
  }


  public void setSmsSubscriptionStatus(SmsSubscriptionStatusEnum smsSubscriptionStatus) {
    
    
    
    this.smsSubscriptionStatus = smsSubscriptionStatus;
  }


  public ListsAddMemberToList200Response smsSubscriptionLastUpdated(String smsSubscriptionLastUpdated) {
    
    
    
    
    this.smsSubscriptionLastUpdated = smsSubscriptionLastUpdated;
    return this;
  }

   /**
   * The datetime when the SMS subscription was last updated
   * @return smsSubscriptionLastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The datetime when the SMS subscription was last updated")

  public String getSmsSubscriptionLastUpdated() {
    return smsSubscriptionLastUpdated;
  }


  public void setSmsSubscriptionLastUpdated(String smsSubscriptionLastUpdated) {
    
    
    
    this.smsSubscriptionLastUpdated = smsSubscriptionLastUpdated;
  }


  public ListsAddMemberToList200Response mergeFields(Map<String, Object> mergeFields) {
    
    
    
    
    this.mergeFields = mergeFields;
    return this;
  }

  public ListsAddMemberToList200Response putMergeFieldsItem(String key, Object mergeFieldsItem) {
    if (this.mergeFields == null) {
      this.mergeFields = new HashMap<>();
    }
    this.mergeFields.put(key, mergeFieldsItem);
    return this;
  }

   /**
   * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
   * @return mergeFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.")

  public Map<String, Object> getMergeFields() {
    return mergeFields;
  }


  public void setMergeFields(Map<String, Object> mergeFields) {
    
    
    
    this.mergeFields = mergeFields;
  }


  public ListsAddMemberToList200Response interests(Map<String, Boolean> interests) {
    
    
    
    
    this.interests = interests;
    return this;
  }

  public ListsAddMemberToList200Response putInterestsItem(String key, Boolean interestsItem) {
    if (this.interests == null) {
      this.interests = new HashMap<>();
    }
    this.interests.put(key, interestsItem);
    return this;
  }

   /**
   * The key of this object&#39;s properties is the ID of the interest in question.
   * @return interests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of this object's properties is the ID of the interest in question.")

  public Map<String, Boolean> getInterests() {
    return interests;
  }


  public void setInterests(Map<String, Boolean> interests) {
    
    
    
    this.interests = interests;
  }


  public ListsAddMemberToList200Response stats(SubscriberStatsProperty4 stats) {
    
    
    
    
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SubscriberStatsProperty4 getStats() {
    return stats;
  }


  public void setStats(SubscriberStatsProperty4 stats) {
    
    
    
    this.stats = stats;
  }


   /**
   * IP address the subscriber signed up from.
   * @return ipSignup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP address the subscriber signed up from.")

  public String getIpSignup() {
    return ipSignup;
  }




   /**
   * The date and time the subscriber signed up for the list in ISO 8601 format.
   * @return timestampSignup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the subscriber signed up for the list in ISO 8601 format.")

  public OffsetDateTime getTimestampSignup() {
    return timestampSignup;
  }




   /**
   * The IP address the subscriber used to confirm their opt-in status.
   * @return ipOpt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IP address the subscriber used to confirm their opt-in status.")

  public String getIpOpt() {
    return ipOpt;
  }




   /**
   * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
   * @return timestampOpt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the subscriber confirmed their opt-in status in ISO 8601 format.")

  public OffsetDateTime getTimestampOpt() {
    return timestampOpt;
  }




   /**
   * Star rating for this member, between 1 and 5.
   * @return memberRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Star rating for this member, between 1 and 5.")

  public Integer getMemberRating() {
    return memberRating;
  }




   /**
   * The date and time the member&#39;s info was last changed in ISO 8601 format.
   * @return lastChanged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the member's info was last changed in ISO 8601 format.")

  public OffsetDateTime getLastChanged() {
    return lastChanged;
  }




  public ListsAddMemberToList200Response language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * If set/detected, the [subscriber&#39;s language](https://mailchimp.com/help/view-and-edit-contact-languages/).
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public ListsAddMemberToList200Response vip(Boolean vip) {
    
    
    
    
    this.vip = vip;
    return this;
  }

   /**
   * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
   * @return vip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.")

  public Boolean getVip() {
    return vip;
  }


  public void setVip(Boolean vip) {
    
    
    
    this.vip = vip;
  }


   /**
   * The list member&#39;s email client.
   * @return emailClient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list member's email client.")

  public String getEmailClient() {
    return emailClient;
  }




  public ListsAddMemberToList200Response location(LocationProperty2 location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocationProperty2 getLocation() {
    return location;
  }


  public void setLocation(LocationProperty2 location) {
    
    
    
    this.location = location;
  }


  public ListsAddMemberToList200Response marketingPermissions(List<MarketingPermission1> marketingPermissions) {
    
    
    
    
    this.marketingPermissions = marketingPermissions;
    return this;
  }

  public ListsAddMemberToList200Response addMarketingPermissionsItem(MarketingPermission1 marketingPermissionsItem) {
    if (this.marketingPermissions == null) {
      this.marketingPermissions = new ArrayList<>();
    }
    this.marketingPermissions.add(marketingPermissionsItem);
    return this;
  }

   /**
   * The marketing permissions for the subscriber.
   * @return marketingPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The marketing permissions for the subscriber.")

  public List<MarketingPermission1> getMarketingPermissions() {
    return marketingPermissions;
  }


  public void setMarketingPermissions(List<MarketingPermission1> marketingPermissions) {
    
    
    
    this.marketingPermissions = marketingPermissions;
  }


  public ListsAddMemberToList200Response lastNote(NotesProperty lastNote) {
    
    
    
    
    this.lastNote = lastNote;
    return this;
  }

   /**
   * Get lastNote
   * @return lastNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NotesProperty getLastNote() {
    return lastNote;
  }


  public void setLastNote(NotesProperty lastNote) {
    
    
    
    this.lastNote = lastNote;
  }


   /**
   * The source from which the subscriber was added to this list.
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The source from which the subscriber was added to this list.")

  public String getSource() {
    return source;
  }




   /**
   * The number of tags applied to this member.
   * @return tagsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of tags applied to this member.")

  public Integer getTagsCount() {
    return tagsCount;
  }




   /**
   * The list id.
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list id.")

  public String getListId() {
    return listId;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListsAddMemberToList200Response instance itself
   */
  public ListsAddMemberToList200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsAddMemberToList200Response listsAddMemberToList200Response = (ListsAddMemberToList200Response) o;
    return Objects.equals(this.tags, listsAddMemberToList200Response.tags) &&
        Objects.equals(this.id, listsAddMemberToList200Response.id) &&
        Objects.equals(this.emailAddress, listsAddMemberToList200Response.emailAddress) &&
        Objects.equals(this.uniqueEmailId, listsAddMemberToList200Response.uniqueEmailId) &&
        Objects.equals(this.contactId, listsAddMemberToList200Response.contactId) &&
        Objects.equals(this.fullName, listsAddMemberToList200Response.fullName) &&
        Objects.equals(this.webId, listsAddMemberToList200Response.webId) &&
        Objects.equals(this.emailType, listsAddMemberToList200Response.emailType) &&
        Objects.equals(this.status, listsAddMemberToList200Response.status) &&
        Objects.equals(this.unsubscribeReason, listsAddMemberToList200Response.unsubscribeReason) &&
        Objects.equals(this.consentsToOneToOneMessaging, listsAddMemberToList200Response.consentsToOneToOneMessaging) &&
        Objects.equals(this.smsPhoneNumber, listsAddMemberToList200Response.smsPhoneNumber) &&
        Objects.equals(this.smsSubscriptionStatus, listsAddMemberToList200Response.smsSubscriptionStatus) &&
        Objects.equals(this.smsSubscriptionLastUpdated, listsAddMemberToList200Response.smsSubscriptionLastUpdated) &&
        Objects.equals(this.mergeFields, listsAddMemberToList200Response.mergeFields) &&
        Objects.equals(this.interests, listsAddMemberToList200Response.interests) &&
        Objects.equals(this.stats, listsAddMemberToList200Response.stats) &&
        Objects.equals(this.ipSignup, listsAddMemberToList200Response.ipSignup) &&
        Objects.equals(this.timestampSignup, listsAddMemberToList200Response.timestampSignup) &&
        Objects.equals(this.ipOpt, listsAddMemberToList200Response.ipOpt) &&
        Objects.equals(this.timestampOpt, listsAddMemberToList200Response.timestampOpt) &&
        Objects.equals(this.memberRating, listsAddMemberToList200Response.memberRating) &&
        Objects.equals(this.lastChanged, listsAddMemberToList200Response.lastChanged) &&
        Objects.equals(this.language, listsAddMemberToList200Response.language) &&
        Objects.equals(this.vip, listsAddMemberToList200Response.vip) &&
        Objects.equals(this.emailClient, listsAddMemberToList200Response.emailClient) &&
        Objects.equals(this.location, listsAddMemberToList200Response.location) &&
        Objects.equals(this.marketingPermissions, listsAddMemberToList200Response.marketingPermissions) &&
        Objects.equals(this.lastNote, listsAddMemberToList200Response.lastNote) &&
        Objects.equals(this.source, listsAddMemberToList200Response.source) &&
        Objects.equals(this.tagsCount, listsAddMemberToList200Response.tagsCount) &&
        Objects.equals(this.listId, listsAddMemberToList200Response.listId) &&
        Objects.equals(this.links, listsAddMemberToList200Response.links)&&
        Objects.equals(this.additionalProperties, listsAddMemberToList200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, id, emailAddress, uniqueEmailId, contactId, fullName, webId, emailType, status, unsubscribeReason, consentsToOneToOneMessaging, smsPhoneNumber, smsSubscriptionStatus, smsSubscriptionLastUpdated, mergeFields, interests, stats, ipSignup, timestampSignup, ipOpt, timestampOpt, memberRating, lastChanged, language, vip, emailClient, location, marketingPermissions, lastNote, source, tagsCount, listId, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsAddMemberToList200Response {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    uniqueEmailId: ").append(toIndentedString(uniqueEmailId)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    emailType: ").append(toIndentedString(emailType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    unsubscribeReason: ").append(toIndentedString(unsubscribeReason)).append("\n");
    sb.append("    consentsToOneToOneMessaging: ").append(toIndentedString(consentsToOneToOneMessaging)).append("\n");
    sb.append("    smsPhoneNumber: ").append(toIndentedString(smsPhoneNumber)).append("\n");
    sb.append("    smsSubscriptionStatus: ").append(toIndentedString(smsSubscriptionStatus)).append("\n");
    sb.append("    smsSubscriptionLastUpdated: ").append(toIndentedString(smsSubscriptionLastUpdated)).append("\n");
    sb.append("    mergeFields: ").append(toIndentedString(mergeFields)).append("\n");
    sb.append("    interests: ").append(toIndentedString(interests)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    ipSignup: ").append(toIndentedString(ipSignup)).append("\n");
    sb.append("    timestampSignup: ").append(toIndentedString(timestampSignup)).append("\n");
    sb.append("    ipOpt: ").append(toIndentedString(ipOpt)).append("\n");
    sb.append("    timestampOpt: ").append(toIndentedString(timestampOpt)).append("\n");
    sb.append("    memberRating: ").append(toIndentedString(memberRating)).append("\n");
    sb.append("    lastChanged: ").append(toIndentedString(lastChanged)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("    emailClient: ").append(toIndentedString(emailClient)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    marketingPermissions: ").append(toIndentedString(marketingPermissions)).append("\n");
    sb.append("    lastNote: ").append(toIndentedString(lastNote)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    tagsCount: ").append(toIndentedString(tagsCount)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("id");
    openapiFields.add("email_address");
    openapiFields.add("unique_email_id");
    openapiFields.add("contact_id");
    openapiFields.add("full_name");
    openapiFields.add("web_id");
    openapiFields.add("email_type");
    openapiFields.add("status");
    openapiFields.add("unsubscribe_reason");
    openapiFields.add("consents_to_one_to_one_messaging");
    openapiFields.add("sms_phone_number");
    openapiFields.add("sms_subscription_status");
    openapiFields.add("sms_subscription_last_updated");
    openapiFields.add("merge_fields");
    openapiFields.add("interests");
    openapiFields.add("stats");
    openapiFields.add("ip_signup");
    openapiFields.add("timestamp_signup");
    openapiFields.add("ip_opt");
    openapiFields.add("timestamp_opt");
    openapiFields.add("member_rating");
    openapiFields.add("last_changed");
    openapiFields.add("language");
    openapiFields.add("vip");
    openapiFields.add("email_client");
    openapiFields.add("location");
    openapiFields.add("marketing_permissions");
    openapiFields.add("last_note");
    openapiFields.add("source");
    openapiFields.add("tags_count");
    openapiFields.add("list_id");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListsAddMemberToList200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListsAddMemberToList200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListsAddMemberToList200Response is not found in the empty JSON string", ListsAddMemberToList200Response.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagsPropertyInner.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonNull()) && !jsonObj.get("email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      if ((jsonObj.get("unique_email_id") != null && !jsonObj.get("unique_email_id").isJsonNull()) && !jsonObj.get("unique_email_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_email_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_email_id").toString()));
      }
      if ((jsonObj.get("contact_id") != null && !jsonObj.get("contact_id").isJsonNull()) && !jsonObj.get("contact_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_id").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("email_type") != null && !jsonObj.get("email_type").isJsonNull()) && !jsonObj.get("email_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("unsubscribe_reason") != null && !jsonObj.get("unsubscribe_reason").isJsonNull()) && !jsonObj.get("unsubscribe_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsubscribe_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsubscribe_reason").toString()));
      }
      if ((jsonObj.get("sms_phone_number") != null && !jsonObj.get("sms_phone_number").isJsonNull()) && !jsonObj.get("sms_phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms_phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sms_phone_number").toString()));
      }
      if ((jsonObj.get("sms_subscription_status") != null && !jsonObj.get("sms_subscription_status").isJsonNull()) && !jsonObj.get("sms_subscription_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms_subscription_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sms_subscription_status").toString()));
      }
      if ((jsonObj.get("sms_subscription_last_updated") != null && !jsonObj.get("sms_subscription_last_updated").isJsonNull()) && !jsonObj.get("sms_subscription_last_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms_subscription_last_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sms_subscription_last_updated").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        SubscriberStatsProperty4.validateJsonObject(jsonObj.getAsJsonObject("stats"));
      }
      if ((jsonObj.get("ip_signup") != null && !jsonObj.get("ip_signup").isJsonNull()) && !jsonObj.get("ip_signup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_signup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_signup").toString()));
      }
      if ((jsonObj.get("ip_opt") != null && !jsonObj.get("ip_opt").isJsonNull()) && !jsonObj.get("ip_opt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_opt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_opt").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("email_client") != null && !jsonObj.get("email_client").isJsonNull()) && !jsonObj.get("email_client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_client").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LocationProperty2.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if (jsonObj.get("marketing_permissions") != null && !jsonObj.get("marketing_permissions").isJsonNull()) {
        JsonArray jsonArraymarketingPermissions = jsonObj.getAsJsonArray("marketing_permissions");
        if (jsonArraymarketingPermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("marketing_permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `marketing_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("marketing_permissions").toString()));
          }

          // validate the optional field `marketing_permissions` (array)
          for (int i = 0; i < jsonArraymarketingPermissions.size(); i++) {
            MarketingPermission1.validateJsonObject(jsonArraymarketingPermissions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `last_note`
      if (jsonObj.get("last_note") != null && !jsonObj.get("last_note").isJsonNull()) {
        NotesProperty.validateJsonObject(jsonObj.getAsJsonObject("last_note"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("list_id") != null && !jsonObj.get("list_id").isJsonNull()) && !jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListsAddMemberToList200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListsAddMemberToList200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListsAddMemberToList200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListsAddMemberToList200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ListsAddMemberToList200Response>() {
           @Override
           public void write(JsonWriter out, ListsAddMemberToList200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListsAddMemberToList200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ListsAddMemberToList200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListsAddMemberToList200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListsAddMemberToList200Response
  * @throws IOException if the JSON string is invalid with respect to ListsAddMemberToList200Response
  */
  public static ListsAddMemberToList200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListsAddMemberToList200Response.class);
  }

 /**
  * Convert an instance of ListsAddMemberToList200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

