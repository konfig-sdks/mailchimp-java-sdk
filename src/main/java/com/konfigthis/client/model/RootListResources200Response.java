/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AccountContactProperty;
import com.konfigthis.client.model.IndustryStatsProperty;
import com.konfigthis.client.model.ResourceLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The API root resource links to all other resources available in the API.
 */
@ApiModel(description = "The API root resource links to all other resources available in the API.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RootListResources200Response {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_LOGIN_ID = "login_id";
  @SerializedName(SERIALIZED_NAME_LOGIN_ID)
  private String loginId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "account_name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_MEMBER_SINCE = "member_since";
  @SerializedName(SERIALIZED_NAME_MEMBER_SINCE)
  private OffsetDateTime memberSince;

  /**
   * The type of pricing plan the account is on.
   */
  @JsonAdapter(PricingPlanTypeEnum.Adapter.class)
 public enum PricingPlanTypeEnum {
    MONTHLY("monthly"),
    
    PAY_AS_YOU_GO("pay_as_you_go"),
    
    FOREVER_FREE("forever_free");

    private String value;

    PricingPlanTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingPlanTypeEnum fromValue(String value) {
      for (PricingPlanTypeEnum b : PricingPlanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingPlanTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingPlanTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingPlanTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingPlanTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRICING_PLAN_TYPE = "pricing_plan_type";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN_TYPE)
  private PricingPlanTypeEnum pricingPlanType;

  public static final String SERIALIZED_NAME_FIRST_PAYMENT = "first_payment";
  @SerializedName(SERIALIZED_NAME_FIRST_PAYMENT)
  private OffsetDateTime firstPayment;

  public static final String SERIALIZED_NAME_ACCOUNT_TIMEZONE = "account_timezone";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TIMEZONE)
  private String accountTimezone;

  public static final String SERIALIZED_NAME_ACCOUNT_INDUSTRY = "account_industry";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_INDUSTRY)
  private String accountIndustry;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private AccountContactProperty contact;

  public static final String SERIALIZED_NAME_PRO_ENABLED = "pro_enabled";
  @SerializedName(SERIALIZED_NAME_PRO_ENABLED)
  private Boolean proEnabled;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "last_login";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_TOTAL_SUBSCRIBERS = "total_subscribers";
  @SerializedName(SERIALIZED_NAME_TOTAL_SUBSCRIBERS)
  private Integer totalSubscribers;

  public static final String SERIALIZED_NAME_INDUSTRY_STATS = "industry_stats";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_STATS)
  private IndustryStatsProperty industryStats;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public RootListResources200Response() {
  }

  
  public RootListResources200Response(
     String accountId, 
     String loginId, 
     String accountName, 
     String email, 
     String firstName, 
     String lastName, 
     String username, 
     String avatarUrl, 
     String role, 
     OffsetDateTime memberSince, 
     PricingPlanTypeEnum pricingPlanType, 
     OffsetDateTime firstPayment, 
     String accountTimezone, 
     String accountIndustry, 
     Boolean proEnabled, 
     OffsetDateTime lastLogin, 
     Integer totalSubscribers, 
     List<ResourceLink> links
  ) {
    this();
    this.accountId = accountId;
    this.loginId = loginId;
    this.accountName = accountName;
    this.email = email;
    this.firstName = firstName;
    this.lastName = lastName;
    this.username = username;
    this.avatarUrl = avatarUrl;
    this.role = role;
    this.memberSince = memberSince;
    this.pricingPlanType = pricingPlanType;
    this.firstPayment = firstPayment;
    this.accountTimezone = accountTimezone;
    this.accountIndustry = accountIndustry;
    this.proEnabled = proEnabled;
    this.lastLogin = lastLogin;
    this.totalSubscribers = totalSubscribers;
    this.links = links;
  }

   /**
   * The Mailchimp account ID.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Mailchimp account ID.")

  public String getAccountId() {
    return accountId;
  }




   /**
   * The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account.
   * @return loginId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account.")

  public String getLoginId() {
    return loginId;
  }




   /**
   * The name of the account.
   * @return accountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the account.")

  public String getAccountName() {
    return accountName;
  }




   /**
   * The account email address.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The account email address.")

  public String getEmail() {
    return email;
  }




   /**
   * The first name tied to the account.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The first name tied to the account.")

  public String getFirstName() {
    return firstName;
  }




   /**
   * The last name tied to the account.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last name tied to the account.")

  public String getLastName() {
    return lastName;
  }




   /**
   * The username tied to the account.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "freddie2000", value = "The username tied to the account.")

  public String getUsername() {
    return username;
  }




   /**
   * URL of the avatar for the user.
   * @return avatarUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of the avatar for the user.")

  public String getAvatarUrl() {
    return avatarUrl;
  }




   /**
   * The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account.
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account.")

  public String getRole() {
    return role;
  }




   /**
   * The date and time that the account was created in ISO 8601 format.
   * @return memberSince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2010-01-01T23:59:59Z", value = "The date and time that the account was created in ISO 8601 format.")

  public OffsetDateTime getMemberSince() {
    return memberSince;
  }




   /**
   * The type of pricing plan the account is on.
   * @return pricingPlanType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of pricing plan the account is on.")

  public PricingPlanTypeEnum getPricingPlanType() {
    return pricingPlanType;
  }




   /**
   * Date of first payment for monthly plans.
   * @return firstPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2010-01-01T23:59:59Z", value = "Date of first payment for monthly plans.")

  public OffsetDateTime getFirstPayment() {
    return firstPayment;
  }




   /**
   * The timezone currently set for the account.
   * @return accountTimezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timezone currently set for the account.")

  public String getAccountTimezone() {
    return accountTimezone;
  }




   /**
   * The user-specified industry associated with the account.
   * @return accountIndustry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user-specified industry associated with the account.")

  public String getAccountIndustry() {
    return accountIndustry;
  }




  public RootListResources200Response contact(AccountContactProperty contact) {
    
    
    
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AccountContactProperty getContact() {
    return contact;
  }


  public void setContact(AccountContactProperty contact) {
    
    
    
    this.contact = contact;
  }


   /**
   * Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/).
   * @return proEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/).")

  public Boolean getProEnabled() {
    return proEnabled;
  }




   /**
   * The date and time of the last login for this account in ISO 8601 format.
   * @return lastLogin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time of the last login for this account in ISO 8601 format.")

  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }




   /**
   * The total number of subscribers across all lists in the account.
   * @return totalSubscribers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of subscribers across all lists in the account.")

  public Integer getTotalSubscribers() {
    return totalSubscribers;
  }




  public RootListResources200Response industryStats(IndustryStatsProperty industryStats) {
    
    
    
    
    this.industryStats = industryStats;
    return this;
  }

   /**
   * Get industryStats
   * @return industryStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IndustryStatsProperty getIndustryStats() {
    return industryStats;
  }


  public void setIndustryStats(IndustryStatsProperty industryStats) {
    
    
    
    this.industryStats = industryStats;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RootListResources200Response instance itself
   */
  public RootListResources200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RootListResources200Response rootListResources200Response = (RootListResources200Response) o;
    return Objects.equals(this.accountId, rootListResources200Response.accountId) &&
        Objects.equals(this.loginId, rootListResources200Response.loginId) &&
        Objects.equals(this.accountName, rootListResources200Response.accountName) &&
        Objects.equals(this.email, rootListResources200Response.email) &&
        Objects.equals(this.firstName, rootListResources200Response.firstName) &&
        Objects.equals(this.lastName, rootListResources200Response.lastName) &&
        Objects.equals(this.username, rootListResources200Response.username) &&
        Objects.equals(this.avatarUrl, rootListResources200Response.avatarUrl) &&
        Objects.equals(this.role, rootListResources200Response.role) &&
        Objects.equals(this.memberSince, rootListResources200Response.memberSince) &&
        Objects.equals(this.pricingPlanType, rootListResources200Response.pricingPlanType) &&
        Objects.equals(this.firstPayment, rootListResources200Response.firstPayment) &&
        Objects.equals(this.accountTimezone, rootListResources200Response.accountTimezone) &&
        Objects.equals(this.accountIndustry, rootListResources200Response.accountIndustry) &&
        Objects.equals(this.contact, rootListResources200Response.contact) &&
        Objects.equals(this.proEnabled, rootListResources200Response.proEnabled) &&
        Objects.equals(this.lastLogin, rootListResources200Response.lastLogin) &&
        Objects.equals(this.totalSubscribers, rootListResources200Response.totalSubscribers) &&
        Objects.equals(this.industryStats, rootListResources200Response.industryStats) &&
        Objects.equals(this.links, rootListResources200Response.links)&&
        Objects.equals(this.additionalProperties, rootListResources200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, loginId, accountName, email, firstName, lastName, username, avatarUrl, role, memberSince, pricingPlanType, firstPayment, accountTimezone, accountIndustry, contact, proEnabled, lastLogin, totalSubscribers, industryStats, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RootListResources200Response {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    loginId: ").append(toIndentedString(loginId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    memberSince: ").append(toIndentedString(memberSince)).append("\n");
    sb.append("    pricingPlanType: ").append(toIndentedString(pricingPlanType)).append("\n");
    sb.append("    firstPayment: ").append(toIndentedString(firstPayment)).append("\n");
    sb.append("    accountTimezone: ").append(toIndentedString(accountTimezone)).append("\n");
    sb.append("    accountIndustry: ").append(toIndentedString(accountIndustry)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    proEnabled: ").append(toIndentedString(proEnabled)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    totalSubscribers: ").append(toIndentedString(totalSubscribers)).append("\n");
    sb.append("    industryStats: ").append(toIndentedString(industryStats)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("login_id");
    openapiFields.add("account_name");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("username");
    openapiFields.add("avatar_url");
    openapiFields.add("role");
    openapiFields.add("member_since");
    openapiFields.add("pricing_plan_type");
    openapiFields.add("first_payment");
    openapiFields.add("account_timezone");
    openapiFields.add("account_industry");
    openapiFields.add("contact");
    openapiFields.add("pro_enabled");
    openapiFields.add("last_login");
    openapiFields.add("total_subscribers");
    openapiFields.add("industry_stats");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RootListResources200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RootListResources200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RootListResources200Response is not found in the empty JSON string", RootListResources200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("login_id") != null && !jsonObj.get("login_id").isJsonNull()) && !jsonObj.get("login_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_id").toString()));
      }
      if ((jsonObj.get("account_name") != null && !jsonObj.get("account_name").isJsonNull()) && !jsonObj.get("account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("pricing_plan_type") != null && !jsonObj.get("pricing_plan_type").isJsonNull()) && !jsonObj.get("pricing_plan_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_plan_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_plan_type").toString()));
      }
      if ((jsonObj.get("account_timezone") != null && !jsonObj.get("account_timezone").isJsonNull()) && !jsonObj.get("account_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_timezone").toString()));
      }
      if ((jsonObj.get("account_industry") != null && !jsonObj.get("account_industry").isJsonNull()) && !jsonObj.get("account_industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_industry").toString()));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        AccountContactProperty.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      }
      // validate the optional field `industry_stats`
      if (jsonObj.get("industry_stats") != null && !jsonObj.get("industry_stats").isJsonNull()) {
        IndustryStatsProperty.validateJsonObject(jsonObj.getAsJsonObject("industry_stats"));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RootListResources200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RootListResources200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RootListResources200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RootListResources200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RootListResources200Response>() {
           @Override
           public void write(JsonWriter out, RootListResources200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RootListResources200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RootListResources200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RootListResources200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RootListResources200Response
  * @throws IOException if the JSON string is invalid with respect to RootListResources200Response
  */
  public static RootListResources200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RootListResources200Response.class);
  }

 /**
  * Convert an instance of RootListResources200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

