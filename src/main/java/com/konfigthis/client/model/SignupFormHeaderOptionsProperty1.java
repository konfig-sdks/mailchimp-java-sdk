/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Options for customizing your signup form header.
 */
@ApiModel(description = "Options for customizing your signup form header.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SignupFormHeaderOptionsProperty1 {
  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_IMAGE_WIDTH = "image_width";
  @SerializedName(SERIALIZED_NAME_IMAGE_WIDTH)
  private String imageWidth;

  public static final String SERIALIZED_NAME_IMAGE_HEIGHT = "image_height";
  @SerializedName(SERIALIZED_NAME_IMAGE_HEIGHT)
  private String imageHeight;

  public static final String SERIALIZED_NAME_IMAGE_ALT = "image_alt";
  @SerializedName(SERIALIZED_NAME_IMAGE_ALT)
  private String imageAlt;

  public static final String SERIALIZED_NAME_IMAGE_LINK = "image_link";
  @SerializedName(SERIALIZED_NAME_IMAGE_LINK)
  private String imageLink;

  /**
   * Image alignment.
   */
  @JsonAdapter(ImageAlignEnum.Adapter.class)
 public enum ImageAlignEnum {
    NONE("none"),
    
    LEFT("left"),
    
    CENTER("center"),
    
    RIGHT("right");

    private String value;

    ImageAlignEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageAlignEnum fromValue(String value) {
      for (ImageAlignEnum b : ImageAlignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageAlignEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageAlignEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageAlignEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageAlignEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_ALIGN = "image_align";
  @SerializedName(SERIALIZED_NAME_IMAGE_ALIGN)
  private ImageAlignEnum imageAlign;

  public static final String SERIALIZED_NAME_IMAGE_BORDER_WIDTH = "image_border_width";
  @SerializedName(SERIALIZED_NAME_IMAGE_BORDER_WIDTH)
  private String imageBorderWidth;

  /**
   * Image border style.
   */
  @JsonAdapter(ImageBorderStyleEnum.Adapter.class)
 public enum ImageBorderStyleEnum {
    NONE("none"),
    
    SOLID("solid"),
    
    DOTTED("dotted"),
    
    DASHED("dashed"),
    
    DOUBLE("double"),
    
    GROOVE("groove"),
    
    OUTSET("outset"),
    
    INSET("inset"),
    
    RIDGE("ridge");

    private String value;

    ImageBorderStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageBorderStyleEnum fromValue(String value) {
      for (ImageBorderStyleEnum b : ImageBorderStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageBorderStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageBorderStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageBorderStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageBorderStyleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_BORDER_STYLE = "image_border_style";
  @SerializedName(SERIALIZED_NAME_IMAGE_BORDER_STYLE)
  private ImageBorderStyleEnum imageBorderStyle;

  public static final String SERIALIZED_NAME_IMAGE_BORDER_COLOR = "image_border_color";
  @SerializedName(SERIALIZED_NAME_IMAGE_BORDER_COLOR)
  private String imageBorderColor;

  /**
   * Image link target.
   */
  @JsonAdapter(ImageTargetEnum.Adapter.class)
 public enum ImageTargetEnum {
    _BLANK("_blank"),
    
    NULL("null");

    private String value;

    ImageTargetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageTargetEnum fromValue(String value) {
      for (ImageTargetEnum b : ImageTargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageTargetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageTargetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageTargetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageTargetEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_TARGET = "image_target";
  @SerializedName(SERIALIZED_NAME_IMAGE_TARGET)
  private ImageTargetEnum imageTarget;

  public SignupFormHeaderOptionsProperty1() {
  }

  public SignupFormHeaderOptionsProperty1 imageUrl(String imageUrl) {
    
    
    
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Header image URL.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://gallery.mailchimp.com/332310cb9a420a9e7fea2858a/images/2491208c-9458-4834-a708-fef4ee736472.png", value = "Header image URL.")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    
    
    
    this.imageUrl = imageUrl;
  }


  public SignupFormHeaderOptionsProperty1 text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * Header text.
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Header Text goes here", value = "Header text.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public SignupFormHeaderOptionsProperty1 imageWidth(String imageWidth) {
    
    
    
    
    this.imageWidth = imageWidth;
    return this;
  }

   /**
   * Image width, in pixels.
   * @return imageWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "800", value = "Image width, in pixels.")

  public String getImageWidth() {
    return imageWidth;
  }


  public void setImageWidth(String imageWidth) {
    
    
    
    this.imageWidth = imageWidth;
  }


  public SignupFormHeaderOptionsProperty1 imageHeight(String imageHeight) {
    
    
    
    
    this.imageHeight = imageHeight;
    return this;
  }

   /**
   * Image height, in pixels.
   * @return imageHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "Image height, in pixels.")

  public String getImageHeight() {
    return imageHeight;
  }


  public void setImageHeight(String imageHeight) {
    
    
    
    this.imageHeight = imageHeight;
  }


  public SignupFormHeaderOptionsProperty1 imageAlt(String imageAlt) {
    
    
    
    
    this.imageAlt = imageAlt;
    return this;
  }

   /**
   * Alt text for the image.
   * @return imageAlt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is an image", value = "Alt text for the image.")

  public String getImageAlt() {
    return imageAlt;
  }


  public void setImageAlt(String imageAlt) {
    
    
    
    this.imageAlt = imageAlt;
  }


  public SignupFormHeaderOptionsProperty1 imageLink(String imageLink) {
    
    
    
    
    this.imageLink = imageLink;
    return this;
  }

   /**
   * The URL that the header image will link to.
   * @return imageLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "gotothisimage.com", value = "The URL that the header image will link to.")

  public String getImageLink() {
    return imageLink;
  }


  public void setImageLink(String imageLink) {
    
    
    
    this.imageLink = imageLink;
  }


  public SignupFormHeaderOptionsProperty1 imageAlign(ImageAlignEnum imageAlign) {
    
    
    
    
    this.imageAlign = imageAlign;
    return this;
  }

   /**
   * Image alignment.
   * @return imageAlign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CENTER", value = "Image alignment.")

  public ImageAlignEnum getImageAlign() {
    return imageAlign;
  }


  public void setImageAlign(ImageAlignEnum imageAlign) {
    
    
    
    this.imageAlign = imageAlign;
  }


  public SignupFormHeaderOptionsProperty1 imageBorderWidth(String imageBorderWidth) {
    
    
    
    
    this.imageBorderWidth = imageBorderWidth;
    return this;
  }

   /**
   * Image border width.
   * @return imageBorderWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Image border width.")

  public String getImageBorderWidth() {
    return imageBorderWidth;
  }


  public void setImageBorderWidth(String imageBorderWidth) {
    
    
    
    this.imageBorderWidth = imageBorderWidth;
  }


  public SignupFormHeaderOptionsProperty1 imageBorderStyle(ImageBorderStyleEnum imageBorderStyle) {
    
    
    
    
    this.imageBorderStyle = imageBorderStyle;
    return this;
  }

   /**
   * Image border style.
   * @return imageBorderStyle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SOLID", value = "Image border style.")

  public ImageBorderStyleEnum getImageBorderStyle() {
    return imageBorderStyle;
  }


  public void setImageBorderStyle(ImageBorderStyleEnum imageBorderStyle) {
    
    
    
    this.imageBorderStyle = imageBorderStyle;
  }


  public SignupFormHeaderOptionsProperty1 imageBorderColor(String imageBorderColor) {
    
    
    
    
    this.imageBorderColor = imageBorderColor;
    return this;
  }

   /**
   * Image border color.
   * @return imageBorderColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#896d6d", value = "Image border color.")

  public String getImageBorderColor() {
    return imageBorderColor;
  }


  public void setImageBorderColor(String imageBorderColor) {
    
    
    
    this.imageBorderColor = imageBorderColor;
  }


  public SignupFormHeaderOptionsProperty1 imageTarget(ImageTargetEnum imageTarget) {
    
    
    
    
    this.imageTarget = imageTarget;
    return this;
  }

   /**
   * Image link target.
   * @return imageTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_BLANK", value = "Image link target.")

  public ImageTargetEnum getImageTarget() {
    return imageTarget;
  }


  public void setImageTarget(ImageTargetEnum imageTarget) {
    
    
    
    this.imageTarget = imageTarget;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SignupFormHeaderOptionsProperty1 instance itself
   */
  public SignupFormHeaderOptionsProperty1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignupFormHeaderOptionsProperty1 signupFormHeaderOptionsProperty1 = (SignupFormHeaderOptionsProperty1) o;
    return Objects.equals(this.imageUrl, signupFormHeaderOptionsProperty1.imageUrl) &&
        Objects.equals(this.text, signupFormHeaderOptionsProperty1.text) &&
        Objects.equals(this.imageWidth, signupFormHeaderOptionsProperty1.imageWidth) &&
        Objects.equals(this.imageHeight, signupFormHeaderOptionsProperty1.imageHeight) &&
        Objects.equals(this.imageAlt, signupFormHeaderOptionsProperty1.imageAlt) &&
        Objects.equals(this.imageLink, signupFormHeaderOptionsProperty1.imageLink) &&
        Objects.equals(this.imageAlign, signupFormHeaderOptionsProperty1.imageAlign) &&
        Objects.equals(this.imageBorderWidth, signupFormHeaderOptionsProperty1.imageBorderWidth) &&
        Objects.equals(this.imageBorderStyle, signupFormHeaderOptionsProperty1.imageBorderStyle) &&
        Objects.equals(this.imageBorderColor, signupFormHeaderOptionsProperty1.imageBorderColor) &&
        Objects.equals(this.imageTarget, signupFormHeaderOptionsProperty1.imageTarget)&&
        Objects.equals(this.additionalProperties, signupFormHeaderOptionsProperty1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageUrl, text, imageWidth, imageHeight, imageAlt, imageLink, imageAlign, imageBorderWidth, imageBorderStyle, imageBorderColor, imageTarget, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignupFormHeaderOptionsProperty1 {\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("    imageHeight: ").append(toIndentedString(imageHeight)).append("\n");
    sb.append("    imageAlt: ").append(toIndentedString(imageAlt)).append("\n");
    sb.append("    imageLink: ").append(toIndentedString(imageLink)).append("\n");
    sb.append("    imageAlign: ").append(toIndentedString(imageAlign)).append("\n");
    sb.append("    imageBorderWidth: ").append(toIndentedString(imageBorderWidth)).append("\n");
    sb.append("    imageBorderStyle: ").append(toIndentedString(imageBorderStyle)).append("\n");
    sb.append("    imageBorderColor: ").append(toIndentedString(imageBorderColor)).append("\n");
    sb.append("    imageTarget: ").append(toIndentedString(imageTarget)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image_url");
    openapiFields.add("text");
    openapiFields.add("image_width");
    openapiFields.add("image_height");
    openapiFields.add("image_alt");
    openapiFields.add("image_link");
    openapiFields.add("image_align");
    openapiFields.add("image_border_width");
    openapiFields.add("image_border_style");
    openapiFields.add("image_border_color");
    openapiFields.add("image_target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignupFormHeaderOptionsProperty1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SignupFormHeaderOptionsProperty1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignupFormHeaderOptionsProperty1 is not found in the empty JSON string", SignupFormHeaderOptionsProperty1.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("image_width") != null && !jsonObj.get("image_width").isJsonNull()) && !jsonObj.get("image_width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_width").toString()));
      }
      if ((jsonObj.get("image_height") != null && !jsonObj.get("image_height").isJsonNull()) && !jsonObj.get("image_height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_height").toString()));
      }
      if ((jsonObj.get("image_alt") != null && !jsonObj.get("image_alt").isJsonNull()) && !jsonObj.get("image_alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_alt").toString()));
      }
      if ((jsonObj.get("image_link") != null && !jsonObj.get("image_link").isJsonNull()) && !jsonObj.get("image_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_link").toString()));
      }
      if ((jsonObj.get("image_align") != null && !jsonObj.get("image_align").isJsonNull()) && !jsonObj.get("image_align").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_align` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_align").toString()));
      }
      if ((jsonObj.get("image_border_width") != null && !jsonObj.get("image_border_width").isJsonNull()) && !jsonObj.get("image_border_width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_border_width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_border_width").toString()));
      }
      if ((jsonObj.get("image_border_style") != null && !jsonObj.get("image_border_style").isJsonNull()) && !jsonObj.get("image_border_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_border_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_border_style").toString()));
      }
      if ((jsonObj.get("image_border_color") != null && !jsonObj.get("image_border_color").isJsonNull()) && !jsonObj.get("image_border_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_border_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_border_color").toString()));
      }
      if ((jsonObj.get("image_target") != null && !jsonObj.get("image_target").isJsonNull()) && !jsonObj.get("image_target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignupFormHeaderOptionsProperty1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignupFormHeaderOptionsProperty1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignupFormHeaderOptionsProperty1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignupFormHeaderOptionsProperty1.class));

       return (TypeAdapter<T>) new TypeAdapter<SignupFormHeaderOptionsProperty1>() {
           @Override
           public void write(JsonWriter out, SignupFormHeaderOptionsProperty1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SignupFormHeaderOptionsProperty1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SignupFormHeaderOptionsProperty1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignupFormHeaderOptionsProperty1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignupFormHeaderOptionsProperty1
  * @throws IOException if the JSON string is invalid with respect to SignupFormHeaderOptionsProperty1
  */
  public static SignupFormHeaderOptionsProperty1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignupFormHeaderOptionsProperty1.class);
  }

 /**
  * Convert an instance of SignupFormHeaderOptionsProperty1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

