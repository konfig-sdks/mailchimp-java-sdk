/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A single email domain&#39;s performance
 */
@ApiModel(description = "A single email domain's performance")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmailDomain {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EMAILS_SENT = "emails_sent";
  @SerializedName(SERIALIZED_NAME_EMAILS_SENT)
  private Integer emailsSent;

  public static final String SERIALIZED_NAME_BOUNCES = "bounces";
  @SerializedName(SERIALIZED_NAME_BOUNCES)
  private Integer bounces;

  public static final String SERIALIZED_NAME_OPENS = "opens";
  @SerializedName(SERIALIZED_NAME_OPENS)
  private Integer opens;

  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private Integer clicks;

  public static final String SERIALIZED_NAME_UNSUBS = "unsubs";
  @SerializedName(SERIALIZED_NAME_UNSUBS)
  private Integer unsubs;

  public static final String SERIALIZED_NAME_DELIVERED = "delivered";
  @SerializedName(SERIALIZED_NAME_DELIVERED)
  private Integer delivered;

  public static final String SERIALIZED_NAME_EMAILS_PCT = "emails_pct";
  @SerializedName(SERIALIZED_NAME_EMAILS_PCT)
  private Double emailsPct;

  public static final String SERIALIZED_NAME_BOUNCES_PCT = "bounces_pct";
  @SerializedName(SERIALIZED_NAME_BOUNCES_PCT)
  private Double bouncesPct;

  public static final String SERIALIZED_NAME_OPENS_PCT = "opens_pct";
  @SerializedName(SERIALIZED_NAME_OPENS_PCT)
  private Double opensPct;

  public static final String SERIALIZED_NAME_CLICKS_PCT = "clicks_pct";
  @SerializedName(SERIALIZED_NAME_CLICKS_PCT)
  private Double clicksPct;

  public static final String SERIALIZED_NAME_UNSUBS_PCT = "unsubs_pct";
  @SerializedName(SERIALIZED_NAME_UNSUBS_PCT)
  private Double unsubsPct;

  public EmailDomain() {
  }

  
  public EmailDomain(
     String domain, 
     Integer emailsSent, 
     Integer bounces, 
     Integer opens, 
     Integer clicks, 
     Integer unsubs, 
     Integer delivered, 
     Double emailsPct, 
     Double bouncesPct, 
     Double opensPct, 
     Double clicksPct, 
     Double unsubsPct
  ) {
    this();
    this.domain = domain;
    this.emailsSent = emailsSent;
    this.bounces = bounces;
    this.opens = opens;
    this.clicks = clicks;
    this.unsubs = unsubs;
    this.delivered = delivered;
    this.emailsPct = emailsPct;
    this.bouncesPct = bouncesPct;
    this.opensPct = opensPct;
    this.clicksPct = clicksPct;
    this.unsubsPct = unsubsPct;
  }

   /**
   * The name of the domain (gmail.com, hotmail.com, yahoo.com).
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the domain (gmail.com, hotmail.com, yahoo.com).")

  public String getDomain() {
    return domain;
  }




   /**
   * The number of emails sent to that specific domain.
   * @return emailsSent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of emails sent to that specific domain.")

  public Integer getEmailsSent() {
    return emailsSent;
  }




   /**
   * The number of bounces at a domain.
   * @return bounces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of bounces at a domain.")

  public Integer getBounces() {
    return bounces;
  }




   /**
   * The number of opens for a domain.
   * @return opens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of opens for a domain.")

  public Integer getOpens() {
    return opens;
  }




   /**
   * The number of clicks for a domain.
   * @return clicks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of clicks for a domain.")

  public Integer getClicks() {
    return clicks;
  }




   /**
   * The total number of unsubscribes for a domain.
   * @return unsubs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of unsubscribes for a domain.")

  public Integer getUnsubs() {
    return unsubs;
  }




   /**
   * The number of successful deliveries for a domain.
   * @return delivered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of successful deliveries for a domain.")

  public Integer getDelivered() {
    return delivered;
  }




   /**
   * The percentage of total emails that went to this domain.
   * @return emailsPct
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of total emails that went to this domain.")

  public Double getEmailsPct() {
    return emailsPct;
  }




   /**
   * The percentage of total bounces from this domain.
   * @return bouncesPct
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of total bounces from this domain.")

  public Double getBouncesPct() {
    return bouncesPct;
  }




   /**
   * The percentage of total opens from this domain.
   * @return opensPct
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of total opens from this domain.")

  public Double getOpensPct() {
    return opensPct;
  }




   /**
   * The percentage of total clicks from this domain.
   * @return clicksPct
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of total clicks from this domain.")

  public Double getClicksPct() {
    return clicksPct;
  }




   /**
   * The percentage of total unsubscribes from this domain.
   * @return unsubsPct
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of total unsubscribes from this domain.")

  public Double getUnsubsPct() {
    return unsubsPct;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmailDomain instance itself
   */
  public EmailDomain putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailDomain emailDomain = (EmailDomain) o;
    return Objects.equals(this.domain, emailDomain.domain) &&
        Objects.equals(this.emailsSent, emailDomain.emailsSent) &&
        Objects.equals(this.bounces, emailDomain.bounces) &&
        Objects.equals(this.opens, emailDomain.opens) &&
        Objects.equals(this.clicks, emailDomain.clicks) &&
        Objects.equals(this.unsubs, emailDomain.unsubs) &&
        Objects.equals(this.delivered, emailDomain.delivered) &&
        Objects.equals(this.emailsPct, emailDomain.emailsPct) &&
        Objects.equals(this.bouncesPct, emailDomain.bouncesPct) &&
        Objects.equals(this.opensPct, emailDomain.opensPct) &&
        Objects.equals(this.clicksPct, emailDomain.clicksPct) &&
        Objects.equals(this.unsubsPct, emailDomain.unsubsPct)&&
        Objects.equals(this.additionalProperties, emailDomain.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, emailsSent, bounces, opens, clicks, unsubs, delivered, emailsPct, bouncesPct, opensPct, clicksPct, unsubsPct, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailDomain {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    bounces: ").append(toIndentedString(bounces)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    unsubs: ").append(toIndentedString(unsubs)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("    emailsPct: ").append(toIndentedString(emailsPct)).append("\n");
    sb.append("    bouncesPct: ").append(toIndentedString(bouncesPct)).append("\n");
    sb.append("    opensPct: ").append(toIndentedString(opensPct)).append("\n");
    sb.append("    clicksPct: ").append(toIndentedString(clicksPct)).append("\n");
    sb.append("    unsubsPct: ").append(toIndentedString(unsubsPct)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("emails_sent");
    openapiFields.add("bounces");
    openapiFields.add("opens");
    openapiFields.add("clicks");
    openapiFields.add("unsubs");
    openapiFields.add("delivered");
    openapiFields.add("emails_pct");
    openapiFields.add("bounces_pct");
    openapiFields.add("opens_pct");
    openapiFields.add("clicks_pct");
    openapiFields.add("unsubs_pct");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailDomain
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmailDomain.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailDomain is not found in the empty JSON string", EmailDomain.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailDomain>() {
           @Override
           public void write(JsonWriter out, EmailDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailDomain read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmailDomain instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailDomain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailDomain
  * @throws IOException if the JSON string is invalid with respect to EmailDomain
  */
  public static EmailDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailDomain.class);
  }

 /**
  * Convert an instance of EmailDomain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

