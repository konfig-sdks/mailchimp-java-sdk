/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MergeFieldOptionsProperty5;
import com.konfigthis.client.model.ResourceLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.
 */
@ApiModel(description = "A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ListsAddMergeField200Response {
  public static final String SERIALIZED_NAME_MERGE_ID = "merge_id";
  @SerializedName(SERIALIZED_NAME_MERGE_ID)
  private Integer mergeId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    TEXT("text"),
    
    NUMBER("number"),
    
    ADDRESS("address"),
    
    PHONE("phone"),
    
    DATE("date"),
    
    URL("url"),
    
    IMAGEURL("imageurl"),
    
    RADIO("radio"),
    
    DROPDOWN("dropdown"),
    
    BIRTHDAY("birthday"),
    
    ZIP("zip");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "default_value";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "display_order";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private MergeFieldOptionsProperty5 options;

  public static final String SERIALIZED_NAME_HELP_TEXT = "help_text";
  @SerializedName(SERIALIZED_NAME_HELP_TEXT)
  private String helpText;

  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public ListsAddMergeField200Response() {
  }

  
  public ListsAddMergeField200Response(
     Integer mergeId, 
     TypeEnum type, 
     String listId, 
     List<ResourceLink> links
  ) {
    this();
    this.mergeId = mergeId;
    this.type = type;
    this.listId = listId;
    this.links = links;
  }

   /**
   * An unchanging id for the merge field.
   * @return mergeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An unchanging id for the merge field.")

  public Integer getMergeId() {
    return mergeId;
  }




  public ListsAddMergeField200Response tag(String tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    
    
    
    this.tag = tag;
  }


  public ListsAddMergeField200Response name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the merge field (audience field).
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the merge field (audience field).")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


   /**
   * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.")

  public TypeEnum getType() {
    return type;
  }




  public ListsAddMergeField200Response required(Boolean required) {
    
    
    
    
    this.required = required;
    return this;
  }

   /**
   * The boolean value if the merge field is required.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The boolean value if the merge field is required.")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    
    
    
    this.required = required;
  }


  public ListsAddMergeField200Response defaultValue(String defaultValue) {
    
    
    
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value for the merge field if &#x60;null&#x60;.
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The default value for the merge field if `null`.")

  public String getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(String defaultValue) {
    
    
    
    this.defaultValue = defaultValue;
  }


  public ListsAddMergeField200Response _public(Boolean _public) {
    
    
    
    
    this._public = _public;
    return this;
  }

   /**
   * Whether the merge field is displayed on the signup form.
   * @return _public
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the merge field is displayed on the signup form.")

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    
    
    
    this._public = _public;
  }


  public ListsAddMergeField200Response displayOrder(Integer displayOrder) {
    
    
    
    
    this.displayOrder = displayOrder;
    return this;
  }

   /**
   * The order that the merge field displays on the list signup form.
   * @return displayOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The order that the merge field displays on the list signup form.")

  public Integer getDisplayOrder() {
    return displayOrder;
  }


  public void setDisplayOrder(Integer displayOrder) {
    
    
    
    this.displayOrder = displayOrder;
  }


  public ListsAddMergeField200Response options(MergeFieldOptionsProperty5 options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MergeFieldOptionsProperty5 getOptions() {
    return options;
  }


  public void setOptions(MergeFieldOptionsProperty5 options) {
    
    
    
    this.options = options;
  }


  public ListsAddMergeField200Response helpText(String helpText) {
    
    
    
    
    this.helpText = helpText;
    return this;
  }

   /**
   * Extra text to help the subscriber fill out the form.
   * @return helpText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra text to help the subscriber fill out the form.")

  public String getHelpText() {
    return helpText;
  }


  public void setHelpText(String helpText) {
    
    
    
    this.helpText = helpText;
  }


   /**
   * The ID that identifies this merge field&#39;s audience&#39;.
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID that identifies this merge field's audience'.")

  public String getListId() {
    return listId;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListsAddMergeField200Response instance itself
   */
  public ListsAddMergeField200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsAddMergeField200Response listsAddMergeField200Response = (ListsAddMergeField200Response) o;
    return Objects.equals(this.mergeId, listsAddMergeField200Response.mergeId) &&
        Objects.equals(this.tag, listsAddMergeField200Response.tag) &&
        Objects.equals(this.name, listsAddMergeField200Response.name) &&
        Objects.equals(this.type, listsAddMergeField200Response.type) &&
        Objects.equals(this.required, listsAddMergeField200Response.required) &&
        Objects.equals(this.defaultValue, listsAddMergeField200Response.defaultValue) &&
        Objects.equals(this._public, listsAddMergeField200Response._public) &&
        Objects.equals(this.displayOrder, listsAddMergeField200Response.displayOrder) &&
        Objects.equals(this.options, listsAddMergeField200Response.options) &&
        Objects.equals(this.helpText, listsAddMergeField200Response.helpText) &&
        Objects.equals(this.listId, listsAddMergeField200Response.listId) &&
        Objects.equals(this.links, listsAddMergeField200Response.links)&&
        Objects.equals(this.additionalProperties, listsAddMergeField200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeId, tag, name, type, required, defaultValue, _public, displayOrder, options, helpText, listId, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsAddMergeField200Response {\n");
    sb.append("    mergeId: ").append(toIndentedString(mergeId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merge_id");
    openapiFields.add("tag");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("required");
    openapiFields.add("default_value");
    openapiFields.add("public");
    openapiFields.add("display_order");
    openapiFields.add("options");
    openapiFields.add("help_text");
    openapiFields.add("list_id");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListsAddMergeField200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListsAddMergeField200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListsAddMergeField200Response is not found in the empty JSON string", ListsAddMergeField200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("default_value") != null && !jsonObj.get("default_value").isJsonNull()) && !jsonObj.get("default_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_value").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        MergeFieldOptionsProperty5.validateJsonObject(jsonObj.getAsJsonObject("options"));
      }
      if ((jsonObj.get("help_text") != null && !jsonObj.get("help_text").isJsonNull()) && !jsonObj.get("help_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help_text").toString()));
      }
      if ((jsonObj.get("list_id") != null && !jsonObj.get("list_id").isJsonNull()) && !jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListsAddMergeField200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListsAddMergeField200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListsAddMergeField200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListsAddMergeField200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ListsAddMergeField200Response>() {
           @Override
           public void write(JsonWriter out, ListsAddMergeField200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListsAddMergeField200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ListsAddMergeField200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListsAddMergeField200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListsAddMergeField200Response
  * @throws IOException if the JSON string is invalid with respect to ListsAddMergeField200Response
  */
  public static ListsAddMergeField200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListsAddMergeField200Response.class);
  }

 /**
  * Convert an instance of ListsAddMergeField200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

