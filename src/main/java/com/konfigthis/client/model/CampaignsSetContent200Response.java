/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourceLink;
import com.konfigthis.client.model.VariateContentsPropertyInner4;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The HTML and plain-text content for a campaign.
 */
@ApiModel(description = "The HTML and plain-text content for a campaign.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CampaignsSetContent200Response {
  public static final String SERIALIZED_NAME_VARIATE_CONTENTS = "variate_contents";
  @SerializedName(SERIALIZED_NAME_VARIATE_CONTENTS)
  private List<VariateContentsPropertyInner4> variateContents = null;

  public static final String SERIALIZED_NAME_PLAIN_TEXT = "plain_text";
  @SerializedName(SERIALIZED_NAME_PLAIN_TEXT)
  private String plainText;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_ARCHIVE_HTML = "archive_html";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_HTML)
  private String archiveHtml;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public CampaignsSetContent200Response() {
  }

  
  public CampaignsSetContent200Response(
     List<ResourceLink> links
  ) {
    this();
    this.links = links;
  }

  public CampaignsSetContent200Response variateContents(List<VariateContentsPropertyInner4> variateContents) {
    
    
    
    
    this.variateContents = variateContents;
    return this;
  }

  public CampaignsSetContent200Response addVariateContentsItem(VariateContentsPropertyInner4 variateContentsItem) {
    if (this.variateContents == null) {
      this.variateContents = new ArrayList<>();
    }
    this.variateContents.add(variateContentsItem);
    return this;
  }

   /**
   * Content options for multivariate campaigns.
   * @return variateContents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content options for multivariate campaigns.")

  public List<VariateContentsPropertyInner4> getVariateContents() {
    return variateContents;
  }


  public void setVariateContents(List<VariateContentsPropertyInner4> variateContents) {
    
    
    
    this.variateContents = variateContents;
  }


  public CampaignsSetContent200Response plainText(String plainText) {
    
    
    
    
    this.plainText = plainText;
    return this;
  }

   /**
   * The plain-text portion of the campaign. If left unspecified, we&#39;ll generate this automatically.
   * @return plainText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.")

  public String getPlainText() {
    return plainText;
  }


  public void setPlainText(String plainText) {
    
    
    
    this.plainText = plainText;
  }


  public CampaignsSetContent200Response html(String html) {
    
    
    
    
    this.html = html;
    return this;
  }

   /**
   * The raw HTML for the campaign.
   * @return html
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The raw HTML for the campaign.")

  public String getHtml() {
    return html;
  }


  public void setHtml(String html) {
    
    
    
    this.html = html;
  }


  public CampaignsSetContent200Response archiveHtml(String archiveHtml) {
    
    
    
    
    this.archiveHtml = archiveHtml;
    return this;
  }

   /**
   * The Archive HTML for the campaign.
   * @return archiveHtml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<!DOCTYPE html><html xmlns=http://www.w3.org/1999/xhtml><head><meta http-equiv=Content-Type content=\"text/html; charset=UTF-8\"><title>My Subject</title><style type=text/css>body{background-color:#d0e4fe}</style><body leftmargin=0 marginwidth=0 topmargin=0 marginheight=0 offset=0>", value = "The Archive HTML for the campaign.")

  public String getArchiveHtml() {
    return archiveHtml;
  }


  public void setArchiveHtml(String archiveHtml) {
    
    
    
    this.archiveHtml = archiveHtml;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CampaignsSetContent200Response instance itself
   */
  public CampaignsSetContent200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignsSetContent200Response campaignsSetContent200Response = (CampaignsSetContent200Response) o;
    return Objects.equals(this.variateContents, campaignsSetContent200Response.variateContents) &&
        Objects.equals(this.plainText, campaignsSetContent200Response.plainText) &&
        Objects.equals(this.html, campaignsSetContent200Response.html) &&
        Objects.equals(this.archiveHtml, campaignsSetContent200Response.archiveHtml) &&
        Objects.equals(this.links, campaignsSetContent200Response.links)&&
        Objects.equals(this.additionalProperties, campaignsSetContent200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variateContents, plainText, html, archiveHtml, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignsSetContent200Response {\n");
    sb.append("    variateContents: ").append(toIndentedString(variateContents)).append("\n");
    sb.append("    plainText: ").append(toIndentedString(plainText)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    archiveHtml: ").append(toIndentedString(archiveHtml)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("variate_contents");
    openapiFields.add("plain_text");
    openapiFields.add("html");
    openapiFields.add("archive_html");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignsSetContent200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignsSetContent200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignsSetContent200Response is not found in the empty JSON string", CampaignsSetContent200Response.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("variate_contents") != null && !jsonObj.get("variate_contents").isJsonNull()) {
        JsonArray jsonArrayvariateContents = jsonObj.getAsJsonArray("variate_contents");
        if (jsonArrayvariateContents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variate_contents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variate_contents` to be an array in the JSON string but got `%s`", jsonObj.get("variate_contents").toString()));
          }

          // validate the optional field `variate_contents` (array)
          for (int i = 0; i < jsonArrayvariateContents.size(); i++) {
            VariateContentsPropertyInner4.validateJsonObject(jsonArrayvariateContents.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("plain_text") != null && !jsonObj.get("plain_text").isJsonNull()) && !jsonObj.get("plain_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plain_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plain_text").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("archive_html") != null && !jsonObj.get("archive_html").isJsonNull()) && !jsonObj.get("archive_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_html").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignsSetContent200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignsSetContent200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignsSetContent200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignsSetContent200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignsSetContent200Response>() {
           @Override
           public void write(JsonWriter out, CampaignsSetContent200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignsSetContent200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CampaignsSetContent200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignsSetContent200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignsSetContent200Response
  * @throws IOException if the JSON string is invalid with respect to CampaignsSetContent200Response
  */
  public static CampaignsSetContent200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignsSetContent200Response.class);
  }

 /**
  * Convert an instance of CampaignsSetContent200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

