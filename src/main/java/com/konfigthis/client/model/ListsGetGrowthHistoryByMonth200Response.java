/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourceLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A summary of a specific list&#39;s growth activity for a specific month and year.
 */
@ApiModel(description = "A summary of a specific list's growth activity for a specific month and year.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ListsGetGrowthHistoryByMonth200Response {
  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_EXISTING = "existing";
  @SerializedName(SERIALIZED_NAME_EXISTING)
  private Integer existing;

  public static final String SERIALIZED_NAME_IMPORTS = "imports";
  @SerializedName(SERIALIZED_NAME_IMPORTS)
  private Integer imports;

  public static final String SERIALIZED_NAME_OPTINS = "optins";
  @SerializedName(SERIALIZED_NAME_OPTINS)
  private Integer optins;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private Integer subscribed;

  public static final String SERIALIZED_NAME_UNSUBSCRIBED = "unsubscribed";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED)
  private Integer unsubscribed;

  public static final String SERIALIZED_NAME_RECONFIRM = "reconfirm";
  @SerializedName(SERIALIZED_NAME_RECONFIRM)
  private Integer reconfirm;

  public static final String SERIALIZED_NAME_CLEANED = "cleaned";
  @SerializedName(SERIALIZED_NAME_CLEANED)
  private Integer cleaned;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Integer deleted;

  public static final String SERIALIZED_NAME_TRANSACTIONAL = "transactional";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL)
  private Integer transactional;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public ListsGetGrowthHistoryByMonth200Response() {
  }

  
  public ListsGetGrowthHistoryByMonth200Response(
     String listId, 
     String month, 
     Integer existing, 
     Integer imports, 
     Integer optins, 
     Integer subscribed, 
     Integer unsubscribed, 
     Integer reconfirm, 
     Integer cleaned, 
     Integer pending, 
     Integer deleted, 
     Integer transactional, 
     List<ResourceLink> links
  ) {
    this();
    this.listId = listId;
    this.month = month;
    this.existing = existing;
    this.imports = imports;
    this.optins = optins;
    this.subscribed = subscribed;
    this.unsubscribed = unsubscribed;
    this.reconfirm = reconfirm;
    this.cleaned = cleaned;
    this.pending = pending;
    this.deleted = deleted;
    this.transactional = transactional;
    this.links = links;
  }

   /**
   * The list id for the growth activity report.
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list id for the growth activity report.")

  public String getListId() {
    return listId;
  }




   /**
   * The month that the growth history is describing.
   * @return month
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The month that the growth history is describing.")

  public String getMonth() {
    return month;
  }




   /**
   * (deprecated)
   * @return existing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(deprecated)")

  public Integer getExisting() {
    return existing;
  }




   /**
   * (deprecated)
   * @return imports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(deprecated)")

  public Integer getImports() {
    return imports;
  }




   /**
   * (deprecated)
   * @return optins
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(deprecated)")

  public Integer getOptins() {
    return optins;
  }




   /**
   * Total subscribed members on the list at the end of the month.
   * @return subscribed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total subscribed members on the list at the end of the month.")

  public Integer getSubscribed() {
    return subscribed;
  }




   /**
   * Newly unsubscribed members on the list for a specific month.
   * @return unsubscribed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Newly unsubscribed members on the list for a specific month.")

  public Integer getUnsubscribed() {
    return unsubscribed;
  }




   /**
   * Newly reconfirmed members on the list for a specific month.
   * @return reconfirm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Newly reconfirmed members on the list for a specific month.")

  public Integer getReconfirm() {
    return reconfirm;
  }




   /**
   * Newly cleaned (hard-bounced) members on the list for a specific month.
   * @return cleaned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Newly cleaned (hard-bounced) members on the list for a specific month.")

  public Integer getCleaned() {
    return cleaned;
  }




   /**
   * Pending members on the list for a specific month.
   * @return pending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pending members on the list for a specific month.")

  public Integer getPending() {
    return pending;
  }




   /**
   * Newly deleted members on the list for a specific month.
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Newly deleted members on the list for a specific month.")

  public Integer getDeleted() {
    return deleted;
  }




   /**
   * Subscribers that have been sent transactional emails via Mandrill.
   * @return transactional
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscribers that have been sent transactional emails via Mandrill.")

  public Integer getTransactional() {
    return transactional;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListsGetGrowthHistoryByMonth200Response instance itself
   */
  public ListsGetGrowthHistoryByMonth200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsGetGrowthHistoryByMonth200Response listsGetGrowthHistoryByMonth200Response = (ListsGetGrowthHistoryByMonth200Response) o;
    return Objects.equals(this.listId, listsGetGrowthHistoryByMonth200Response.listId) &&
        Objects.equals(this.month, listsGetGrowthHistoryByMonth200Response.month) &&
        Objects.equals(this.existing, listsGetGrowthHistoryByMonth200Response.existing) &&
        Objects.equals(this.imports, listsGetGrowthHistoryByMonth200Response.imports) &&
        Objects.equals(this.optins, listsGetGrowthHistoryByMonth200Response.optins) &&
        Objects.equals(this.subscribed, listsGetGrowthHistoryByMonth200Response.subscribed) &&
        Objects.equals(this.unsubscribed, listsGetGrowthHistoryByMonth200Response.unsubscribed) &&
        Objects.equals(this.reconfirm, listsGetGrowthHistoryByMonth200Response.reconfirm) &&
        Objects.equals(this.cleaned, listsGetGrowthHistoryByMonth200Response.cleaned) &&
        Objects.equals(this.pending, listsGetGrowthHistoryByMonth200Response.pending) &&
        Objects.equals(this.deleted, listsGetGrowthHistoryByMonth200Response.deleted) &&
        Objects.equals(this.transactional, listsGetGrowthHistoryByMonth200Response.transactional) &&
        Objects.equals(this.links, listsGetGrowthHistoryByMonth200Response.links)&&
        Objects.equals(this.additionalProperties, listsGetGrowthHistoryByMonth200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listId, month, existing, imports, optins, subscribed, unsubscribed, reconfirm, cleaned, pending, deleted, transactional, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsGetGrowthHistoryByMonth200Response {\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    existing: ").append(toIndentedString(existing)).append("\n");
    sb.append("    imports: ").append(toIndentedString(imports)).append("\n");
    sb.append("    optins: ").append(toIndentedString(optins)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    reconfirm: ").append(toIndentedString(reconfirm)).append("\n");
    sb.append("    cleaned: ").append(toIndentedString(cleaned)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    transactional: ").append(toIndentedString(transactional)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("list_id");
    openapiFields.add("month");
    openapiFields.add("existing");
    openapiFields.add("imports");
    openapiFields.add("optins");
    openapiFields.add("subscribed");
    openapiFields.add("unsubscribed");
    openapiFields.add("reconfirm");
    openapiFields.add("cleaned");
    openapiFields.add("pending");
    openapiFields.add("deleted");
    openapiFields.add("transactional");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListsGetGrowthHistoryByMonth200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListsGetGrowthHistoryByMonth200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListsGetGrowthHistoryByMonth200Response is not found in the empty JSON string", ListsGetGrowthHistoryByMonth200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("list_id") != null && !jsonObj.get("list_id").isJsonNull()) && !jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListsGetGrowthHistoryByMonth200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListsGetGrowthHistoryByMonth200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListsGetGrowthHistoryByMonth200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListsGetGrowthHistoryByMonth200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ListsGetGrowthHistoryByMonth200Response>() {
           @Override
           public void write(JsonWriter out, ListsGetGrowthHistoryByMonth200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListsGetGrowthHistoryByMonth200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ListsGetGrowthHistoryByMonth200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListsGetGrowthHistoryByMonth200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListsGetGrowthHistoryByMonth200Response
  * @throws IOException if the JSON string is invalid with respect to ListsGetGrowthHistoryByMonth200Response
  */
  public static ListsGetGrowthHistoryByMonth200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListsGetGrowthHistoryByMonth200Response.class);
  }

 /**
  * Convert an instance of ListsGetGrowthHistoryByMonth200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

