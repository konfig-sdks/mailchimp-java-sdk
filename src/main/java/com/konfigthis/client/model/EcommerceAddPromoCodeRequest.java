/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about an Ecommerce Store&#39;s specific Promo Code.
 */
@ApiModel(description = "Information about an Ecommerce Store's specific Promo Code.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EcommerceAddPromoCodeRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_REDEMPTION_URL = "redemption_url";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_URL)
  private String redemptionUrl;

  public static final String SERIALIZED_NAME_USAGE_COUNT = "usage_count";
  @SerializedName(SERIALIZED_NAME_USAGE_COUNT)
  private Integer usageCount;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_CREATED_AT_FOREIGN = "created_at_foreign";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_FOREIGN)
  private OffsetDateTime createdAtForeign;

  public static final String SERIALIZED_NAME_UPDATED_AT_FOREIGN = "updated_at_foreign";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT_FOREIGN)
  private OffsetDateTime updatedAtForeign;

  public EcommerceAddPromoCodeRequest() {
  }

  public EcommerceAddPromoCodeRequest id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EcommerceAddPromoCodeRequest code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * The discount code. Restricted to UTF-8 characters with max length 50.
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "summersale", required = true, value = "The discount code. Restricted to UTF-8 characters with max length 50.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public EcommerceAddPromoCodeRequest redemptionUrl(String redemptionUrl) {
    
    
    
    
    this.redemptionUrl = redemptionUrl;
    return this;
  }

   /**
   * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
   * @return redemptionUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "A url that applies promo code directly at checkout or a url that points to sale page or store url", required = true, value = "The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.")

  public String getRedemptionUrl() {
    return redemptionUrl;
  }


  public void setRedemptionUrl(String redemptionUrl) {
    
    
    
    this.redemptionUrl = redemptionUrl;
  }


  public EcommerceAddPromoCodeRequest usageCount(Integer usageCount) {
    
    
    
    
    this.usageCount = usageCount;
    return this;
  }

   /**
   * Number of times promo code has been used.
   * @return usageCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of times promo code has been used.")

  public Integer getUsageCount() {
    return usageCount;
  }


  public void setUsageCount(Integer usageCount) {
    
    
    
    this.usageCount = usageCount;
  }


  public EcommerceAddPromoCodeRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the promo code is currently enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the promo code is currently enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public EcommerceAddPromoCodeRequest createdAtForeign(OffsetDateTime createdAtForeign) {
    
    
    
    
    this.createdAtForeign = createdAtForeign;
    return this;
  }

   /**
   * The date and time the promotion was created in ISO 8601 format.
   * @return createdAtForeign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the promotion was created in ISO 8601 format.")

  public OffsetDateTime getCreatedAtForeign() {
    return createdAtForeign;
  }


  public void setCreatedAtForeign(OffsetDateTime createdAtForeign) {
    
    
    
    this.createdAtForeign = createdAtForeign;
  }


  public EcommerceAddPromoCodeRequest updatedAtForeign(OffsetDateTime updatedAtForeign) {
    
    
    
    
    this.updatedAtForeign = updatedAtForeign;
    return this;
  }

   /**
   * The date and time the promotion was updated in ISO 8601 format.
   * @return updatedAtForeign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the promotion was updated in ISO 8601 format.")

  public OffsetDateTime getUpdatedAtForeign() {
    return updatedAtForeign;
  }


  public void setUpdatedAtForeign(OffsetDateTime updatedAtForeign) {
    
    
    
    this.updatedAtForeign = updatedAtForeign;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EcommerceAddPromoCodeRequest instance itself
   */
  public EcommerceAddPromoCodeRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommerceAddPromoCodeRequest ecommerceAddPromoCodeRequest = (EcommerceAddPromoCodeRequest) o;
    return Objects.equals(this.id, ecommerceAddPromoCodeRequest.id) &&
        Objects.equals(this.code, ecommerceAddPromoCodeRequest.code) &&
        Objects.equals(this.redemptionUrl, ecommerceAddPromoCodeRequest.redemptionUrl) &&
        Objects.equals(this.usageCount, ecommerceAddPromoCodeRequest.usageCount) &&
        Objects.equals(this.enabled, ecommerceAddPromoCodeRequest.enabled) &&
        Objects.equals(this.createdAtForeign, ecommerceAddPromoCodeRequest.createdAtForeign) &&
        Objects.equals(this.updatedAtForeign, ecommerceAddPromoCodeRequest.updatedAtForeign)&&
        Objects.equals(this.additionalProperties, ecommerceAddPromoCodeRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, redemptionUrl, usageCount, enabled, createdAtForeign, updatedAtForeign, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommerceAddPromoCodeRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    redemptionUrl: ").append(toIndentedString(redemptionUrl)).append("\n");
    sb.append("    usageCount: ").append(toIndentedString(usageCount)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    createdAtForeign: ").append(toIndentedString(createdAtForeign)).append("\n");
    sb.append("    updatedAtForeign: ").append(toIndentedString(updatedAtForeign)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("redemption_url");
    openapiFields.add("usage_count");
    openapiFields.add("enabled");
    openapiFields.add("created_at_foreign");
    openapiFields.add("updated_at_foreign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("redemption_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EcommerceAddPromoCodeRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EcommerceAddPromoCodeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcommerceAddPromoCodeRequest is not found in the empty JSON string", EcommerceAddPromoCodeRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EcommerceAddPromoCodeRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("redemption_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemption_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemption_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcommerceAddPromoCodeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcommerceAddPromoCodeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcommerceAddPromoCodeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcommerceAddPromoCodeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EcommerceAddPromoCodeRequest>() {
           @Override
           public void write(JsonWriter out, EcommerceAddPromoCodeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EcommerceAddPromoCodeRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EcommerceAddPromoCodeRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EcommerceAddPromoCodeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EcommerceAddPromoCodeRequest
  * @throws IOException if the JSON string is invalid with respect to EcommerceAddPromoCodeRequest
  */
  public static EcommerceAddPromoCodeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcommerceAddPromoCodeRequest.class);
  }

 /**
  * Convert an instance of EcommerceAddPromoCodeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

