/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ResourceLink;
import com.konfigthis.client.model.ScriptProperty2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about a specific connected site.
 */
@ApiModel(description = "Information about a specific connected site.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConnectedSitesCreateNewMailchimpSiteResponse {
  public static final String SERIALIZED_NAME_FOREIGN_ID = "foreign_id";
  @SerializedName(SERIALIZED_NAME_FOREIGN_ID)
  private String foreignId;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_SITE_SCRIPT = "site_script";
  @SerializedName(SERIALIZED_NAME_SITE_SCRIPT)
  private ScriptProperty2 siteScript;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public ConnectedSitesCreateNewMailchimpSiteResponse() {
  }

  
  public ConnectedSitesCreateNewMailchimpSiteResponse(
     String foreignId, 
     String storeId, 
     String platform, 
     String domain, 
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     List<ResourceLink> links
  ) {
    this();
    this.foreignId = foreignId;
    this.storeId = storeId;
    this.platform = platform;
    this.domain = domain;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.links = links;
  }

   /**
   * The unique identifier for the site.
   * @return foreignId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a180c384d7db88b if created in-app, MC001 if created via API", value = "The unique identifier for the site.")

  public String getForeignId() {
    return foreignId;
  }




   /**
   * The unique identifier for the ecommerce store that&#39;s associated with the connected site (if any). The store_id for a specific connected site can&#39;t change.
   * @return storeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MC001", value = "The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.")

  public String getStoreId() {
    return storeId;
  }




   /**
   * The platform of the connected site.
   * @return platform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "shopify, magento, bigcommerce, woocommerce", value = "The platform of the connected site.")

  public String getPlatform() {
    return platform;
  }




   /**
   * The connected site domain.
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example.myshopify.com", value = "The connected site domain.")

  public String getDomain() {
    return domain;
  }




  public ConnectedSitesCreateNewMailchimpSiteResponse siteScript(ScriptProperty2 siteScript) {
    
    
    
    
    this.siteScript = siteScript;
    return this;
  }

   /**
   * Get siteScript
   * @return siteScript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScriptProperty2 getSiteScript() {
    return siteScript;
  }


  public void setSiteScript(ScriptProperty2 siteScript) {
    
    
    
    this.siteScript = siteScript;
  }


   /**
   * The date and time the connected site was created in ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2015-07-15T19:28Z", value = "The date and time the connected site was created in ISO 8601 format.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * The date and time the connected site was last updated in ISO 8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2015-07-15T19:35Z", value = "The date and time the connected site was last updated in ISO 8601 format.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConnectedSitesCreateNewMailchimpSiteResponse instance itself
   */
  public ConnectedSitesCreateNewMailchimpSiteResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectedSitesCreateNewMailchimpSiteResponse connectedSitesCreateNewMailchimpSiteResponse = (ConnectedSitesCreateNewMailchimpSiteResponse) o;
    return Objects.equals(this.foreignId, connectedSitesCreateNewMailchimpSiteResponse.foreignId) &&
        Objects.equals(this.storeId, connectedSitesCreateNewMailchimpSiteResponse.storeId) &&
        Objects.equals(this.platform, connectedSitesCreateNewMailchimpSiteResponse.platform) &&
        Objects.equals(this.domain, connectedSitesCreateNewMailchimpSiteResponse.domain) &&
        Objects.equals(this.siteScript, connectedSitesCreateNewMailchimpSiteResponse.siteScript) &&
        Objects.equals(this.createdAt, connectedSitesCreateNewMailchimpSiteResponse.createdAt) &&
        Objects.equals(this.updatedAt, connectedSitesCreateNewMailchimpSiteResponse.updatedAt) &&
        Objects.equals(this.links, connectedSitesCreateNewMailchimpSiteResponse.links)&&
        Objects.equals(this.additionalProperties, connectedSitesCreateNewMailchimpSiteResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foreignId, storeId, platform, domain, siteScript, createdAt, updatedAt, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectedSitesCreateNewMailchimpSiteResponse {\n");
    sb.append("    foreignId: ").append(toIndentedString(foreignId)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    siteScript: ").append(toIndentedString(siteScript)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("foreign_id");
    openapiFields.add("store_id");
    openapiFields.add("platform");
    openapiFields.add("domain");
    openapiFields.add("site_script");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectedSitesCreateNewMailchimpSiteResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectedSitesCreateNewMailchimpSiteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectedSitesCreateNewMailchimpSiteResponse is not found in the empty JSON string", ConnectedSitesCreateNewMailchimpSiteResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("foreign_id") != null && !jsonObj.get("foreign_id").isJsonNull()) && !jsonObj.get("foreign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreign_id").toString()));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // validate the optional field `site_script`
      if (jsonObj.get("site_script") != null && !jsonObj.get("site_script").isJsonNull()) {
        ScriptProperty2.validateJsonObject(jsonObj.getAsJsonObject("site_script"));
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectedSitesCreateNewMailchimpSiteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectedSitesCreateNewMailchimpSiteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectedSitesCreateNewMailchimpSiteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectedSitesCreateNewMailchimpSiteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectedSitesCreateNewMailchimpSiteResponse>() {
           @Override
           public void write(JsonWriter out, ConnectedSitesCreateNewMailchimpSiteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectedSitesCreateNewMailchimpSiteResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConnectedSitesCreateNewMailchimpSiteResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectedSitesCreateNewMailchimpSiteResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectedSitesCreateNewMailchimpSiteResponse
  * @throws IOException if the JSON string is invalid with respect to ConnectedSitesCreateNewMailchimpSiteResponse
  */
  public static ConnectedSitesCreateNewMailchimpSiteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectedSitesCreateNewMailchimpSiteResponse.class);
  }

 /**
  * Convert an instance of ConnectedSitesCreateNewMailchimpSiteResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

