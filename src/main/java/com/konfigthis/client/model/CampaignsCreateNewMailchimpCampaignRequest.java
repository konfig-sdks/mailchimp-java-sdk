/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ABTestOptionsProperty;
import com.konfigthis.client.model.CampaignSettingsProperty1;
import com.konfigthis.client.model.CampaignSocialCardProperty;
import com.konfigthis.client.model.CampaignTrackingOptionsProperty;
import com.konfigthis.client.model.ListProperty1;
import com.konfigthis.client.model.RSSOptionsProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A summary of an individual campaign&#39;s settings and content.
 */
@ApiModel(description = "A summary of an individual campaign's settings and content.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CampaignsCreateNewMailchimpCampaignRequest {
  /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    REGULAR("regular"),
    
    PLAINTEXT("plaintext"),
    
    ABSPLIT("absplit"),
    
    RSS("rss"),
    
    VARIATE("variate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private ListProperty1 recipients;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private CampaignSettingsProperty1 settings;

  public static final String SERIALIZED_NAME_VARIATE_SETTINGS = "variate_settings";
  @SerializedName(SERIALIZED_NAME_VARIATE_SETTINGS)
  private ABTestOptionsProperty variateSettings;

  public static final String SERIALIZED_NAME_TRACKING = "tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private CampaignTrackingOptionsProperty tracking;

  public static final String SERIALIZED_NAME_RSS_OPTS = "rss_opts";
  @SerializedName(SERIALIZED_NAME_RSS_OPTS)
  private RSSOptionsProperty rssOpts;

  public static final String SERIALIZED_NAME_SOCIAL_CARD = "social_card";
  @SerializedName(SERIALIZED_NAME_SOCIAL_CARD)
  private CampaignSocialCardProperty socialCard;

  /**
   * How the campaign&#39;s content is put together. The old drag and drop editor uses &#39;template&#39; while the new editor uses &#39;multichannel&#39;. Defaults to template.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
 public enum ContentTypeEnum {
    TEMPLATE("template"),
    
    MULTICHANNEL("multichannel");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public CampaignsCreateNewMailchimpCampaignRequest() {
  }

  public CampaignsCreateNewMailchimpCampaignRequest type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CampaignsCreateNewMailchimpCampaignRequest recipients(ListProperty1 recipients) {
    
    
    
    
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ListProperty1 getRecipients() {
    return recipients;
  }


  public void setRecipients(ListProperty1 recipients) {
    
    
    
    this.recipients = recipients;
  }


  public CampaignsCreateNewMailchimpCampaignRequest settings(CampaignSettingsProperty1 settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignSettingsProperty1 getSettings() {
    return settings;
  }


  public void setSettings(CampaignSettingsProperty1 settings) {
    
    
    
    this.settings = settings;
  }


  public CampaignsCreateNewMailchimpCampaignRequest variateSettings(ABTestOptionsProperty variateSettings) {
    
    
    
    
    this.variateSettings = variateSettings;
    return this;
  }

   /**
   * Get variateSettings
   * @return variateSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ABTestOptionsProperty getVariateSettings() {
    return variateSettings;
  }


  public void setVariateSettings(ABTestOptionsProperty variateSettings) {
    
    
    
    this.variateSettings = variateSettings;
  }


  public CampaignsCreateNewMailchimpCampaignRequest tracking(CampaignTrackingOptionsProperty tracking) {
    
    
    
    
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignTrackingOptionsProperty getTracking() {
    return tracking;
  }


  public void setTracking(CampaignTrackingOptionsProperty tracking) {
    
    
    
    this.tracking = tracking;
  }


  public CampaignsCreateNewMailchimpCampaignRequest rssOpts(RSSOptionsProperty rssOpts) {
    
    
    
    
    this.rssOpts = rssOpts;
    return this;
  }

   /**
   * Get rssOpts
   * @return rssOpts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RSSOptionsProperty getRssOpts() {
    return rssOpts;
  }


  public void setRssOpts(RSSOptionsProperty rssOpts) {
    
    
    
    this.rssOpts = rssOpts;
  }


  public CampaignsCreateNewMailchimpCampaignRequest socialCard(CampaignSocialCardProperty socialCard) {
    
    
    
    
    this.socialCard = socialCard;
    return this;
  }

   /**
   * Get socialCard
   * @return socialCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CampaignSocialCardProperty getSocialCard() {
    return socialCard;
  }


  public void setSocialCard(CampaignSocialCardProperty socialCard) {
    
    
    
    this.socialCard = socialCard;
  }


  public CampaignsCreateNewMailchimpCampaignRequest contentType(ContentTypeEnum contentType) {
    
    
    
    
    this.contentType = contentType;
    return this;
  }

   /**
   * How the campaign&#39;s content is put together. The old drag and drop editor uses &#39;template&#39; while the new editor uses &#39;multichannel&#39;. Defaults to template.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TEMPLATE", value = "How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template.")

  public ContentTypeEnum getContentType() {
    return contentType;
  }


  public void setContentType(ContentTypeEnum contentType) {
    
    
    
    this.contentType = contentType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CampaignsCreateNewMailchimpCampaignRequest instance itself
   */
  public CampaignsCreateNewMailchimpCampaignRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignsCreateNewMailchimpCampaignRequest campaignsCreateNewMailchimpCampaignRequest = (CampaignsCreateNewMailchimpCampaignRequest) o;
    return Objects.equals(this.type, campaignsCreateNewMailchimpCampaignRequest.type) &&
        Objects.equals(this.recipients, campaignsCreateNewMailchimpCampaignRequest.recipients) &&
        Objects.equals(this.settings, campaignsCreateNewMailchimpCampaignRequest.settings) &&
        Objects.equals(this.variateSettings, campaignsCreateNewMailchimpCampaignRequest.variateSettings) &&
        Objects.equals(this.tracking, campaignsCreateNewMailchimpCampaignRequest.tracking) &&
        Objects.equals(this.rssOpts, campaignsCreateNewMailchimpCampaignRequest.rssOpts) &&
        Objects.equals(this.socialCard, campaignsCreateNewMailchimpCampaignRequest.socialCard) &&
        Objects.equals(this.contentType, campaignsCreateNewMailchimpCampaignRequest.contentType)&&
        Objects.equals(this.additionalProperties, campaignsCreateNewMailchimpCampaignRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, recipients, settings, variateSettings, tracking, rssOpts, socialCard, contentType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignsCreateNewMailchimpCampaignRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    variateSettings: ").append(toIndentedString(variateSettings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    rssOpts: ").append(toIndentedString(rssOpts)).append("\n");
    sb.append("    socialCard: ").append(toIndentedString(socialCard)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("recipients");
    openapiFields.add("settings");
    openapiFields.add("variate_settings");
    openapiFields.add("tracking");
    openapiFields.add("rss_opts");
    openapiFields.add("social_card");
    openapiFields.add("content_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignsCreateNewMailchimpCampaignRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignsCreateNewMailchimpCampaignRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignsCreateNewMailchimpCampaignRequest is not found in the empty JSON string", CampaignsCreateNewMailchimpCampaignRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignsCreateNewMailchimpCampaignRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `recipients`
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        ListProperty1.validateJsonObject(jsonObj.getAsJsonObject("recipients"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        CampaignSettingsProperty1.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      }
      // validate the optional field `variate_settings`
      if (jsonObj.get("variate_settings") != null && !jsonObj.get("variate_settings").isJsonNull()) {
        ABTestOptionsProperty.validateJsonObject(jsonObj.getAsJsonObject("variate_settings"));
      }
      // validate the optional field `tracking`
      if (jsonObj.get("tracking") != null && !jsonObj.get("tracking").isJsonNull()) {
        CampaignTrackingOptionsProperty.validateJsonObject(jsonObj.getAsJsonObject("tracking"));
      }
      // validate the optional field `rss_opts`
      if (jsonObj.get("rss_opts") != null && !jsonObj.get("rss_opts").isJsonNull()) {
        RSSOptionsProperty.validateJsonObject(jsonObj.getAsJsonObject("rss_opts"));
      }
      // validate the optional field `social_card`
      if (jsonObj.get("social_card") != null && !jsonObj.get("social_card").isJsonNull()) {
        CampaignSocialCardProperty.validateJsonObject(jsonObj.getAsJsonObject("social_card"));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignsCreateNewMailchimpCampaignRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignsCreateNewMailchimpCampaignRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignsCreateNewMailchimpCampaignRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignsCreateNewMailchimpCampaignRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignsCreateNewMailchimpCampaignRequest>() {
           @Override
           public void write(JsonWriter out, CampaignsCreateNewMailchimpCampaignRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignsCreateNewMailchimpCampaignRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CampaignsCreateNewMailchimpCampaignRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignsCreateNewMailchimpCampaignRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignsCreateNewMailchimpCampaignRequest
  * @throws IOException if the JSON string is invalid with respect to CampaignsCreateNewMailchimpCampaignRequest
  */
  public static CampaignsCreateNewMailchimpCampaignRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignsCreateNewMailchimpCampaignRequest.class);
  }

 /**
  * Convert an instance of CampaignsCreateNewMailchimpCampaignRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

