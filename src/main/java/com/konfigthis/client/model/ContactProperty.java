/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the contact.
 */
@ApiModel(description = "Information about the contact.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContactProperty {
  public static final String SERIALIZED_NAME_EMAIL_ID = "email_id";
  @SerializedName(SERIALIZED_NAME_EMAIL_ID)
  private String emailId;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contact_id";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  /**
   * The contact&#39;s current status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    SUBSCRIBED("Subscribed"),
    
    UNSUBSCRIBED("Unsubscribed"),
    
    NON_SUBSCRIBED("Non-Subscribed"),
    
    CLEANED("Cleaned"),
    
    ARCHIVED("Archived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_CONSENTS_TO_ONE_TO_ONE_MESSAGING = "consents_to_one_to_one_messaging";
  @SerializedName(SERIALIZED_NAME_CONSENTS_TO_ONE_TO_ONE_MESSAGING)
  private Boolean consentsToOneToOneMessaging;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public ContactProperty() {
  }

  
  public ContactProperty(
     String emailId, 
     String contactId, 
     StatusEnum status, 
     String email, 
     String phone, 
     String fullName, 
     Boolean consentsToOneToOneMessaging, 
     String avatarUrl
  ) {
    this();
    this.emailId = emailId;
    this.contactId = contactId;
    this.status = status;
    this.email = email;
    this.phone = phone;
    this.fullName = fullName;
    this.consentsToOneToOneMessaging = consentsToOneToOneMessaging;
    this.avatarUrl = avatarUrl;
  }

   /**
   * The MD5 hash of the lowercase version of the list member&#39;s email address.
   * @return emailId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The MD5 hash of the lowercase version of the list member's email address.")

  public String getEmailId() {
    return emailId;
  }




   /**
   * The ID of this contact.
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of this contact.")

  public String getContactId() {
    return contactId;
  }




   /**
   * The contact&#39;s current status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact's current status.")

  public StatusEnum getStatus() {
    return status;
  }




   /**
   * The contact&#39;s email address.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact's email address.")

  public String getEmail() {
    return email;
  }




   /**
   * The contact&#39;s sms phone number.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact's sms phone number.")

  public String getPhone() {
    return phone;
  }




   /**
   * The contact&#39;s full name.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact's full name.")

  public String getFullName() {
    return fullName;
  }




   /**
   * Indicates whether a contact consents to 1:1 messaging.
   * @return consentsToOneToOneMessaging
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether a contact consents to 1:1 messaging.")

  public Boolean getConsentsToOneToOneMessaging() {
    return consentsToOneToOneMessaging;
  }




   /**
   * URL for the contact&#39;s avatar or profile image.
   * @return avatarUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL for the contact's avatar or profile image.")

  public String getAvatarUrl() {
    return avatarUrl;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContactProperty instance itself
   */
  public ContactProperty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactProperty contactProperty = (ContactProperty) o;
    return Objects.equals(this.emailId, contactProperty.emailId) &&
        Objects.equals(this.contactId, contactProperty.contactId) &&
        Objects.equals(this.status, contactProperty.status) &&
        Objects.equals(this.email, contactProperty.email) &&
        Objects.equals(this.phone, contactProperty.phone) &&
        Objects.equals(this.fullName, contactProperty.fullName) &&
        Objects.equals(this.consentsToOneToOneMessaging, contactProperty.consentsToOneToOneMessaging) &&
        Objects.equals(this.avatarUrl, contactProperty.avatarUrl)&&
        Objects.equals(this.additionalProperties, contactProperty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailId, contactId, status, email, phone, fullName, consentsToOneToOneMessaging, avatarUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactProperty {\n");
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    consentsToOneToOneMessaging: ").append(toIndentedString(consentsToOneToOneMessaging)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email_id");
    openapiFields.add("contact_id");
    openapiFields.add("status");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("full_name");
    openapiFields.add("consents_to_one_to_one_messaging");
    openapiFields.add("avatar_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContactProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactProperty is not found in the empty JSON string", ContactProperty.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("email_id") != null && !jsonObj.get("email_id").isJsonNull()) && !jsonObj.get("email_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_id").toString()));
      }
      if ((jsonObj.get("contact_id") != null && !jsonObj.get("contact_id").isJsonNull()) && !jsonObj.get("contact_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactProperty>() {
           @Override
           public void write(JsonWriter out, ContactProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContactProperty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactProperty
  * @throws IOException if the JSON string is invalid with respect to ContactProperty
  */
  public static ContactProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactProperty.class);
  }

 /**
  * Convert an instance of ContactProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

