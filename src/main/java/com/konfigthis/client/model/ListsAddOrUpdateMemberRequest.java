/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LocationProperty;
import com.konfigthis.client.model.MarketingPermission;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed.
 */
@ApiModel(description = "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ListsAddOrUpdateMemberRequest {
  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  /**
   * Subscriber&#39;s status. This value is required only if the email address is not already present on the list.
   */
  @JsonAdapter(StatusIfNewEnum.Adapter.class)
 public enum StatusIfNewEnum {
    SUBSCRIBED("subscribed"),
    
    UNSUBSCRIBED("unsubscribed"),
    
    CLEANED("cleaned"),
    
    PENDING("pending"),
    
    TRANSACTIONAL("transactional");

    private String value;

    StatusIfNewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusIfNewEnum fromValue(String value) {
      for (StatusIfNewEnum b : StatusIfNewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusIfNewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusIfNewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusIfNewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusIfNewEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS_IF_NEW = "status_if_new";
  @SerializedName(SERIALIZED_NAME_STATUS_IF_NEW)
  private StatusIfNewEnum statusIfNew;

  public static final String SERIALIZED_NAME_EMAIL_TYPE = "email_type";
  @SerializedName(SERIALIZED_NAME_EMAIL_TYPE)
  private String emailType;

  /**
   * Subscriber&#39;s current status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    SUBSCRIBED("subscribed"),
    
    UNSUBSCRIBED("unsubscribed"),
    
    CLEANED("cleaned"),
    
    PENDING("pending"),
    
    TRANSACTIONAL("transactional");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_MERGE_FIELDS = "merge_fields";
  @SerializedName(SERIALIZED_NAME_MERGE_FIELDS)
  private Map<String, Object> mergeFields = null;

  public static final String SERIALIZED_NAME_INTERESTS = "interests";
  @SerializedName(SERIALIZED_NAME_INTERESTS)
  private Map<String, Boolean> interests = null;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_VIP = "vip";
  @SerializedName(SERIALIZED_NAME_VIP)
  private Boolean vip;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationProperty location;

  public static final String SERIALIZED_NAME_MARKETING_PERMISSIONS = "marketing_permissions";
  @SerializedName(SERIALIZED_NAME_MARKETING_PERMISSIONS)
  private List<MarketingPermission> marketingPermissions = null;

  public static final String SERIALIZED_NAME_IP_SIGNUP = "ip_signup";
  @SerializedName(SERIALIZED_NAME_IP_SIGNUP)
  private String ipSignup;

  public static final String SERIALIZED_NAME_TIMESTAMP_SIGNUP = "timestamp_signup";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_SIGNUP)
  private OffsetDateTime timestampSignup;

  public static final String SERIALIZED_NAME_IP_OPT = "ip_opt";
  @SerializedName(SERIALIZED_NAME_IP_OPT)
  private String ipOpt;

  public static final String SERIALIZED_NAME_TIMESTAMP_OPT = "timestamp_opt";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_OPT)
  private OffsetDateTime timestampOpt;

  public ListsAddOrUpdateMemberRequest() {
  }

  public ListsAddOrUpdateMemberRequest emailAddress(String emailAddress) {
    
    
    
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Email address for a subscriber. This value is required only if the email address is not already present on the list.
   * @return emailAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Email address for a subscriber. This value is required only if the email address is not already present on the list.")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    
    
    
    this.emailAddress = emailAddress;
  }


  public ListsAddOrUpdateMemberRequest statusIfNew(StatusIfNewEnum statusIfNew) {
    
    
    
    
    this.statusIfNew = statusIfNew;
    return this;
  }

   /**
   * Subscriber&#39;s status. This value is required only if the email address is not already present on the list.
   * @return statusIfNew
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Subscriber's status. This value is required only if the email address is not already present on the list.")

  public StatusIfNewEnum getStatusIfNew() {
    return statusIfNew;
  }


  public void setStatusIfNew(StatusIfNewEnum statusIfNew) {
    
    
    
    this.statusIfNew = statusIfNew;
  }


  public ListsAddOrUpdateMemberRequest emailType(String emailType) {
    
    
    
    
    this.emailType = emailType;
    return this;
  }

   /**
   * Type of email this member asked to get (&#39;html&#39; or &#39;text&#39;).
   * @return emailType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of email this member asked to get ('html' or 'text').")

  public String getEmailType() {
    return emailType;
  }


  public void setEmailType(String emailType) {
    
    
    
    this.emailType = emailType;
  }


  public ListsAddOrUpdateMemberRequest status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Subscriber&#39;s current status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscriber's current status.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ListsAddOrUpdateMemberRequest mergeFields(Map<String, Object> mergeFields) {
    
    
    
    
    this.mergeFields = mergeFields;
    return this;
  }

  public ListsAddOrUpdateMemberRequest putMergeFieldsItem(String key, Object mergeFieldsItem) {
    if (this.mergeFields == null) {
      this.mergeFields = new HashMap<>();
    }
    this.mergeFields.put(key, mergeFieldsItem);
    return this;
  }

   /**
   * A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
   * @return mergeFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.")

  public Map<String, Object> getMergeFields() {
    return mergeFields;
  }


  public void setMergeFields(Map<String, Object> mergeFields) {
    
    
    
    this.mergeFields = mergeFields;
  }


  public ListsAddOrUpdateMemberRequest interests(Map<String, Boolean> interests) {
    
    
    
    
    this.interests = interests;
    return this;
  }

  public ListsAddOrUpdateMemberRequest putInterestsItem(String key, Boolean interestsItem) {
    if (this.interests == null) {
      this.interests = new HashMap<>();
    }
    this.interests.put(key, interestsItem);
    return this;
  }

   /**
   * The key of this object&#39;s properties is the ID of the interest in question.
   * @return interests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of this object's properties is the ID of the interest in question.")

  public Map<String, Boolean> getInterests() {
    return interests;
  }


  public void setInterests(Map<String, Boolean> interests) {
    
    
    
    this.interests = interests;
  }


  public ListsAddOrUpdateMemberRequest language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * If set/detected, the [subscriber&#39;s language](https://mailchimp.com/help/view-and-edit-contact-languages/).
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public ListsAddOrUpdateMemberRequest vip(Boolean vip) {
    
    
    
    
    this.vip = vip;
    return this;
  }

   /**
   * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
   * @return vip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.")

  public Boolean getVip() {
    return vip;
  }


  public void setVip(Boolean vip) {
    
    
    
    this.vip = vip;
  }


  public ListsAddOrUpdateMemberRequest location(LocationProperty location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocationProperty getLocation() {
    return location;
  }


  public void setLocation(LocationProperty location) {
    
    
    
    this.location = location;
  }


  public ListsAddOrUpdateMemberRequest marketingPermissions(List<MarketingPermission> marketingPermissions) {
    
    
    
    
    this.marketingPermissions = marketingPermissions;
    return this;
  }

  public ListsAddOrUpdateMemberRequest addMarketingPermissionsItem(MarketingPermission marketingPermissionsItem) {
    if (this.marketingPermissions == null) {
      this.marketingPermissions = new ArrayList<>();
    }
    this.marketingPermissions.add(marketingPermissionsItem);
    return this;
  }

   /**
   * The marketing permissions for the subscriber.
   * @return marketingPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The marketing permissions for the subscriber.")

  public List<MarketingPermission> getMarketingPermissions() {
    return marketingPermissions;
  }


  public void setMarketingPermissions(List<MarketingPermission> marketingPermissions) {
    
    
    
    this.marketingPermissions = marketingPermissions;
  }


  public ListsAddOrUpdateMemberRequest ipSignup(String ipSignup) {
    
    
    
    
    this.ipSignup = ipSignup;
    return this;
  }

   /**
   * IP address the subscriber signed up from.
   * @return ipSignup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP address the subscriber signed up from.")

  public String getIpSignup() {
    return ipSignup;
  }


  public void setIpSignup(String ipSignup) {
    
    
    
    this.ipSignup = ipSignup;
  }


  public ListsAddOrUpdateMemberRequest timestampSignup(OffsetDateTime timestampSignup) {
    
    
    
    
    this.timestampSignup = timestampSignup;
    return this;
  }

   /**
   * The date and time the subscriber signed up for the list in ISO 8601 format.
   * @return timestampSignup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the subscriber signed up for the list in ISO 8601 format.")

  public OffsetDateTime getTimestampSignup() {
    return timestampSignup;
  }


  public void setTimestampSignup(OffsetDateTime timestampSignup) {
    
    
    
    this.timestampSignup = timestampSignup;
  }


  public ListsAddOrUpdateMemberRequest ipOpt(String ipOpt) {
    
    
    
    
    this.ipOpt = ipOpt;
    return this;
  }

   /**
   * The IP address the subscriber used to confirm their opt-in status.
   * @return ipOpt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IP address the subscriber used to confirm their opt-in status.")

  public String getIpOpt() {
    return ipOpt;
  }


  public void setIpOpt(String ipOpt) {
    
    
    
    this.ipOpt = ipOpt;
  }


  public ListsAddOrUpdateMemberRequest timestampOpt(OffsetDateTime timestampOpt) {
    
    
    
    
    this.timestampOpt = timestampOpt;
    return this;
  }

   /**
   * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
   * @return timestampOpt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the subscriber confirmed their opt-in status in ISO 8601 format.")

  public OffsetDateTime getTimestampOpt() {
    return timestampOpt;
  }


  public void setTimestampOpt(OffsetDateTime timestampOpt) {
    
    
    
    this.timestampOpt = timestampOpt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListsAddOrUpdateMemberRequest instance itself
   */
  public ListsAddOrUpdateMemberRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsAddOrUpdateMemberRequest listsAddOrUpdateMemberRequest = (ListsAddOrUpdateMemberRequest) o;
    return Objects.equals(this.emailAddress, listsAddOrUpdateMemberRequest.emailAddress) &&
        Objects.equals(this.statusIfNew, listsAddOrUpdateMemberRequest.statusIfNew) &&
        Objects.equals(this.emailType, listsAddOrUpdateMemberRequest.emailType) &&
        Objects.equals(this.status, listsAddOrUpdateMemberRequest.status) &&
        Objects.equals(this.mergeFields, listsAddOrUpdateMemberRequest.mergeFields) &&
        Objects.equals(this.interests, listsAddOrUpdateMemberRequest.interests) &&
        Objects.equals(this.language, listsAddOrUpdateMemberRequest.language) &&
        Objects.equals(this.vip, listsAddOrUpdateMemberRequest.vip) &&
        Objects.equals(this.location, listsAddOrUpdateMemberRequest.location) &&
        Objects.equals(this.marketingPermissions, listsAddOrUpdateMemberRequest.marketingPermissions) &&
        Objects.equals(this.ipSignup, listsAddOrUpdateMemberRequest.ipSignup) &&
        Objects.equals(this.timestampSignup, listsAddOrUpdateMemberRequest.timestampSignup) &&
        Objects.equals(this.ipOpt, listsAddOrUpdateMemberRequest.ipOpt) &&
        Objects.equals(this.timestampOpt, listsAddOrUpdateMemberRequest.timestampOpt)&&
        Objects.equals(this.additionalProperties, listsAddOrUpdateMemberRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, statusIfNew, emailType, status, mergeFields, interests, language, vip, location, marketingPermissions, ipSignup, timestampSignup, ipOpt, timestampOpt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsAddOrUpdateMemberRequest {\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    statusIfNew: ").append(toIndentedString(statusIfNew)).append("\n");
    sb.append("    emailType: ").append(toIndentedString(emailType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    mergeFields: ").append(toIndentedString(mergeFields)).append("\n");
    sb.append("    interests: ").append(toIndentedString(interests)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    marketingPermissions: ").append(toIndentedString(marketingPermissions)).append("\n");
    sb.append("    ipSignup: ").append(toIndentedString(ipSignup)).append("\n");
    sb.append("    timestampSignup: ").append(toIndentedString(timestampSignup)).append("\n");
    sb.append("    ipOpt: ").append(toIndentedString(ipOpt)).append("\n");
    sb.append("    timestampOpt: ").append(toIndentedString(timestampOpt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email_address");
    openapiFields.add("status_if_new");
    openapiFields.add("email_type");
    openapiFields.add("status");
    openapiFields.add("merge_fields");
    openapiFields.add("interests");
    openapiFields.add("language");
    openapiFields.add("vip");
    openapiFields.add("location");
    openapiFields.add("marketing_permissions");
    openapiFields.add("ip_signup");
    openapiFields.add("timestamp_signup");
    openapiFields.add("ip_opt");
    openapiFields.add("timestamp_opt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email_address");
    openapiRequiredFields.add("status_if_new");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListsAddOrUpdateMemberRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListsAddOrUpdateMemberRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListsAddOrUpdateMemberRequest is not found in the empty JSON string", ListsAddOrUpdateMemberRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListsAddOrUpdateMemberRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      if (!jsonObj.get("status_if_new").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_if_new` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_if_new").toString()));
      }
      if ((jsonObj.get("email_type") != null && !jsonObj.get("email_type").isJsonNull()) && !jsonObj.get("email_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LocationProperty.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if (jsonObj.get("marketing_permissions") != null && !jsonObj.get("marketing_permissions").isJsonNull()) {
        JsonArray jsonArraymarketingPermissions = jsonObj.getAsJsonArray("marketing_permissions");
        if (jsonArraymarketingPermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("marketing_permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `marketing_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("marketing_permissions").toString()));
          }

          // validate the optional field `marketing_permissions` (array)
          for (int i = 0; i < jsonArraymarketingPermissions.size(); i++) {
            MarketingPermission.validateJsonObject(jsonArraymarketingPermissions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("ip_signup") != null && !jsonObj.get("ip_signup").isJsonNull()) && !jsonObj.get("ip_signup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_signup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_signup").toString()));
      }
      if ((jsonObj.get("ip_opt") != null && !jsonObj.get("ip_opt").isJsonNull()) && !jsonObj.get("ip_opt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_opt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_opt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListsAddOrUpdateMemberRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListsAddOrUpdateMemberRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListsAddOrUpdateMemberRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListsAddOrUpdateMemberRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListsAddOrUpdateMemberRequest>() {
           @Override
           public void write(JsonWriter out, ListsAddOrUpdateMemberRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListsAddOrUpdateMemberRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ListsAddOrUpdateMemberRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListsAddOrUpdateMemberRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListsAddOrUpdateMemberRequest
  * @throws IOException if the JSON string is invalid with respect to ListsAddOrUpdateMemberRequest
  */
  public static ListsAddOrUpdateMemberRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListsAddOrUpdateMemberRequest.class);
  }

 /**
  * Convert an instance of ListsAddOrUpdateMemberRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

