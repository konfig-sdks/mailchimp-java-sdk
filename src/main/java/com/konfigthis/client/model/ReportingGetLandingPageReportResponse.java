/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportingGetLandingPageReportResponseEcommerce;
import com.konfigthis.client.model.ReportingGetLandingPageReportResponseTimeseries;
import com.konfigthis.client.model.ResourceLink;
import com.konfigthis.client.model.Tag;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A summary of an individual landing page&#39;s settings and content.
 */
@ApiModel(description = "A summary of an individual landing page's settings and content.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportingGetLandingPageReportResponse {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_UNPUBLISHED_AT = "unpublished_at";
  @SerializedName(SERIALIZED_NAME_UNPUBLISHED_AT)
  private OffsetDateTime unpublishedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_VISITS = "visits";
  @SerializedName(SERIALIZED_NAME_VISITS)
  private Integer visits;

  public static final String SERIALIZED_NAME_UNIQUE_VISITS = "unique_visits";
  @SerializedName(SERIALIZED_NAME_UNIQUE_VISITS)
  private Integer uniqueVisits;

  public static final String SERIALIZED_NAME_SUBSCRIBES = "subscribes";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBES)
  private Integer subscribes;

  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private Integer clicks;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversion_rate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private Double conversionRate;

  public static final String SERIALIZED_NAME_TIMESERIES = "timeseries";
  @SerializedName(SERIALIZED_NAME_TIMESERIES)
  private ReportingGetLandingPageReportResponseTimeseries timeseries;

  public static final String SERIALIZED_NAME_ECOMMERCE = "ecommerce";
  @SerializedName(SERIALIZED_NAME_ECOMMERCE)
  private ReportingGetLandingPageReportResponseEcommerce ecommerce;

  public static final String SERIALIZED_NAME_WEB_ID = "web_id";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private Integer webId;

  public static final String SERIALIZED_NAME_LIST_NAME = "list_name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  public static final String SERIALIZED_NAME_SIGNUP_TAGS = "signup_tags";
  @SerializedName(SERIALIZED_NAME_SIGNUP_TAGS)
  private List<Tag> signupTags = null;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ResourceLink> links = null;

  public ReportingGetLandingPageReportResponse() {
  }

  
  public ReportingGetLandingPageReportResponse(
     String title, 
     String id, 
     String name, 
     String url, 
     OffsetDateTime publishedAt, 
     OffsetDateTime unpublishedAt, 
     String status, 
     String listId, 
     Integer visits, 
     Integer uniqueVisits, 
     Integer subscribes, 
     Integer clicks, 
     Double conversionRate, 
     Integer webId, 
     String listName, 
     List<Tag> signupTags, 
     List<ResourceLink> links
  ) {
    this();
    this.title = title;
    this.id = id;
    this.name = name;
    this.url = url;
    this.publishedAt = publishedAt;
    this.unpublishedAt = unpublishedAt;
    this.status = status;
    this.listId = listId;
    this.visits = visits;
    this.uniqueVisits = uniqueVisits;
    this.subscribes = subscribes;
    this.clicks = clicks;
    this.conversionRate = conversionRate;
    this.webId = webId;
    this.listName = listName;
    this.signupTags = signupTags;
    this.links = links;
  }

   /**
   * The name of the landing page the user&#39;s customers will see.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the landing page the user's customers will see.")

  public String getTitle() {
    return title;
  }




   /**
   * A string that uniquely identifies this landing page.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00dfc2e1f0", value = "A string that uniquely identifies this landing page.")

  public String getId() {
    return id;
  }




   /**
   * The name of this landing page the user will see.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of this landing page the user will see.")

  public String getName() {
    return name;
  }




   /**
   * The landing page url.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The landing page url.")

  public String getUrl() {
    return url;
  }




   /**
   * The time this landing page was published.
   * @return publishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this landing page was published.")

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }




   /**
   * The time this landing page was unpublished.
   * @return unpublishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this landing page was unpublished.")

  public OffsetDateTime getUnpublishedAt() {
    return unpublishedAt;
  }




   /**
   * The status of the landing page.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the landing page.")

  public String getStatus() {
    return status;
  }




   /**
   * The list id connected to this landing page.
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list id connected to this landing page.")

  public String getListId() {
    return listId;
  }




   /**
   * The number of visits to this landing pages.
   * @return visits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of visits to this landing pages.")

  public Integer getVisits() {
    return visits;
  }




   /**
   * The number of unique visits to this landing pages.
   * @return uniqueVisits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of unique visits to this landing pages.")

  public Integer getUniqueVisits() {
    return uniqueVisits;
  }




   /**
   * The number of subscribes to this landing pages.
   * @return subscribes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of subscribes to this landing pages.")

  public Integer getSubscribes() {
    return subscribes;
  }




   /**
   * The number of clicks to this landing pages.
   * @return clicks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of clicks to this landing pages.")

  public Integer getClicks() {
    return clicks;
  }




   /**
   * The percentage of people who visited your landing page and were added to your list.
   * @return conversionRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of people who visited your landing page and were added to your list.")

  public Double getConversionRate() {
    return conversionRate;
  }




  public ReportingGetLandingPageReportResponse timeseries(ReportingGetLandingPageReportResponseTimeseries timeseries) {
    
    
    
    
    this.timeseries = timeseries;
    return this;
  }

   /**
   * Get timeseries
   * @return timeseries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportingGetLandingPageReportResponseTimeseries getTimeseries() {
    return timeseries;
  }


  public void setTimeseries(ReportingGetLandingPageReportResponseTimeseries timeseries) {
    
    
    
    this.timeseries = timeseries;
  }


  public ReportingGetLandingPageReportResponse ecommerce(ReportingGetLandingPageReportResponseEcommerce ecommerce) {
    
    
    
    
    this.ecommerce = ecommerce;
    return this;
  }

   /**
   * Get ecommerce
   * @return ecommerce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportingGetLandingPageReportResponseEcommerce getEcommerce() {
    return ecommerce;
  }


  public void setEcommerce(ReportingGetLandingPageReportResponseEcommerce ecommerce) {
    
    
    
    this.ecommerce = ecommerce;
  }


   /**
   * The ID used in the Mailchimp web application.
   * @return webId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "33345484", value = "The ID used in the Mailchimp web application.")

  public Integer getWebId() {
    return webId;
  }




   /**
   * List Name
   * @return listName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Test List", value = "List Name")

  public String getListName() {
    return listName;
  }




   /**
   * A list of tags associated to the landing page.
   * @return signupTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of tags associated to the landing page.")

  public List<Tag> getSignupTags() {
    return signupTags;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of link types and descriptions for the API schema documents.")

  public List<ResourceLink> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportingGetLandingPageReportResponse instance itself
   */
  public ReportingGetLandingPageReportResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportingGetLandingPageReportResponse reportingGetLandingPageReportResponse = (ReportingGetLandingPageReportResponse) o;
    return Objects.equals(this.title, reportingGetLandingPageReportResponse.title) &&
        Objects.equals(this.id, reportingGetLandingPageReportResponse.id) &&
        Objects.equals(this.name, reportingGetLandingPageReportResponse.name) &&
        Objects.equals(this.url, reportingGetLandingPageReportResponse.url) &&
        Objects.equals(this.publishedAt, reportingGetLandingPageReportResponse.publishedAt) &&
        Objects.equals(this.unpublishedAt, reportingGetLandingPageReportResponse.unpublishedAt) &&
        Objects.equals(this.status, reportingGetLandingPageReportResponse.status) &&
        Objects.equals(this.listId, reportingGetLandingPageReportResponse.listId) &&
        Objects.equals(this.visits, reportingGetLandingPageReportResponse.visits) &&
        Objects.equals(this.uniqueVisits, reportingGetLandingPageReportResponse.uniqueVisits) &&
        Objects.equals(this.subscribes, reportingGetLandingPageReportResponse.subscribes) &&
        Objects.equals(this.clicks, reportingGetLandingPageReportResponse.clicks) &&
        Objects.equals(this.conversionRate, reportingGetLandingPageReportResponse.conversionRate) &&
        Objects.equals(this.timeseries, reportingGetLandingPageReportResponse.timeseries) &&
        Objects.equals(this.ecommerce, reportingGetLandingPageReportResponse.ecommerce) &&
        Objects.equals(this.webId, reportingGetLandingPageReportResponse.webId) &&
        Objects.equals(this.listName, reportingGetLandingPageReportResponse.listName) &&
        Objects.equals(this.signupTags, reportingGetLandingPageReportResponse.signupTags) &&
        Objects.equals(this.links, reportingGetLandingPageReportResponse.links)&&
        Objects.equals(this.additionalProperties, reportingGetLandingPageReportResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, name, url, publishedAt, unpublishedAt, status, listId, visits, uniqueVisits, subscribes, clicks, conversionRate, timeseries, ecommerce, webId, listName, signupTags, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportingGetLandingPageReportResponse {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    unpublishedAt: ").append(toIndentedString(unpublishedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    visits: ").append(toIndentedString(visits)).append("\n");
    sb.append("    uniqueVisits: ").append(toIndentedString(uniqueVisits)).append("\n");
    sb.append("    subscribes: ").append(toIndentedString(subscribes)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    timeseries: ").append(toIndentedString(timeseries)).append("\n");
    sb.append("    ecommerce: ").append(toIndentedString(ecommerce)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    signupTags: ").append(toIndentedString(signupTags)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("published_at");
    openapiFields.add("unpublished_at");
    openapiFields.add("status");
    openapiFields.add("list_id");
    openapiFields.add("visits");
    openapiFields.add("unique_visits");
    openapiFields.add("subscribes");
    openapiFields.add("clicks");
    openapiFields.add("conversion_rate");
    openapiFields.add("timeseries");
    openapiFields.add("ecommerce");
    openapiFields.add("web_id");
    openapiFields.add("list_name");
    openapiFields.add("signup_tags");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportingGetLandingPageReportResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportingGetLandingPageReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportingGetLandingPageReportResponse is not found in the empty JSON string", ReportingGetLandingPageReportResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("list_id") != null && !jsonObj.get("list_id").isJsonNull()) && !jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      // validate the optional field `timeseries`
      if (jsonObj.get("timeseries") != null && !jsonObj.get("timeseries").isJsonNull()) {
        ReportingGetLandingPageReportResponseTimeseries.validateJsonObject(jsonObj.getAsJsonObject("timeseries"));
      }
      // validate the optional field `ecommerce`
      if (jsonObj.get("ecommerce") != null && !jsonObj.get("ecommerce").isJsonNull()) {
        ReportingGetLandingPageReportResponseEcommerce.validateJsonObject(jsonObj.getAsJsonObject("ecommerce"));
      }
      if ((jsonObj.get("list_name") != null && !jsonObj.get("list_name").isJsonNull()) && !jsonObj.get("list_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name").toString()));
      }
      if (jsonObj.get("signup_tags") != null && !jsonObj.get("signup_tags").isJsonNull()) {
        JsonArray jsonArraysignupTags = jsonObj.getAsJsonArray("signup_tags");
        if (jsonArraysignupTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signup_tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signup_tags` to be an array in the JSON string but got `%s`", jsonObj.get("signup_tags").toString()));
          }

          // validate the optional field `signup_tags` (array)
          for (int i = 0; i < jsonArraysignupTags.size(); i++) {
            Tag.validateJsonObject(jsonArraysignupTags.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("_links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_links` to be an array in the JSON string but got `%s`", jsonObj.get("_links").toString()));
          }

          // validate the optional field `_links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ResourceLink.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportingGetLandingPageReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportingGetLandingPageReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportingGetLandingPageReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportingGetLandingPageReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportingGetLandingPageReportResponse>() {
           @Override
           public void write(JsonWriter out, ReportingGetLandingPageReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportingGetLandingPageReportResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportingGetLandingPageReportResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportingGetLandingPageReportResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportingGetLandingPageReportResponse
  * @throws IOException if the JSON string is invalid with respect to ReportingGetLandingPageReportResponse
  */
  public static ReportingGetLandingPageReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportingGetLandingPageReportResponse.class);
  }

 /**
  * Convert an instance of ReportingGetLandingPageReportResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

