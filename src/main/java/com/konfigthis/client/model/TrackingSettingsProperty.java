/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The tracking settings applied to this landing page.
 */
@ApiModel(description = "The tracking settings applied to this landing page.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrackingSettingsProperty {
  public static final String SERIALIZED_NAME_TRACK_WITH_MAILCHIMP = "track_with_mailchimp";
  @SerializedName(SERIALIZED_NAME_TRACK_WITH_MAILCHIMP)
  private Boolean trackWithMailchimp;

  public static final String SERIALIZED_NAME_ENABLE_RESTRICTED_DATA_PROCESSING = "enable_restricted_data_processing";
  @SerializedName(SERIALIZED_NAME_ENABLE_RESTRICTED_DATA_PROCESSING)
  private Boolean enableRestrictedDataProcessing;

  public TrackingSettingsProperty() {
  }

  public TrackingSettingsProperty trackWithMailchimp(Boolean trackWithMailchimp) {
    
    
    
    
    this.trackWithMailchimp = trackWithMailchimp;
    return this;
  }

   /**
   * Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
   * @return trackWithMailchimp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).")

  public Boolean getTrackWithMailchimp() {
    return trackWithMailchimp;
  }


  public void setTrackWithMailchimp(Boolean trackWithMailchimp) {
    
    
    
    this.trackWithMailchimp = trackWithMailchimp;
  }


  public TrackingSettingsProperty enableRestrictedDataProcessing(Boolean enableRestrictedDataProcessing) {
    
    
    
    
    this.enableRestrictedDataProcessing = enableRestrictedDataProcessing;
    return this;
  }

   /**
   * Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google&#39;s restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
   * @return enableRestrictedDataProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).")

  public Boolean getEnableRestrictedDataProcessing() {
    return enableRestrictedDataProcessing;
  }


  public void setEnableRestrictedDataProcessing(Boolean enableRestrictedDataProcessing) {
    
    
    
    this.enableRestrictedDataProcessing = enableRestrictedDataProcessing;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrackingSettingsProperty instance itself
   */
  public TrackingSettingsProperty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingSettingsProperty trackingSettingsProperty = (TrackingSettingsProperty) o;
    return Objects.equals(this.trackWithMailchimp, trackingSettingsProperty.trackWithMailchimp) &&
        Objects.equals(this.enableRestrictedDataProcessing, trackingSettingsProperty.enableRestrictedDataProcessing)&&
        Objects.equals(this.additionalProperties, trackingSettingsProperty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackWithMailchimp, enableRestrictedDataProcessing, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingSettingsProperty {\n");
    sb.append("    trackWithMailchimp: ").append(toIndentedString(trackWithMailchimp)).append("\n");
    sb.append("    enableRestrictedDataProcessing: ").append(toIndentedString(enableRestrictedDataProcessing)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("track_with_mailchimp");
    openapiFields.add("enable_restricted_data_processing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackingSettingsProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrackingSettingsProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackingSettingsProperty is not found in the empty JSON string", TrackingSettingsProperty.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackingSettingsProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackingSettingsProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackingSettingsProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackingSettingsProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackingSettingsProperty>() {
           @Override
           public void write(JsonWriter out, TrackingSettingsProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackingSettingsProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrackingSettingsProperty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackingSettingsProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackingSettingsProperty
  * @throws IOException if the JSON string is invalid with respect to TrackingSettingsProperty
  */
  public static TrackingSettingsProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackingSettingsProperty.class);
  }

 /**
  * Convert an instance of TrackingSettingsProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

