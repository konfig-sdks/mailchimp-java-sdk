/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CampaignFoldersAddNewFolder200Response;
import com.konfigthis.client.model.CampaignFoldersAddNewFolderRequest;
import com.konfigthis.client.model.CampaignFoldersAddNewFolderResponse;
import com.konfigthis.client.model.CampaignFoldersAddNewFolderdefaultResponse;
import com.konfigthis.client.model.CampaignFoldersDeleteFolderResponse;
import com.konfigthis.client.model.CampaignFoldersDeleteFolderdefaultResponse;
import com.konfigthis.client.model.CampaignFoldersGetFolderInfo200Response;
import com.konfigthis.client.model.CampaignFoldersGetFolderInfoResponse;
import com.konfigthis.client.model.CampaignFoldersGetFolderInfodefaultResponse;
import com.konfigthis.client.model.CampaignFoldersListCampaignFolders200Response;
import com.konfigthis.client.model.CampaignFoldersListCampaignFoldersResponse;
import com.konfigthis.client.model.CampaignFoldersListCampaignFoldersdefaultResponse;
import com.konfigthis.client.model.CampaignFoldersUpdateSpecificFolder200Response;
import com.konfigthis.client.model.CampaignFoldersUpdateSpecificFolderResponse;
import com.konfigthis.client.model.CampaignFoldersUpdateSpecificFolderdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignFoldersApi
 */
@Disabled
public class CampaignFoldersApiTest {

    private static CampaignFoldersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CampaignFoldersApi(apiClient);
    }

    /**
     * Add campaign folder
     *
     * Create a new campaign folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewFolderTest() throws ApiException {
        String name = null;
        CampaignFoldersAddNewFolderResponse response = api.addNewFolder(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete campaign folder
     *
     * Delete a specific campaign folder, and mark all the campaigns in the folder as &#39;unfiled&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        String folderId = null;
        api.deleteFolder(folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign folder
     *
     * Get information about a specific folder used to organize campaigns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderInfoTest() throws ApiException {
        String folderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        CampaignFoldersGetFolderInfoResponse response = api.getFolderInfo(folderId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign folders
     *
     * Get all folders used to organize campaigns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCampaignFoldersTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        CampaignFoldersListCampaignFoldersResponse response = api.listCampaignFolders()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Update campaign folder
     *
     * Update a specific folder used to organize campaigns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpecificFolderTest() throws ApiException {
        String name = null;
        String folderId = null;
        CampaignFoldersUpdateSpecificFolderResponse response = api.updateSpecificFolder(name, folderId)
                .execute();
        // TODO: test validations
    }

}
