/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ReportsCampaignRecipientInfo200Response;
import com.konfigthis.client.model.ReportsCampaignRecipientInfoResponse;
import com.konfigthis.client.model.ReportsCampaignRecipientInfodefaultResponse;
import com.konfigthis.client.model.ReportsGetAbuseReport200Response;
import com.konfigthis.client.model.ReportsGetAbuseReportResponse;
import com.konfigthis.client.model.ReportsGetAbuseReportdefaultResponse;
import com.konfigthis.client.model.ReportsGetCampaignClickDetails200Response;
import com.konfigthis.client.model.ReportsGetCampaignClickDetailsResponse;
import com.konfigthis.client.model.ReportsGetCampaignClickDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsGetCampaignProductActivity200Response;
import com.konfigthis.client.model.ReportsGetCampaignProductActivityResponse;
import com.konfigthis.client.model.ReportsGetCampaignProductActivitydefaultResponse;
import com.konfigthis.client.model.ReportsGetSubscriberActivity200Response;
import com.konfigthis.client.model.ReportsGetSubscriberActivityResponse;
import com.konfigthis.client.model.ReportsGetSubscriberActivitydefaultResponse;
import com.konfigthis.client.model.ReportsGetUnsubscribedMemberInfo200Response;
import com.konfigthis.client.model.ReportsGetUnsubscribedMemberInfoResponse;
import com.konfigthis.client.model.ReportsGetUnsubscribedMemberInfodefaultResponse;
import com.konfigthis.client.model.ReportsListAbuseReports200Response;
import com.konfigthis.client.model.ReportsListAbuseReportsResponse;
import com.konfigthis.client.model.ReportsListAbuseReportsdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignFeedback200Response;
import com.konfigthis.client.model.ReportsListCampaignFeedbackResponse;
import com.konfigthis.client.model.ReportsListCampaignFeedbackdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignOpenDetails200Response;
import com.konfigthis.client.model.ReportsListCampaignOpenDetailsResponse;
import com.konfigthis.client.model.ReportsListCampaignOpenDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignRecipients200Response;
import com.konfigthis.client.model.ReportsListCampaignRecipientsResponse;
import com.konfigthis.client.model.ReportsListCampaignRecipientsdefaultResponse;
import com.konfigthis.client.model.ReportsListCampaignReports200Response;
import com.konfigthis.client.model.ReportsListCampaignReportsResponse;
import com.konfigthis.client.model.ReportsListCampaignReportsdefaultResponse;
import com.konfigthis.client.model.ReportsListChildCampaignReports200Response;
import com.konfigthis.client.model.ReportsListChildCampaignReportsResponse;
import com.konfigthis.client.model.ReportsListChildCampaignReportsdefaultResponse;
import com.konfigthis.client.model.ReportsListClickedLinkSubscribers200Response;
import com.konfigthis.client.model.ReportsListClickedLinkSubscribersResponse;
import com.konfigthis.client.model.ReportsListClickedLinkSubscribersdefaultResponse;
import com.konfigthis.client.model.ReportsListDomainPerformanceStats200Response;
import com.konfigthis.client.model.ReportsListDomainPerformanceStatsResponse;
import com.konfigthis.client.model.ReportsListDomainPerformanceStatsdefaultResponse;
import com.konfigthis.client.model.ReportsListEepurlActivity200Response;
import com.konfigthis.client.model.ReportsListEepurlActivityResponse;
import com.konfigthis.client.model.ReportsListEepurlActivitydefaultResponse;
import com.konfigthis.client.model.ReportsListEmailActivity200Response;
import com.konfigthis.client.model.ReportsListEmailActivityResponse;
import com.konfigthis.client.model.ReportsListEmailActivitydefaultResponse;
import com.konfigthis.client.model.ReportsListTopOpenLocations200Response;
import com.konfigthis.client.model.ReportsListTopOpenLocationsResponse;
import com.konfigthis.client.model.ReportsListTopOpenLocationsdefaultResponse;
import com.konfigthis.client.model.ReportsListUnsubscribedMembers200Response;
import com.konfigthis.client.model.ReportsListUnsubscribedMembersResponse;
import com.konfigthis.client.model.ReportsListUnsubscribedMembersdefaultResponse;
import com.konfigthis.client.model.ReportsOpenSubscriberDetails200Response;
import com.konfigthis.client.model.ReportsOpenSubscriberDetailsResponse;
import com.konfigthis.client.model.ReportsOpenSubscriberDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsSpecificCampaignReport200Response;
import com.konfigthis.client.model.ReportsSpecificCampaignReportResponse;
import com.konfigthis.client.model.ReportsSpecificCampaignReportdefaultResponse;
import com.konfigthis.client.model.ReportsSpecificLinkDetails200Response;
import com.konfigthis.client.model.ReportsSpecificLinkDetailsResponse;
import com.konfigthis.client.model.ReportsSpecificLinkDetailsdefaultResponse;
import com.konfigthis.client.model.ReportsSpecificLinkSubscriber200Response;
import com.konfigthis.client.model.ReportsSpecificLinkSubscriberResponse;
import com.konfigthis.client.model.ReportsSpecificLinkSubscriberdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private static ReportsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ReportsApi(apiClient);
    }

    /**
     * Get campaign recipient info
     *
     * Get information about a specific campaign recipient.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignRecipientInfoTest() throws ApiException {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsCampaignRecipientInfoResponse response = api.campaignRecipientInfo(campaignId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get abuse report
     *
     * Get information about a specific abuse report for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAbuseReportTest() throws ApiException {
        String campaignId = null;
        String reportId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsGetAbuseReportResponse response = api.getAbuseReport(campaignId, reportId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign details
     *
     * Get information about clicks on specific links in your Mailchimp campaigns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignClickDetailsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;
        String sortDir = null;
        ReportsGetCampaignClickDetailsResponse response = api.getCampaignClickDetails(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .sortField(sortField)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign product activity
     *
     * Get breakdown of product activity for a campaign
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignProductActivityTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;
        ReportsGetCampaignProductActivityResponse response = api.getCampaignProductActivity(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .sortField(sortField)
                .execute();
        // TODO: test validations
    }

    /**
     * Get subscriber email activity
     *
     * Get a specific list member&#39;s activity in a campaign including opens, clicks, and bounces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriberActivityTest() throws ApiException {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        String since = null;
        ReportsGetSubscriberActivityResponse response = api.getSubscriberActivity(campaignId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .since(since)
                .execute();
        // TODO: test validations
    }

    /**
     * Get unsubscribed member
     *
     * Get information about a specific list member who unsubscribed from a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnsubscribedMemberInfoTest() throws ApiException {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsGetUnsubscribedMemberInfoResponse response = api.getUnsubscribedMemberInfo(campaignId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List abuse reports
     *
     * Get a list of abuse complaints for a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAbuseReportsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsListAbuseReportsResponse response = api.listAbuseReports(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign feedback
     *
     * Get feedback based on a campaign&#39;s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCampaignFeedbackTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsListCampaignFeedbackResponse response = api.listCampaignFeedback(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign open details
     *
     * Get detailed information about any campaign emails that were opened by a list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCampaignOpenDetailsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String since = null;
        String sortField = null;
        String sortDir = null;
        ReportsListCampaignOpenDetailsResponse response = api.listCampaignOpenDetails(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .since(since)
                .sortField(sortField)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign recipients
     *
     * Get information about campaign recipients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCampaignRecipientsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ReportsListCampaignRecipientsResponse response = api.listCampaignRecipients(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign reports
     *
     * Get campaign reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCampaignReportsTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        OffsetDateTime beforeSendTime = null;
        OffsetDateTime sinceSendTime = null;
        ReportsListCampaignReportsResponse response = api.listCampaignReports()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .beforeSendTime(beforeSendTime)
                .sinceSendTime(sinceSendTime)
                .execute();
        // TODO: test validations
    }

    /**
     * List child campaign reports
     *
     * Get a list of reports with child campaigns for a specific parent campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChildCampaignReportsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsListChildCampaignReportsResponse response = api.listChildCampaignReports(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List clicked link subscribers
     *
     * Get information about list members who clicked on a specific link in a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClickedLinkSubscribersTest() throws ApiException {
        String campaignId = null;
        String linkId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ReportsListClickedLinkSubscribersResponse response = api.listClickedLinkSubscribers(campaignId, linkId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List domain performance stats
     *
     * Get statistics for the top-performing email domains in a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainPerformanceStatsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsListDomainPerformanceStatsResponse response = api.listDomainPerformanceStats(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List EepURL activity
     *
     * Get a summary of social activity for the campaign, tracked by EepURL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEepurlActivityTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsListEepurlActivityResponse response = api.listEepurlActivity(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List email activity
     *
     * Get a list of member&#39;s subscriber activity in a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmailActivityTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String since = null;
        ReportsListEmailActivityResponse response = api.listEmailActivity(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .since(since)
                .execute();
        // TODO: test validations
    }

    /**
     * List top open activities
     *
     * Get top open locations for a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopOpenLocationsTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ReportsListTopOpenLocationsResponse response = api.listTopOpenLocations(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List unsubscribed members
     *
     * Get information about members who have unsubscribed from a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUnsubscribedMembersTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ReportsListUnsubscribedMembersResponse response = api.listUnsubscribedMembers(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get opened campaign subscriber
     *
     * Get information about a specific subscriber who opened a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openSubscriberDetailsTest() throws ApiException {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsOpenSubscriberDetailsResponse response = api.openSubscriberDetails(campaignId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign report
     *
     * Get report details for a specific sent campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specificCampaignReportTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsSpecificCampaignReportResponse response = api.specificCampaignReport(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign link details
     *
     * Get click details for a specific link in a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specificLinkDetailsTest() throws ApiException {
        String campaignId = null;
        String linkId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsSpecificLinkDetailsResponse response = api.specificLinkDetails(campaignId, linkId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get clicked link subscriber
     *
     * Get information about a specific subscriber who clicked a link in a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specificLinkSubscriberTest() throws ApiException {
        String campaignId = null;
        String linkId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ReportsSpecificLinkSubscriberResponse response = api.specificLinkSubscriber(campaignId, linkId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

}
