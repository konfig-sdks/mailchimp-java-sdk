/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.FileManagerAddNewFolder200Response;
import com.konfigthis.client.model.FileManagerAddNewFolderRequest;
import com.konfigthis.client.model.FileManagerAddNewFolderResponse;
import com.konfigthis.client.model.FileManagerAddNewFolderdefaultResponse;
import com.konfigthis.client.model.FileManagerDeleteFolderByIdResponse;
import com.konfigthis.client.model.FileManagerDeleteFolderByIddefaultResponse;
import com.konfigthis.client.model.FileManagerGetFile200Response;
import com.konfigthis.client.model.FileManagerGetFileResponse;
import com.konfigthis.client.model.FileManagerGetFiledefaultResponse;
import com.konfigthis.client.model.FileManagerGetFolderInfo200Response;
import com.konfigthis.client.model.FileManagerGetFolderInfoResponse;
import com.konfigthis.client.model.FileManagerGetFolderInfodefaultResponse;
import com.konfigthis.client.model.FileManagerGetFolderList200Response;
import com.konfigthis.client.model.FileManagerGetFolderListResponse;
import com.konfigthis.client.model.FileManagerGetFolderListdefaultResponse;
import com.konfigthis.client.model.FileManagerListStoredFiles200Response;
import com.konfigthis.client.model.FileManagerListStoredFilesResponse;
import com.konfigthis.client.model.FileManagerListStoredFilesdefaultResponse;
import com.konfigthis.client.model.FileManagerRemoveFileByIdResponse;
import com.konfigthis.client.model.FileManagerRemoveFileByIddefaultResponse;
import com.konfigthis.client.model.FileManagerUpdateFile200Response;
import com.konfigthis.client.model.FileManagerUpdateFileRequest;
import com.konfigthis.client.model.FileManagerUpdateFileResponse;
import com.konfigthis.client.model.FileManagerUpdateFiledefaultResponse;
import com.konfigthis.client.model.FileManagerUpdateSpecificFolder200Response;
import com.konfigthis.client.model.FileManagerUpdateSpecificFolderResponse;
import com.konfigthis.client.model.FileManagerUpdateSpecificFolderdefaultResponse;
import com.konfigthis.client.model.FileManagerUploadFile200Response;
import com.konfigthis.client.model.FileManagerUploadFileRequest;
import com.konfigthis.client.model.FileManagerUploadFileResponse;
import com.konfigthis.client.model.FileManagerUploadFiledefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FileManagerApi
 */
@Disabled
public class FileManagerApiTest {

    private static FileManagerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FileManagerApi(apiClient);
    }

    /**
     * Add folder
     *
     * Create a new folder in the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewFolderTest() throws ApiException {
        String name = null;
        FileManagerAddNewFolderResponse response = api.addNewFolder(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete folder
     *
     * Delete a specific folder in the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderByIdTest() throws ApiException {
        String folderId = null;
        api.deleteFolderById(folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file
     *
     * Get information about a specific file in the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        String fileId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        FileManagerGetFileResponse response = api.getFile(fileId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get folder
     *
     * Get information about a specific folder in the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderInfoTest() throws ApiException {
        String folderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        FileManagerGetFolderInfoResponse response = api.getFolderInfo(folderId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List folders
     *
     * Get a list of all folders in the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderListTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String createdBy = null;
        String beforeCreatedAt = null;
        String sinceCreatedAt = null;
        FileManagerGetFolderListResponse response = api.getFolderList()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .createdBy(createdBy)
                .beforeCreatedAt(beforeCreatedAt)
                .sinceCreatedAt(sinceCreatedAt)
                .execute();
        // TODO: test validations
    }

    /**
     * List stored files
     *
     * Get a list of available images and files stored in the File Manager for the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStoredFilesTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String createdBy = null;
        String beforeCreatedAt = null;
        String sinceCreatedAt = null;
        String sortField = null;
        String sortDir = null;
        FileManagerListStoredFilesResponse response = api.listStoredFiles()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .createdBy(createdBy)
                .beforeCreatedAt(beforeCreatedAt)
                .sinceCreatedAt(sinceCreatedAt)
                .sortField(sortField)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * List stored files
     *
     * Get a list of available images and files stored in this folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStoredFiles_0Test() throws ApiException {
        String folderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String createdBy = null;
        String beforeCreatedAt = null;
        String sinceCreatedAt = null;
        String sortField = null;
        String sortDir = null;
        FileManagerListStoredFiles200Response response = api.listStoredFiles_0(folderId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .createdBy(createdBy)
                .beforeCreatedAt(beforeCreatedAt)
                .sinceCreatedAt(sinceCreatedAt)
                .sortField(sortField)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete file
     *
     * Remove a specific file from the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFileByIdTest() throws ApiException {
        String fileId = null;
        api.removeFileById(fileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update file
     *
     * Update a file in the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFileTest() throws ApiException {
        String fileId = null;
        Integer folderId = null;
        String name = null;
        FileManagerUpdateFileResponse response = api.updateFile(fileId)
                .folderId(folderId)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Update folder
     *
     * Update a specific File Manager folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpecificFolderTest() throws ApiException {
        String name = null;
        String folderId = null;
        FileManagerUpdateSpecificFolderResponse response = api.updateSpecificFolder(name, folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add file
     *
     * Upload a new image or file to the File Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String name = null;
        String fileData = null;
        Integer folderId = null;
        FileManagerUploadFileResponse response = api.uploadFile(name, fileData)
                .folderId(folderId)
                .execute();
        // TODO: test validations
    }

}
