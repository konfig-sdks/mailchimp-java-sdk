/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ABTestOptionsProperty;
import com.konfigthis.client.model.BatchDeliveryProperty;
import com.konfigthis.client.model.CampaignSettingsProperty1;
import com.konfigthis.client.model.CampaignSettingsProperty2;
import com.konfigthis.client.model.CampaignSocialCardProperty;
import com.konfigthis.client.model.CampaignTrackingOptionsProperty;
import com.konfigthis.client.model.CampaignsAddFeedback200Response;
import com.konfigthis.client.model.CampaignsAddFeedbackRequest;
import com.konfigthis.client.model.CampaignsAddFeedbackResponse;
import com.konfigthis.client.model.CampaignsAddFeedbackdefaultResponse;
import com.konfigthis.client.model.CampaignsCancelSendActionResponse;
import com.konfigthis.client.model.CampaignsCancelSendActiondefaultResponse;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaign200Response;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaignRequest;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaignResponse;
import com.konfigthis.client.model.CampaignsCreateNewMailchimpCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsGetAll200Response;
import com.konfigthis.client.model.CampaignsGetAllResponse;
import com.konfigthis.client.model.CampaignsGetAlldefaultResponse;
import com.konfigthis.client.model.CampaignsGetContent200Response;
import com.konfigthis.client.model.CampaignsGetContentResponse;
import com.konfigthis.client.model.CampaignsGetContentdefaultResponse;
import com.konfigthis.client.model.CampaignsGetFeedbackMessage200Response;
import com.konfigthis.client.model.CampaignsGetFeedbackMessageResponse;
import com.konfigthis.client.model.CampaignsGetFeedbackMessagedefaultResponse;
import com.konfigthis.client.model.CampaignsGetInfo200Response;
import com.konfigthis.client.model.CampaignsGetInfoResponse;
import com.konfigthis.client.model.CampaignsGetInfodefaultResponse;
import com.konfigthis.client.model.CampaignsGetSendChecklist200Response;
import com.konfigthis.client.model.CampaignsGetSendChecklistResponse;
import com.konfigthis.client.model.CampaignsGetSendChecklistdefaultResponse;
import com.konfigthis.client.model.CampaignsListFeedback200Response;
import com.konfigthis.client.model.CampaignsListFeedbackResponse;
import com.konfigthis.client.model.CampaignsListFeedbackdefaultResponse;
import com.konfigthis.client.model.CampaignsPauseRssCampaignResponse;
import com.konfigthis.client.model.CampaignsPauseRssCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsRemoveCampaignResponse;
import com.konfigthis.client.model.CampaignsRemoveCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsRemoveFeedbackMessageResponse;
import com.konfigthis.client.model.CampaignsRemoveFeedbackMessagedefaultResponse;
import com.konfigthis.client.model.CampaignsReplicateAction200Response;
import com.konfigthis.client.model.CampaignsReplicateActionResponse;
import com.konfigthis.client.model.CampaignsReplicateActiondefaultResponse;
import com.konfigthis.client.model.CampaignsResendAction200Response;
import com.konfigthis.client.model.CampaignsResendActionRequest;
import com.konfigthis.client.model.CampaignsResendActionResponse;
import com.konfigthis.client.model.CampaignsResendActiondefaultResponse;
import com.konfigthis.client.model.CampaignsResumeRssCampaignResponse;
import com.konfigthis.client.model.CampaignsResumeRssCampaigndefaultResponse;
import com.konfigthis.client.model.CampaignsScheduleDeliveryRequest;
import com.konfigthis.client.model.CampaignsScheduleDeliveryResponse;
import com.konfigthis.client.model.CampaignsScheduleDeliverydefaultResponse;
import com.konfigthis.client.model.CampaignsSendActionResponse;
import com.konfigthis.client.model.CampaignsSendActiondefaultResponse;
import com.konfigthis.client.model.CampaignsSendTestEmailRequest;
import com.konfigthis.client.model.CampaignsSendTestEmailResponse;
import com.konfigthis.client.model.CampaignsSendTestEmaildefaultResponse;
import com.konfigthis.client.model.CampaignsSetContent200Response;
import com.konfigthis.client.model.CampaignsSetContentRequest;
import com.konfigthis.client.model.CampaignsSetContentResponse;
import com.konfigthis.client.model.CampaignsSetContentdefaultResponse;
import com.konfigthis.client.model.CampaignsUnscheduleActionResponse;
import com.konfigthis.client.model.CampaignsUnscheduleActiondefaultResponse;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessage200Response;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessageRequest;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessageResponse;
import com.konfigthis.client.model.CampaignsUpdateFeedbackMessagedefaultResponse;
import com.konfigthis.client.model.CampaignsUpdateSettings200Response;
import com.konfigthis.client.model.CampaignsUpdateSettingsRequest;
import com.konfigthis.client.model.CampaignsUpdateSettingsResponse;
import com.konfigthis.client.model.CampaignsUpdateSettingsdefaultResponse;
import com.konfigthis.client.model.ListProperty1;
import com.konfigthis.client.model.ListProperty2;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RSSOptionsProperty;
import com.konfigthis.client.model.RSSOptionsProperty1;
import com.konfigthis.client.model.TemplateContentProperty;
import com.konfigthis.client.model.UploadArchiveProperty;
import com.konfigthis.client.model.VariateContentsPropertyInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignsApi
 */
@Disabled
public class CampaignsApiTest {

    private static CampaignsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CampaignsApi(apiClient);
    }

    /**
     * Add campaign feedback
     *
     * Add feedback on a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFeedbackTest() throws ApiException {
        String message = null;
        String campaignId = null;
        Integer blockId = null;
        Boolean isComplete = null;
        CampaignsAddFeedbackResponse response = api.addFeedback(message, campaignId)
                .blockId(blockId)
                .isComplete(isComplete)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel campaign
     *
     * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSendActionTest() throws ApiException {
        String campaignId = null;
        api.cancelSendAction(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add campaign
     *
     * Create a new Mailchimp campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewMailchimpCampaignTest() throws ApiException {
        String type = null;
        ListProperty1 recipients = null;
        CampaignSettingsProperty1 settings = null;
        ABTestOptionsProperty variateSettings = null;
        CampaignTrackingOptionsProperty tracking = null;
        RSSOptionsProperty rssOpts = null;
        CampaignSocialCardProperty socialCard = null;
        String contentType = null;
        CampaignsCreateNewMailchimpCampaignResponse response = api.createNewMailchimpCampaign(type)
                .recipients(recipients)
                .settings(settings)
                .variateSettings(variateSettings)
                .tracking(tracking)
                .rssOpts(rssOpts)
                .socialCard(socialCard)
                .contentType(contentType)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaigns
     *
     * Get all campaigns in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String status = null;
        OffsetDateTime beforeSendTime = null;
        OffsetDateTime sinceSendTime = null;
        OffsetDateTime beforeCreateTime = null;
        OffsetDateTime sinceCreateTime = null;
        String listId = null;
        String folderId = null;
        String memberId = null;
        String sortField = null;
        String sortDir = null;
        Boolean includeResendShortcutEligibility = null;
        CampaignsGetAllResponse response = api.getAll()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .status(status)
                .beforeSendTime(beforeSendTime)
                .sinceSendTime(sinceSendTime)
                .beforeCreateTime(beforeCreateTime)
                .sinceCreateTime(sinceCreateTime)
                .listId(listId)
                .folderId(folderId)
                .memberId(memberId)
                .sortField(sortField)
                .sortDir(sortDir)
                .includeResendShortcutEligibility(includeResendShortcutEligibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign content
     *
     * Get the the HTML and plain-text content for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        CampaignsGetContentResponse response = api.getContent(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign feedback message
     *
     * Get a specific feedback message from a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedbackMessageTest() throws ApiException {
        String campaignId = null;
        String feedbackId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        CampaignsGetFeedbackMessageResponse response = api.getFeedbackMessage(campaignId, feedbackId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign info
     *
     * Get information about a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Boolean includeResendShortcutEligibility = null;
        CampaignsGetInfoResponse response = api.getInfo(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .includeResendShortcutEligibility(includeResendShortcutEligibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Get campaign send checklist
     *
     * Review the send checklist for a campaign, and resolve any issues before sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSendChecklistTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        CampaignsGetSendChecklistResponse response = api.getSendChecklist(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List campaign feedback
     *
     * Get team feedback while you&#39;re working together on a Mailchimp campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeedbackTest() throws ApiException {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        CampaignsListFeedbackResponse response = api.listFeedback(campaignId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Pause rss campaign
     *
     * Pause an RSS-Driven campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseRssCampaignTest() throws ApiException {
        String campaignId = null;
        api.pauseRssCampaign(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete campaign
     *
     * Remove a campaign from your Mailchimp account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCampaignTest() throws ApiException {
        String campaignId = null;
        api.removeCampaign(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete campaign feedback message
     *
     * Remove a specific feedback message for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFeedbackMessageTest() throws ApiException {
        String campaignId = null;
        String feedbackId = null;
        api.removeFeedbackMessage(campaignId, feedbackId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replicate campaign
     *
     * Replicate a campaign in saved or send status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicateActionTest() throws ApiException {
        String campaignId = null;
        CampaignsReplicateActionResponse response = api.replicateAction(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Resend campaign
     *
     * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn&#39;t open the campaign, or any new subscribers since it was sent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendActionTest() throws ApiException {
        String campaignId = null;
        String shortcutType = null;
        CampaignsResendActionResponse response = api.resendAction(campaignId)
                .shortcutType(shortcutType)
                .execute();
        // TODO: test validations
    }

    /**
     * Resume rss campaign
     *
     * Resume an RSS-Driven campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeRssCampaignTest() throws ApiException {
        String campaignId = null;
        api.resumeRssCampaign(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Schedule campaign
     *
     * Schedule a campaign for delivery. If you&#39;re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleDeliveryTest() throws ApiException {
        OffsetDateTime scheduleTime = null;
        String campaignId = null;
        Boolean timewarp = null;
        BatchDeliveryProperty batchDelivery = null;
        api.scheduleDelivery(scheduleTime, campaignId)
                .timewarp(timewarp)
                .batchDelivery(batchDelivery)
                .execute();
        // TODO: test validations
    }

    /**
     * Send campaign
     *
     * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendActionTest() throws ApiException {
        String campaignId = null;
        api.sendAction(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send test email
     *
     * Send a test email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTestEmailTest() throws ApiException {
        List<String> testEmails = null;
        String sendType = null;
        String campaignId = null;
        api.sendTestEmail(testEmails, sendType, campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set campaign content
     *
     * Set the content for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setContentTest() throws ApiException {
        String campaignId = null;
        String plainText = null;
        String html = null;
        String url = null;
        TemplateContentProperty template = null;
        UploadArchiveProperty archive = null;
        List<VariateContentsPropertyInner> variateContents = null;
        CampaignsSetContentResponse response = api.setContent(campaignId)
                .plainText(plainText)
                .html(html)
                .url(url)
                .template(template)
                .archive(archive)
                .variateContents(variateContents)
                .execute();
        // TODO: test validations
    }

    /**
     * Unschedule campaign
     *
     * Unschedule a scheduled campaign that hasn&#39;t started sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unscheduleActionTest() throws ApiException {
        String campaignId = null;
        api.unscheduleAction(campaignId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update campaign feedback message
     *
     * Update a specific feedback message for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFeedbackMessageTest() throws ApiException {
        String campaignId = null;
        String feedbackId = null;
        Integer blockId = null;
        String message = null;
        Boolean isComplete = null;
        CampaignsUpdateFeedbackMessageResponse response = api.updateFeedbackMessage(campaignId, feedbackId)
                .blockId(blockId)
                .message(message)
                .isComplete(isComplete)
                .execute();
        // TODO: test validations
    }

    /**
     * Update campaign settings
     *
     * Update some or all of the settings for a specific campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        CampaignSettingsProperty2 settings = null;
        String campaignId = null;
        ListProperty2 recipients = null;
        ABTestOptionsProperty variateSettings = null;
        CampaignTrackingOptionsProperty tracking = null;
        RSSOptionsProperty1 rssOpts = null;
        CampaignSocialCardProperty socialCard = null;
        CampaignsUpdateSettingsResponse response = api.updateSettings(settings, campaignId)
                .recipients(recipients)
                .variateSettings(variateSettings)
                .tracking(tracking)
                .rssOpts(rssOpts)
                .socialCard(socialCard)
                .execute();
        // TODO: test validations
    }

}
