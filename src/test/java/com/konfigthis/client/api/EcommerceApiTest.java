/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddressProperty;
import com.konfigthis.client.model.AddressProperty1;
import com.konfigthis.client.model.AddressProperty4;
import com.konfigthis.client.model.AddressProperty5;
import com.konfigthis.client.model.AddressProperty6;
import com.konfigthis.client.model.BillingAddressProperty;
import com.konfigthis.client.model.BillingAddressProperty1;
import com.konfigthis.client.model.ECommerceCartLineItem;
import com.konfigthis.client.model.ECommerceCartLineItem1;
import com.konfigthis.client.model.ECommerceCustomerProperty;
import com.konfigthis.client.model.ECommerceCustomerProperty1;
import com.konfigthis.client.model.ECommerceCustomerProperty2;
import com.konfigthis.client.model.ECommerceCustomerProperty3;
import com.konfigthis.client.model.ECommerceOrderLineItem;
import com.konfigthis.client.model.ECommerceOrderLineItem1;
import com.konfigthis.client.model.ECommerceProductImage;
import com.konfigthis.client.model.ECommerceProductImage1;
import com.konfigthis.client.model.ECommerceProductVariant;
import com.konfigthis.client.model.ECommerceProductVariant1;
import com.konfigthis.client.model.EcommerceAddCartLineItem200Response;
import com.konfigthis.client.model.EcommerceAddCartLineItemRequest;
import com.konfigthis.client.model.EcommerceAddCartLineItemResponse;
import com.konfigthis.client.model.EcommerceAddCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceAddCartToStore200Response;
import com.konfigthis.client.model.EcommerceAddCartToStoreRequest;
import com.konfigthis.client.model.EcommerceAddCartToStoreResponse;
import com.konfigthis.client.model.EcommerceAddCartToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddCustomerToStore200Response;
import com.konfigthis.client.model.EcommerceAddCustomerToStoreRequest;
import com.konfigthis.client.model.EcommerceAddCustomerToStoreResponse;
import com.konfigthis.client.model.EcommerceAddCustomerToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomer200Response;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomerRequest;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomerResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateCustomerdefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateProductVariant200Response;
import com.konfigthis.client.model.EcommerceAddOrUpdateProductVariantResponse;
import com.konfigthis.client.model.EcommerceAddOrUpdateProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrderLineItem200Response;
import com.konfigthis.client.model.EcommerceAddOrderLineItemRequest;
import com.konfigthis.client.model.EcommerceAddOrderLineItemResponse;
import com.konfigthis.client.model.EcommerceAddOrderLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceAddOrderToStore200Response;
import com.konfigthis.client.model.EcommerceAddOrderToStoreRequest;
import com.konfigthis.client.model.EcommerceAddOrderToStoreResponse;
import com.konfigthis.client.model.EcommerceAddOrderToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddProductImage200Response;
import com.konfigthis.client.model.EcommerceAddProductImageRequest;
import com.konfigthis.client.model.EcommerceAddProductImageResponse;
import com.konfigthis.client.model.EcommerceAddProductImagedefaultResponse;
import com.konfigthis.client.model.EcommerceAddProductToStore200Response;
import com.konfigthis.client.model.EcommerceAddProductToStoreRequest;
import com.konfigthis.client.model.EcommerceAddProductToStoreResponse;
import com.konfigthis.client.model.EcommerceAddProductToStoredefaultResponse;
import com.konfigthis.client.model.EcommerceAddProductVariant200Response;
import com.konfigthis.client.model.EcommerceAddProductVariantRequest;
import com.konfigthis.client.model.EcommerceAddProductVariantResponse;
import com.konfigthis.client.model.EcommerceAddProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceAddPromoCode200Response;
import com.konfigthis.client.model.EcommerceAddPromoCodeRequest;
import com.konfigthis.client.model.EcommerceAddPromoCodeResponse;
import com.konfigthis.client.model.EcommerceAddPromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceAddPromoRule200Response;
import com.konfigthis.client.model.EcommerceAddPromoRuleRequest;
import com.konfigthis.client.model.EcommerceAddPromoRuleResponse;
import com.konfigthis.client.model.EcommerceAddPromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccount200Response;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccountRequest;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccountResponse;
import com.konfigthis.client.model.EcommerceAddStoreToMailchimpAccountdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteCartLineItemResponse;
import com.konfigthis.client.model.EcommerceDeleteCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderLineResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderLinedefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderResponse;
import com.konfigthis.client.model.EcommerceDeleteOrderdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteProductImageResponse;
import com.konfigthis.client.model.EcommerceDeleteProductImagedefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteProductResponse;
import com.konfigthis.client.model.EcommerceDeleteProductVariantResponse;
import com.konfigthis.client.model.EcommerceDeleteProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteProductdefaultResponse;
import com.konfigthis.client.model.EcommerceDeletePromoCodeResponse;
import com.konfigthis.client.model.EcommerceDeletePromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceDeletePromoRuleResponse;
import com.konfigthis.client.model.EcommerceDeletePromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceDeleteStoredefaultResponse;
import com.konfigthis.client.model.EcommerceGetCartInfo200Response;
import com.konfigthis.client.model.EcommerceGetCartInfoResponse;
import com.konfigthis.client.model.EcommerceGetCartInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetCartLineItem200Response;
import com.konfigthis.client.model.EcommerceGetCartLineItemResponse;
import com.konfigthis.client.model.EcommerceGetCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceGetCustomerInfo200Response;
import com.konfigthis.client.model.EcommerceGetCustomerInfoResponse;
import com.konfigthis.client.model.EcommerceGetCustomerInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetOrderLineItem200Response;
import com.konfigthis.client.model.EcommerceGetOrderLineItemResponse;
import com.konfigthis.client.model.EcommerceGetOrderLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceGetProductImageInfo200Response;
import com.konfigthis.client.model.EcommerceGetProductImageInfoResponse;
import com.konfigthis.client.model.EcommerceGetProductImageInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetProductImages200Response;
import com.konfigthis.client.model.EcommerceGetProductImagesResponse;
import com.konfigthis.client.model.EcommerceGetProductImagesdefaultResponse;
import com.konfigthis.client.model.EcommerceGetProductVariantInfo200Response;
import com.konfigthis.client.model.EcommerceGetProductVariantInfoResponse;
import com.konfigthis.client.model.EcommerceGetProductVariantInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetPromoCode200Response;
import com.konfigthis.client.model.EcommerceGetPromoCodeResponse;
import com.konfigthis.client.model.EcommerceGetPromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreCarts200Response;
import com.konfigthis.client.model.EcommerceGetStoreCartsResponse;
import com.konfigthis.client.model.EcommerceGetStoreCartsdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreCustomers200Response;
import com.konfigthis.client.model.EcommerceGetStoreCustomersResponse;
import com.konfigthis.client.model.EcommerceGetStoreCustomersdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreInfo200Response;
import com.konfigthis.client.model.EcommerceGetStoreInfoResponse;
import com.konfigthis.client.model.EcommerceGetStoreInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderInfo200Response;
import com.konfigthis.client.model.EcommerceGetStoreOrderInfoResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderLines200Response;
import com.konfigthis.client.model.EcommerceGetStoreOrderLinesResponse;
import com.konfigthis.client.model.EcommerceGetStoreOrderLinesdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreProductInfo200Response;
import com.konfigthis.client.model.EcommerceGetStoreProductInfoResponse;
import com.konfigthis.client.model.EcommerceGetStoreProductInfodefaultResponse;
import com.konfigthis.client.model.EcommerceGetStoreProducts200Response;
import com.konfigthis.client.model.EcommerceGetStoreProductsResponse;
import com.konfigthis.client.model.EcommerceGetStoreProductsdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoCodes200Response;
import com.konfigthis.client.model.EcommerceGetStorePromoCodesResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoCodesdefaultResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRule200Response;
import com.konfigthis.client.model.EcommerceGetStorePromoRuleResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRules200Response;
import com.konfigthis.client.model.EcommerceGetStorePromoRulesResponse;
import com.konfigthis.client.model.EcommerceGetStorePromoRulesdefaultResponse;
import com.konfigthis.client.model.EcommerceListAccountOrders200Response;
import com.konfigthis.client.model.EcommerceListAccountOrdersResponse;
import com.konfigthis.client.model.EcommerceListAccountOrdersdefaultResponse;
import com.konfigthis.client.model.EcommerceListCartLines200Response;
import com.konfigthis.client.model.EcommerceListCartLinesResponse;
import com.konfigthis.client.model.EcommerceListCartLinesdefaultResponse;
import com.konfigthis.client.model.EcommerceListProductVariants200Response;
import com.konfigthis.client.model.EcommerceListProductVariantsResponse;
import com.konfigthis.client.model.EcommerceListProductVariantsdefaultResponse;
import com.konfigthis.client.model.EcommerceListStoreOrders200Response;
import com.konfigthis.client.model.EcommerceListStoreOrdersResponse;
import com.konfigthis.client.model.EcommerceListStoreOrdersdefaultResponse;
import com.konfigthis.client.model.EcommerceListStores200Response;
import com.konfigthis.client.model.EcommerceListStoresResponse;
import com.konfigthis.client.model.EcommerceListStoresdefaultResponse;
import com.konfigthis.client.model.EcommerceRemoveCartResponse;
import com.konfigthis.client.model.EcommerceRemoveCartdefaultResponse;
import com.konfigthis.client.model.EcommerceRemoveCustomerResponse;
import com.konfigthis.client.model.EcommerceRemoveCustomerdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateCartById200Response;
import com.konfigthis.client.model.EcommerceUpdateCartByIdRequest;
import com.konfigthis.client.model.EcommerceUpdateCartByIdResponse;
import com.konfigthis.client.model.EcommerceUpdateCartByIddefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateCartLineItem200Response;
import com.konfigthis.client.model.EcommerceUpdateCartLineItemRequest;
import com.konfigthis.client.model.EcommerceUpdateCartLineItemResponse;
import com.konfigthis.client.model.EcommerceUpdateCartLineItemdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateCustomer200Response;
import com.konfigthis.client.model.EcommerceUpdateCustomerRequest;
import com.konfigthis.client.model.EcommerceUpdateCustomerResponse;
import com.konfigthis.client.model.EcommerceUpdateCustomerdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateOrderLine200Response;
import com.konfigthis.client.model.EcommerceUpdateOrderLineRequest;
import com.konfigthis.client.model.EcommerceUpdateOrderLineResponse;
import com.konfigthis.client.model.EcommerceUpdateOrderLinedefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateProduct200Response;
import com.konfigthis.client.model.EcommerceUpdateProductImage200Response;
import com.konfigthis.client.model.EcommerceUpdateProductImageRequest;
import com.konfigthis.client.model.EcommerceUpdateProductImageResponse;
import com.konfigthis.client.model.EcommerceUpdateProductImagedefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateProductRequest;
import com.konfigthis.client.model.EcommerceUpdateProductResponse;
import com.konfigthis.client.model.EcommerceUpdateProductVariant200Response;
import com.konfigthis.client.model.EcommerceUpdateProductVariantRequest;
import com.konfigthis.client.model.EcommerceUpdateProductVariantResponse;
import com.konfigthis.client.model.EcommerceUpdateProductVariantdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateProductdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoCode200Response;
import com.konfigthis.client.model.EcommerceUpdatePromoCodeRequest;
import com.konfigthis.client.model.EcommerceUpdatePromoCodeResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoCodedefaultResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoRule200Response;
import com.konfigthis.client.model.EcommerceUpdatePromoRuleRequest;
import com.konfigthis.client.model.EcommerceUpdatePromoRuleResponse;
import com.konfigthis.client.model.EcommerceUpdatePromoRuledefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrder200Response;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrderRequest;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrderResponse;
import com.konfigthis.client.model.EcommerceUpdateSpecificOrderdefaultResponse;
import com.konfigthis.client.model.EcommerceUpdateStore200Response;
import com.konfigthis.client.model.EcommerceUpdateStoreRequest;
import com.konfigthis.client.model.EcommerceUpdateStoreResponse;
import com.konfigthis.client.model.EcommerceUpdateStoredefaultResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OutreachProperty;
import com.konfigthis.client.model.OutreachProperty1;
import com.konfigthis.client.model.PromosPropertyInner;
import com.konfigthis.client.model.ShippingAddressProperty;
import com.konfigthis.client.model.ShippingAddressProperty1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EcommerceApi
 */
@Disabled
public class EcommerceApiTest {

    private static EcommerceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EcommerceApi(apiClient);
    }

    /**
     * Add cart line item
     *
     * Add a new line item to an existing cart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCartLineItemTest() throws ApiException {
        String id = null;
        String productId = null;
        String productVariantId = null;
        Integer quantity = null;
        Double price = null;
        String storeId = null;
        String cartId = null;
        EcommerceAddCartLineItemResponse response = api.addCartLineItem(id, productId, productVariantId, quantity, price, storeId, cartId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add cart
     *
     * Add a new cart to a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCartToStoreTest() throws ApiException {
        String id = null;
        ECommerceCustomerProperty customer = null;
        String currencyCode = null;
        Double orderTotal = null;
        List<ECommerceCartLineItem> lines = null;
        String storeId = null;
        String campaignId = null;
        String checkoutUrl = null;
        Double taxTotal = null;
        EcommerceAddCartToStoreResponse response = api.addCartToStore(id, customer, currencyCode, orderTotal, lines, storeId)
                .campaignId(campaignId)
                .checkoutUrl(checkoutUrl)
                .taxTotal(taxTotal)
                .execute();
        // TODO: test validations
    }

    /**
     * Add customer
     *
     * Add a new customer to a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCustomerToStoreTest() throws ApiException {
        String id = null;
        String emailAddress = null;
        Boolean optInStatus = null;
        String storeId = null;
        String company = null;
        String firstName = null;
        String lastName = null;
        AddressProperty4 address = null;
        EcommerceAddCustomerToStoreResponse response = api.addCustomerToStore(id, emailAddress, optInStatus, storeId)
                .company(company)
                .firstName(firstName)
                .lastName(lastName)
                .address(address)
                .execute();
        // TODO: test validations
    }

    /**
     * Add or update customer
     *
     * Add or update a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrUpdateCustomerTest() throws ApiException {
        String id = null;
        String emailAddress = null;
        Boolean optInStatus = null;
        String storeId = null;
        String customerId = null;
        String company = null;
        String firstName = null;
        String lastName = null;
        AddressProperty6 address = null;
        EcommerceAddOrUpdateCustomerResponse response = api.addOrUpdateCustomer(id, emailAddress, optInStatus, storeId, customerId)
                .company(company)
                .firstName(firstName)
                .lastName(lastName)
                .address(address)
                .execute();
        // TODO: test validations
    }

    /**
     * Add or update product variant
     *
     * Add or update a product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrUpdateProductVariantTest() throws ApiException {
        String title = null;
        String id = null;
        String storeId = null;
        String productId = null;
        String variantId = null;
        String url = null;
        String sku = null;
        Double price = null;
        Integer inventoryQuantity = null;
        String imageUrl = null;
        String backorders = null;
        String visibility = null;
        EcommerceAddOrUpdateProductVariantResponse response = api.addOrUpdateProductVariant(title, id, storeId, productId, variantId)
                .url(url)
                .sku(sku)
                .price(price)
                .inventoryQuantity(inventoryQuantity)
                .imageUrl(imageUrl)
                .backorders(backorders)
                .visibility(visibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Add order line item
     *
     * Add a new line item to an existing order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrderLineItemTest() throws ApiException {
        String id = null;
        String productId = null;
        String productVariantId = null;
        Integer quantity = null;
        Double price = null;
        String storeId = null;
        String orderId = null;
        Double discount = null;
        EcommerceAddOrderLineItemResponse response = api.addOrderLineItem(id, productId, productVariantId, quantity, price, storeId, orderId)
                .discount(discount)
                .execute();
        // TODO: test validations
    }

    /**
     * Add order
     *
     * Add a new order to a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrderToStoreTest() throws ApiException {
        String id = null;
        ECommerceCustomerProperty2 customer = null;
        String currencyCode = null;
        Double orderTotal = null;
        List<ECommerceOrderLineItem> lines = null;
        String storeId = null;
        String campaignId = null;
        String landingSite = null;
        String financialStatus = null;
        String fulfillmentStatus = null;
        String orderUrl = null;
        Double discountTotal = null;
        Double taxTotal = null;
        Double shippingTotal = null;
        String trackingCode = null;
        OffsetDateTime processedAtForeign = null;
        OffsetDateTime cancelledAtForeign = null;
        OffsetDateTime updatedAtForeign = null;
        ShippingAddressProperty shippingAddress = null;
        BillingAddressProperty billingAddress = null;
        List<PromosPropertyInner> promos = null;
        OutreachProperty outreach = null;
        String trackingNumber = null;
        String trackingCarrier = null;
        String trackingUrl = null;
        EcommerceAddOrderToStoreResponse response = api.addOrderToStore(id, customer, currencyCode, orderTotal, lines, storeId)
                .campaignId(campaignId)
                .landingSite(landingSite)
                .financialStatus(financialStatus)
                .fulfillmentStatus(fulfillmentStatus)
                .orderUrl(orderUrl)
                .discountTotal(discountTotal)
                .taxTotal(taxTotal)
                .shippingTotal(shippingTotal)
                .trackingCode(trackingCode)
                .processedAtForeign(processedAtForeign)
                .cancelledAtForeign(cancelledAtForeign)
                .updatedAtForeign(updatedAtForeign)
                .shippingAddress(shippingAddress)
                .billingAddress(billingAddress)
                .promos(promos)
                .outreach(outreach)
                .trackingNumber(trackingNumber)
                .trackingCarrier(trackingCarrier)
                .trackingUrl(trackingUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Add product image
     *
     * Add a new image to the product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductImageTest() throws ApiException {
        String id = null;
        String url = null;
        String storeId = null;
        String productId = null;
        List<String> variantIds = null;
        EcommerceAddProductImageResponse response = api.addProductImage(id, url, storeId, productId)
                .variantIds(variantIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Add product
     *
     * Add a new product to a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductToStoreTest() throws ApiException {
        String title = null;
        String id = null;
        List<ECommerceProductVariant> variants = null;
        String storeId = null;
        String description = null;
        String handle = null;
        String url = null;
        String type = null;
        String vendor = null;
        String imageUrl = null;
        List<ECommerceProductImage> images = null;
        OffsetDateTime publishedAtForeign = null;
        EcommerceAddProductToStoreResponse response = api.addProductToStore(title, id, variants, storeId)
                .description(description)
                .handle(handle)
                .url(url)
                .type(type)
                .vendor(vendor)
                .imageUrl(imageUrl)
                .images(images)
                .publishedAtForeign(publishedAtForeign)
                .execute();
        // TODO: test validations
    }

    /**
     * Add product variant
     *
     * Add a new variant to the product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductVariantTest() throws ApiException {
        String title = null;
        String id = null;
        String storeId = null;
        String productId = null;
        String url = null;
        String sku = null;
        Double price = null;
        Integer inventoryQuantity = null;
        String imageUrl = null;
        String backorders = null;
        String visibility = null;
        EcommerceAddProductVariantResponse response = api.addProductVariant(title, id, storeId, productId)
                .url(url)
                .sku(sku)
                .price(price)
                .inventoryQuantity(inventoryQuantity)
                .imageUrl(imageUrl)
                .backorders(backorders)
                .visibility(visibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Add promo code
     *
     * Add a new promo code to a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPromoCodeTest() throws ApiException {
        String id = null;
        String code = null;
        String redemptionUrl = null;
        String storeId = null;
        String promoRuleId = null;
        Integer usageCount = null;
        Boolean enabled = null;
        OffsetDateTime createdAtForeign = null;
        OffsetDateTime updatedAtForeign = null;
        EcommerceAddPromoCodeResponse response = api.addPromoCode(id, code, redemptionUrl, storeId, promoRuleId)
                .usageCount(usageCount)
                .enabled(enabled)
                .createdAtForeign(createdAtForeign)
                .updatedAtForeign(updatedAtForeign)
                .execute();
        // TODO: test validations
    }

    /**
     * Add promo rule
     *
     * Add a new promo rule to a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPromoRuleTest() throws ApiException {
        String description = null;
        String id = null;
        Float amount = null;
        String type = null;
        String target = null;
        String storeId = null;
        String title = null;
        OffsetDateTime startsAt = null;
        String endsAt = null;
        Boolean enabled = null;
        OffsetDateTime createdAtForeign = null;
        OffsetDateTime updatedAtForeign = null;
        EcommerceAddPromoRuleResponse response = api.addPromoRule(description, id, amount, type, target, storeId)
                .title(title)
                .startsAt(startsAt)
                .endsAt(endsAt)
                .enabled(enabled)
                .createdAtForeign(createdAtForeign)
                .updatedAtForeign(updatedAtForeign)
                .execute();
        // TODO: test validations
    }

    /**
     * Add store
     *
     * Add a new store to your Mailchimp account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStoreToMailchimpAccountTest() throws ApiException {
        String id = null;
        String listId = null;
        String name = null;
        String currencyCode = null;
        String platform = null;
        String domain = null;
        Boolean isSyncing = null;
        String emailAddress = null;
        String moneyFormat = null;
        String primaryLocale = null;
        String timezone = null;
        String phone = null;
        AddressProperty address = null;
        EcommerceAddStoreToMailchimpAccountResponse response = api.addStoreToMailchimpAccount(id, listId, name, currencyCode)
                .platform(platform)
                .domain(domain)
                .isSyncing(isSyncing)
                .emailAddress(emailAddress)
                .moneyFormat(moneyFormat)
                .primaryLocale(primaryLocale)
                .timezone(timezone)
                .phone(phone)
                .address(address)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete cart line item
     *
     * Delete a specific cart line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCartLineItemTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        String lineId = null;
        api.deleteCartLineItem(storeId, cartId, lineId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete order
     *
     * Delete an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        api.deleteOrder(storeId, orderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete order line item
     *
     * Delete a specific order line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderLineTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        String lineId = null;
        api.deleteOrderLine(storeId, orderId, lineId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete product
     *
     * Delete a product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        String storeId = null;
        String productId = null;
        api.deleteProduct(storeId, productId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete product image
     *
     * Delete a product image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductImageTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String imageId = null;
        api.deleteProductImage(storeId, productId, imageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete product variant
     *
     * Delete a product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductVariantTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String variantId = null;
        api.deleteProductVariant(storeId, productId, variantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete promo code
     *
     * Delete a promo code from a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePromoCodeTest() throws ApiException {
        String storeId = null;
        String promoRuleId = null;
        String promoCodeId = null;
        api.deletePromoCode(storeId, promoRuleId, promoCodeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete promo rule
     *
     * Delete a promo rule from a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePromoRuleTest() throws ApiException {
        String storeId = null;
        String promoRuleId = null;
        api.deletePromoRule(storeId, promoRuleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete store
     *
     * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStoreTest() throws ApiException {
        String storeId = null;
        Object response = api.deleteStore(storeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get cart info
     *
     * Get information about a specific cart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCartInfoTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetCartInfoResponse response = api.getCartInfo(storeId, cartId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get cart line item
     *
     * Get information about a specific cart line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCartLineItemTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        String lineId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetCartLineItemResponse response = api.getCartLineItem(storeId, cartId, lineId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customer info
     *
     * Get information about a specific customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerInfoTest() throws ApiException {
        String storeId = null;
        String customerId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetCustomerInfoResponse response = api.getCustomerInfo(storeId, customerId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get order line item
     *
     * Get information about a specific order line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderLineItemTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        String lineId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetOrderLineItemResponse response = api.getOrderLineItem(storeId, orderId, lineId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get product image info
     *
     * Get information about a specific product image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductImageInfoTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String imageId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetProductImageInfoResponse response = api.getProductImageInfo(storeId, productId, imageId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List product images
     *
     * Get information about a product&#39;s images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductImagesTest() throws ApiException {
        String storeId = null;
        String productId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceGetProductImagesResponse response = api.getProductImages(storeId, productId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get product variant info
     *
     * Get information about a specific product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariantInfoTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String variantId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetProductVariantInfoResponse response = api.getProductVariantInfo(storeId, productId, variantId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get promo code
     *
     * Get information about a specific promo code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPromoCodeTest() throws ApiException {
        String storeId = null;
        String promoRuleId = null;
        String promoCodeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetPromoCodeResponse response = api.getPromoCode(storeId, promoRuleId, promoCodeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List carts
     *
     * Get information about a store&#39;s carts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreCartsTest() throws ApiException {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceGetStoreCartsResponse response = api.getStoreCarts(storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List customers
     *
     * Get information about a store&#39;s customers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreCustomersTest() throws ApiException {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String emailAddress = null;
        EcommerceGetStoreCustomersResponse response = api.getStoreCustomers(storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .emailAddress(emailAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Get store info
     *
     * Get information about a specific store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreInfoTest() throws ApiException {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetStoreInfoResponse response = api.getStoreInfo(storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get order info
     *
     * Get information about a specific order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreOrderInfoTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetStoreOrderInfoResponse response = api.getStoreOrderInfo(storeId, orderId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List order line items
     *
     * Get information about an order&#39;s line items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreOrderLinesTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceGetStoreOrderLinesResponse response = api.getStoreOrderLines(storeId, orderId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get product info
     *
     * Get information about a specific product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreProductInfoTest() throws ApiException {
        String storeId = null;
        String productId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetStoreProductInfoResponse response = api.getStoreProductInfo(storeId, productId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List product
     *
     * Get information about a store&#39;s products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoreProductsTest() throws ApiException {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceGetStoreProductsResponse response = api.getStoreProducts(storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List promo codes
     *
     * Get information about a store&#39;s promo codes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStorePromoCodesTest() throws ApiException {
        String promoRuleId = null;
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceGetStorePromoCodesResponse response = api.getStorePromoCodes(promoRuleId, storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get promo rule
     *
     * Get information about a specific promo rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStorePromoRuleTest() throws ApiException {
        String storeId = null;
        String promoRuleId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        EcommerceGetStorePromoRuleResponse response = api.getStorePromoRule(storeId, promoRuleId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List promo rules
     *
     * Get information about a store&#39;s promo rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStorePromoRulesTest() throws ApiException {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceGetStorePromoRulesResponse response = api.getStorePromoRules(storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List account orders
     *
     * Get information about an account&#39;s orders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountOrdersTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String campaignId = null;
        String outreachId = null;
        String customerId = null;
        Boolean hasOutreach = null;
        EcommerceListAccountOrdersResponse response = api.listAccountOrders()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .campaignId(campaignId)
                .outreachId(outreachId)
                .customerId(customerId)
                .hasOutreach(hasOutreach)
                .execute();
        // TODO: test validations
    }

    /**
     * List cart line items
     *
     * Get information about a cart&#39;s line items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCartLinesTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceListCartLinesResponse response = api.listCartLines(storeId, cartId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List product variants
     *
     * Get information about a product&#39;s variants.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProductVariantsTest() throws ApiException {
        String storeId = null;
        String productId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceListProductVariantsResponse response = api.listProductVariants(storeId, productId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List orders
     *
     * Get information about a store&#39;s orders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStoreOrdersTest() throws ApiException {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String customerId = null;
        Boolean hasOutreach = null;
        String campaignId = null;
        String outreachId = null;
        EcommerceListStoreOrdersResponse response = api.listStoreOrders(storeId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .customerId(customerId)
                .hasOutreach(hasOutreach)
                .campaignId(campaignId)
                .outreachId(outreachId)
                .execute();
        // TODO: test validations
    }

    /**
     * List stores
     *
     * Get information about all stores in the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStoresTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        EcommerceListStoresResponse response = api.listStores()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete cart
     *
     * Delete a cart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCartTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        api.removeCart(storeId, cartId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete customer
     *
     * Delete a customer from a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCustomerTest() throws ApiException {
        String storeId = null;
        String customerId = null;
        api.removeCustomer(storeId, customerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update cart
     *
     * Update a specific cart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCartByIdTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        ECommerceCustomerProperty1 customer = null;
        String campaignId = null;
        String checkoutUrl = null;
        String currencyCode = null;
        Double orderTotal = null;
        Double taxTotal = null;
        List<ECommerceCartLineItem1> lines = null;
        EcommerceUpdateCartByIdResponse response = api.updateCartById(storeId, cartId)
                .customer(customer)
                .campaignId(campaignId)
                .checkoutUrl(checkoutUrl)
                .currencyCode(currencyCode)
                .orderTotal(orderTotal)
                .taxTotal(taxTotal)
                .lines(lines)
                .execute();
        // TODO: test validations
    }

    /**
     * Update cart line item
     *
     * Update a specific cart line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCartLineItemTest() throws ApiException {
        String storeId = null;
        String cartId = null;
        String lineId = null;
        String productId = null;
        String productVariantId = null;
        Integer quantity = null;
        Double price = null;
        EcommerceUpdateCartLineItemResponse response = api.updateCartLineItem(storeId, cartId, lineId)
                .productId(productId)
                .productVariantId(productVariantId)
                .quantity(quantity)
                .price(price)
                .execute();
        // TODO: test validations
    }

    /**
     * Update customer
     *
     * Update a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerTest() throws ApiException {
        String storeId = null;
        String customerId = null;
        Boolean optInStatus = null;
        String company = null;
        String firstName = null;
        String lastName = null;
        AddressProperty5 address = null;
        EcommerceUpdateCustomerResponse response = api.updateCustomer(storeId, customerId)
                .optInStatus(optInStatus)
                .company(company)
                .firstName(firstName)
                .lastName(lastName)
                .address(address)
                .execute();
        // TODO: test validations
    }

    /**
     * Update order line item
     *
     * Update a specific order line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderLineTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        String lineId = null;
        String productId = null;
        String productVariantId = null;
        Integer quantity = null;
        Double price = null;
        Double discount = null;
        EcommerceUpdateOrderLineResponse response = api.updateOrderLine(storeId, orderId, lineId)
                .productId(productId)
                .productVariantId(productVariantId)
                .quantity(quantity)
                .price(price)
                .discount(discount)
                .execute();
        // TODO: test validations
    }

    /**
     * Update product
     *
     * Update a specific product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String title = null;
        String description = null;
        String handle = null;
        String url = null;
        String type = null;
        String vendor = null;
        String imageUrl = null;
        List<ECommerceProductVariant1> variants = null;
        List<ECommerceProductImage1> images = null;
        OffsetDateTime publishedAtForeign = null;
        EcommerceUpdateProductResponse response = api.updateProduct(storeId, productId)
                .title(title)
                .description(description)
                .handle(handle)
                .url(url)
                .type(type)
                .vendor(vendor)
                .imageUrl(imageUrl)
                .variants(variants)
                .images(images)
                .publishedAtForeign(publishedAtForeign)
                .execute();
        // TODO: test validations
    }

    /**
     * Update product image
     *
     * Update a product image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductImageTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String imageId = null;
        String id = null;
        String url = null;
        List<String> variantIds = null;
        EcommerceUpdateProductImageResponse response = api.updateProductImage(storeId, productId, imageId)
                .id(id)
                .url(url)
                .variantIds(variantIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Update product variant
     *
     * Update a product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariantTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String variantId = null;
        String title = null;
        String url = null;
        String sku = null;
        Double price = null;
        Integer inventoryQuantity = null;
        String imageUrl = null;
        String backorders = null;
        String visibility = null;
        EcommerceUpdateProductVariantResponse response = api.updateProductVariant(storeId, productId, variantId)
                .title(title)
                .url(url)
                .sku(sku)
                .price(price)
                .inventoryQuantity(inventoryQuantity)
                .imageUrl(imageUrl)
                .backorders(backorders)
                .visibility(visibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Update promo code
     *
     * Update a promo code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePromoCodeTest() throws ApiException {
        String storeId = null;
        String promoRuleId = null;
        String promoCodeId = null;
        String code = null;
        String redemptionUrl = null;
        Integer usageCount = null;
        Boolean enabled = null;
        OffsetDateTime createdAtForeign = null;
        OffsetDateTime updatedAtForeign = null;
        EcommerceUpdatePromoCodeResponse response = api.updatePromoCode(storeId, promoRuleId, promoCodeId)
                .code(code)
                .redemptionUrl(redemptionUrl)
                .usageCount(usageCount)
                .enabled(enabled)
                .createdAtForeign(createdAtForeign)
                .updatedAtForeign(updatedAtForeign)
                .execute();
        // TODO: test validations
    }

    /**
     * Update promo rule
     *
     * Update a promo rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePromoRuleTest() throws ApiException {
        String storeId = null;
        String promoRuleId = null;
        String title = null;
        String description = null;
        OffsetDateTime startsAt = null;
        String endsAt = null;
        Float amount = null;
        String type = null;
        String target = null;
        Boolean enabled = null;
        OffsetDateTime createdAtForeign = null;
        OffsetDateTime updatedAtForeign = null;
        EcommerceUpdatePromoRuleResponse response = api.updatePromoRule(storeId, promoRuleId)
                .title(title)
                .description(description)
                .startsAt(startsAt)
                .endsAt(endsAt)
                .amount(amount)
                .type(type)
                .target(target)
                .enabled(enabled)
                .createdAtForeign(createdAtForeign)
                .updatedAtForeign(updatedAtForeign)
                .execute();
        // TODO: test validations
    }

    /**
     * Update order
     *
     * Update a specific order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpecificOrderTest() throws ApiException {
        String storeId = null;
        String orderId = null;
        ECommerceCustomerProperty3 customer = null;
        String campaignId = null;
        String landingSite = null;
        String financialStatus = null;
        String fulfillmentStatus = null;
        String currencyCode = null;
        Double orderTotal = null;
        String orderUrl = null;
        Double discountTotal = null;
        Double taxTotal = null;
        Double shippingTotal = null;
        String trackingCode = null;
        OffsetDateTime processedAtForeign = null;
        OffsetDateTime cancelledAtForeign = null;
        OffsetDateTime updatedAtForeign = null;
        ShippingAddressProperty1 shippingAddress = null;
        BillingAddressProperty1 billingAddress = null;
        List<PromosPropertyInner> promos = null;
        List<ECommerceOrderLineItem1> lines = null;
        OutreachProperty1 outreach = null;
        String trackingNumber = null;
        String trackingCarrier = null;
        String trackingUrl = null;
        EcommerceUpdateSpecificOrderResponse response = api.updateSpecificOrder(storeId, orderId)
                .customer(customer)
                .campaignId(campaignId)
                .landingSite(landingSite)
                .financialStatus(financialStatus)
                .fulfillmentStatus(fulfillmentStatus)
                .currencyCode(currencyCode)
                .orderTotal(orderTotal)
                .orderUrl(orderUrl)
                .discountTotal(discountTotal)
                .taxTotal(taxTotal)
                .shippingTotal(shippingTotal)
                .trackingCode(trackingCode)
                .processedAtForeign(processedAtForeign)
                .cancelledAtForeign(cancelledAtForeign)
                .updatedAtForeign(updatedAtForeign)
                .shippingAddress(shippingAddress)
                .billingAddress(billingAddress)
                .promos(promos)
                .lines(lines)
                .outreach(outreach)
                .trackingNumber(trackingNumber)
                .trackingCarrier(trackingCarrier)
                .trackingUrl(trackingUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Update store
     *
     * Update a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStoreTest() throws ApiException {
        String storeId = null;
        String name = null;
        String platform = null;
        String domain = null;
        Boolean isSyncing = null;
        String emailAddress = null;
        String currencyCode = null;
        String moneyFormat = null;
        String primaryLocale = null;
        String timezone = null;
        String phone = null;
        AddressProperty1 address = null;
        EcommerceUpdateStoreResponse response = api.updateStore(storeId)
                .name(name)
                .platform(platform)
                .domain(domain)
                .isSyncing(isSyncing)
                .emailAddress(emailAddress)
                .currencyCode(currencyCode)
                .moneyFormat(moneyFormat)
                .primaryLocale(primaryLocale)
                .timezone(timezone)
                .phone(phone)
                .address(address)
                .execute();
        // TODO: test validations
    }

}
