/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AutomationCampaignSettingsProperty;
import com.konfigthis.client.model.AutomationDelayProperty;
import com.konfigthis.client.model.AutomationTriggerProperty;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmail200Response;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmailRequest;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmailResponse;
import com.konfigthis.client.model.AutomationsAddSubscriberToWorkflowEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsArchiveActionResponse;
import com.konfigthis.client.model.AutomationsArchiveActiondefaultResponse;
import com.konfigthis.client.model.AutomationsClassicAutomationSubscriberInfo200Response;
import com.konfigthis.client.model.AutomationsClassicAutomationSubscriberInfoResponse;
import com.konfigthis.client.model.AutomationsClassicAutomationSubscriberInfodefaultResponse;
import com.konfigthis.client.model.AutomationsCreateClassic200Response;
import com.konfigthis.client.model.AutomationsCreateClassicRequest;
import com.konfigthis.client.model.AutomationsCreateClassicResponse;
import com.konfigthis.client.model.AutomationsCreateClassicdefaultResponse;
import com.konfigthis.client.model.AutomationsDeleteWorkflowEmailResponse;
import com.konfigthis.client.model.AutomationsDeleteWorkflowEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowEmails200Response;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowEmailsResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowInfo200Response;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowInfoResponse;
import com.konfigthis.client.model.AutomationsGetClassicWorkflowInfodefaultResponse;
import com.konfigthis.client.model.AutomationsGetEmailInfo200Response;
import com.konfigthis.client.model.AutomationsGetEmailInfoResponse;
import com.konfigthis.client.model.AutomationsGetEmailInfodefaultResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscriberInfo200Response;
import com.konfigthis.client.model.AutomationsGetRemovedSubscriberInfoResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscriberInfodefaultResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscribers200Response;
import com.konfigthis.client.model.AutomationsGetRemovedSubscribersResponse;
import com.konfigthis.client.model.AutomationsGetRemovedSubscribersdefaultResponse;
import com.konfigthis.client.model.AutomationsListQueueEmails200Response;
import com.konfigthis.client.model.AutomationsListQueueEmailsResponse;
import com.konfigthis.client.model.AutomationsListQueueEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsListSummary200Response;
import com.konfigthis.client.model.AutomationsListSummaryResponse;
import com.konfigthis.client.model.AutomationsListSummarydefaultResponse;
import com.konfigthis.client.model.AutomationsPauseAutomatedEmailResponse;
import com.konfigthis.client.model.AutomationsPauseAutomatedEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsPauseWorkflowEmailsResponse;
import com.konfigthis.client.model.AutomationsPauseWorkflowEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsRemoveSubscriberFromWorkflow200Response;
import com.konfigthis.client.model.AutomationsRemoveSubscriberFromWorkflowResponse;
import com.konfigthis.client.model.AutomationsRemoveSubscriberFromWorkflowdefaultResponse;
import com.konfigthis.client.model.AutomationsStartAllEmailsResponse;
import com.konfigthis.client.model.AutomationsStartAllEmailsdefaultResponse;
import com.konfigthis.client.model.AutomationsStartAutomatedEmailResponse;
import com.konfigthis.client.model.AutomationsStartAutomatedEmaildefaultResponse;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmail200Response;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmailRequest;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmailResponse;
import com.konfigthis.client.model.AutomationsUpdateWorkflowEmaildefaultResponse;
import com.konfigthis.client.model.CampaignSettingsProperty;
import com.konfigthis.client.model.ListProperty;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutomationsApi
 */
@Disabled
public class AutomationsApiTest {

    private static AutomationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AutomationsApi(apiClient);
    }

    /**
     * Add subscriber to workflow email
     *
     * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSubscriberToWorkflowEmailTest() throws ApiException {
        String emailAddress = null;
        String workflowId = null;
        String workflowEmailId = null;
        AutomationsAddSubscriberToWorkflowEmailResponse response = api.addSubscriberToWorkflowEmail(emailAddress, workflowId, workflowEmailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Archive automation
     *
     * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveActionTest() throws ApiException {
        String workflowId = null;
        api.archiveAction(workflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get automated email subscriber
     *
     * Get information about a specific subscriber in a classic automation email queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void classicAutomationSubscriberInfoTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        String subscriberHash = null;
        AutomationsClassicAutomationSubscriberInfoResponse response = api.classicAutomationSubscriberInfo(workflowId, workflowEmailId, subscriberHash)
                .execute();
        // TODO: test validations
    }

    /**
     * Add automation
     *
     * Create a new classic automation in your Mailchimp account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClassicTest() throws ApiException {
        ListProperty recipients = null;
        AutomationTriggerProperty triggerSettings = null;
        AutomationCampaignSettingsProperty settings = null;
        AutomationsCreateClassicResponse response = api.createClassic(recipients, triggerSettings)
                .settings(settings)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete workflow email
     *
     * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkflowEmailTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        api.deleteWorkflowEmail(workflowId, workflowEmailId)
                .execute();
        // TODO: test validations
    }

    /**
     * List automated emails
     *
     * Get a summary of the emails in a classic automation workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassicWorkflowEmailsTest() throws ApiException {
        String workflowId = null;
        AutomationsGetClassicWorkflowEmailsResponse response = api.getClassicWorkflowEmails(workflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get automation info
     *
     * Get a summary of an individual classic automation workflow&#39;s settings and content. The &#x60;trigger_settings&#x60; object returns information for the first email in the workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassicWorkflowInfoTest() throws ApiException {
        String workflowId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        AutomationsGetClassicWorkflowInfoResponse response = api.getClassicWorkflowInfo(workflowId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get workflow email info
     *
     * Get information about an individual classic automation workflow email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailInfoTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        AutomationsGetEmailInfoResponse response = api.getEmailInfo(workflowId, workflowEmailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get subscriber removed from workflow
     *
     * Get information about a specific subscriber who was removed from a classic automation workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemovedSubscriberInfoTest() throws ApiException {
        String workflowId = null;
        String subscriberHash = null;
        AutomationsGetRemovedSubscriberInfoResponse response = api.getRemovedSubscriberInfo(workflowId, subscriberHash)
                .execute();
        // TODO: test validations
    }

    /**
     * List subscribers removed from workflow
     *
     * Get information about subscribers who were removed from a classic automation workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemovedSubscribersTest() throws ApiException {
        String workflowId = null;
        AutomationsGetRemovedSubscribersResponse response = api.getRemovedSubscribers(workflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * List automated email subscribers
     *
     * Get information about a classic automation email queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQueueEmailsTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        AutomationsListQueueEmailsResponse response = api.listQueueEmails(workflowId, workflowEmailId)
                .execute();
        // TODO: test validations
    }

    /**
     * List automations
     *
     * Get a summary of an account&#39;s classic automations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSummaryTest() throws ApiException {
        Integer count = null;
        Integer offset = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        OffsetDateTime beforeCreateTime = null;
        OffsetDateTime sinceCreateTime = null;
        OffsetDateTime beforeStartTime = null;
        OffsetDateTime sinceStartTime = null;
        String status = null;
        AutomationsListSummaryResponse response = api.listSummary()
                .count(count)
                .offset(offset)
                .fields(fields)
                .excludeFields(excludeFields)
                .beforeCreateTime(beforeCreateTime)
                .sinceCreateTime(sinceCreateTime)
                .beforeStartTime(beforeStartTime)
                .sinceStartTime(sinceStartTime)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Pause automated email
     *
     * Pause an automated email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseAutomatedEmailTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        api.pauseAutomatedEmail(workflowId, workflowEmailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Pause automation emails
     *
     * Pause all emails in a specific classic automation workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseWorkflowEmailsTest() throws ApiException {
        String workflowId = null;
        api.pauseWorkflowEmails(workflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove subscriber from workflow
     *
     * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they&#39;ve been sent from that workflow. Once they&#39;re removed, they can never be added back to the same workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSubscriberFromWorkflowTest() throws ApiException {
        String emailAddress = null;
        String workflowId = null;
        AutomationsRemoveSubscriberFromWorkflowResponse response = api.removeSubscriberFromWorkflow(emailAddress, workflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Start automation emails
     *
     * Start all emails in a classic automation workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAllEmailsTest() throws ApiException {
        String workflowId = null;
        api.startAllEmails(workflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Start automated email
     *
     * Start an automated email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAutomatedEmailTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        api.startAutomatedEmail(workflowId, workflowEmailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update workflow email
     *
     * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkflowEmailTest() throws ApiException {
        String workflowId = null;
        String workflowEmailId = null;
        CampaignSettingsProperty settings = null;
        AutomationDelayProperty delay = null;
        AutomationsUpdateWorkflowEmailResponse response = api.updateWorkflowEmail(workflowId, workflowEmailId)
                .settings(settings)
                .delay(delay)
                .execute();
        // TODO: test validations
    }

}
