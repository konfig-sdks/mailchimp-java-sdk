/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TemplatesCreateNewTemplate200Response;
import com.konfigthis.client.model.TemplatesCreateNewTemplateRequest;
import com.konfigthis.client.model.TemplatesCreateNewTemplateResponse;
import com.konfigthis.client.model.TemplatesCreateNewTemplatedefaultResponse;
import com.konfigthis.client.model.TemplatesDeleteSpecificTemplateResponse;
import com.konfigthis.client.model.TemplatesDeleteSpecificTemplatedefaultResponse;
import com.konfigthis.client.model.TemplatesGetInfo200Response;
import com.konfigthis.client.model.TemplatesGetInfoResponse;
import com.konfigthis.client.model.TemplatesGetInfodefaultResponse;
import com.konfigthis.client.model.TemplatesListAvailableTemplates200Response;
import com.konfigthis.client.model.TemplatesListAvailableTemplatesResponse;
import com.konfigthis.client.model.TemplatesListAvailableTemplatesdefaultResponse;
import com.konfigthis.client.model.TemplatesUpdateTemplateById200Response;
import com.konfigthis.client.model.TemplatesUpdateTemplateByIdResponse;
import com.konfigthis.client.model.TemplatesUpdateTemplateByIddefaultResponse;
import com.konfigthis.client.model.TemplatesViewDefaultContent200Response;
import com.konfigthis.client.model.TemplatesViewDefaultContentResponse;
import com.konfigthis.client.model.TemplatesViewDefaultContentdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplatesApi
 */
@Disabled
public class TemplatesApiTest {

    private static TemplatesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TemplatesApi(apiClient);
    }

    /**
     * Add template
     *
     * Create a new template for the account. Only Classic templates are supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTemplateTest() throws ApiException {
        String name = null;
        String html = null;
        String folderId = null;
        TemplatesCreateNewTemplateResponse response = api.createNewTemplate(name, html)
                .folderId(folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete template
     *
     * Delete a specific template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpecificTemplateTest() throws ApiException {
        String templateId = null;
        api.deleteSpecificTemplate(templateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get template info
     *
     * Get information about a specific template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        String templateId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        TemplatesGetInfoResponse response = api.getInfo(templateId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List templates
     *
     * Get a list of an account&#39;s available templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableTemplatesTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String createdBy = null;
        String sinceDateCreated = null;
        String beforeDateCreated = null;
        String type = null;
        String category = null;
        String folderId = null;
        String sortField = null;
        String contentType = null;
        String sortDir = null;
        TemplatesListAvailableTemplatesResponse response = api.listAvailableTemplates()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .createdBy(createdBy)
                .sinceDateCreated(sinceDateCreated)
                .beforeDateCreated(beforeDateCreated)
                .type(type)
                .category(category)
                .folderId(folderId)
                .sortField(sortField)
                .contentType(contentType)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * Update template
     *
     * Update the name, HTML, or &#x60;folder_id&#x60; of an existing template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTemplateByIdTest() throws ApiException {
        String name = null;
        String html = null;
        String templateId = null;
        String folderId = null;
        TemplatesUpdateTemplateByIdResponse response = api.updateTemplateById(name, html, templateId)
                .folderId(folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * View default content
     *
     * Get the sections that you can edit in a template, including each section&#39;s default content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewDefaultContentTest() throws ApiException {
        String templateId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        TemplatesViewDefaultContentResponse response = api.viewDefaultContent(templateId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

}
