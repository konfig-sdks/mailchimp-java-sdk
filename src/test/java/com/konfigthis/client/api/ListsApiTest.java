/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddListMembers;
import com.konfigthis.client.model.CampaignDefaultsProperty;
import com.konfigthis.client.model.CollectionOfContentForListSignupForms;
import com.konfigthis.client.model.CollectionOfElementStyleForListSignupForms;
import com.konfigthis.client.model.ConditionsProperty;
import com.konfigthis.client.model.ConditionsProperty1;
import com.konfigthis.client.model.EventsProperty;
import com.konfigthis.client.model.ListContactProperty;
import com.konfigthis.client.model.ListContactProperty1;
import com.konfigthis.client.model.ListsAddInterestCategory200Response;
import com.konfigthis.client.model.ListsAddInterestCategoryRequest;
import com.konfigthis.client.model.ListsAddInterestCategoryResponse;
import com.konfigthis.client.model.ListsAddInterestCategorydefaultResponse;
import com.konfigthis.client.model.ListsAddInterestInCategory200Response;
import com.konfigthis.client.model.ListsAddInterestInCategoryRequest;
import com.konfigthis.client.model.ListsAddInterestInCategoryResponse;
import com.konfigthis.client.model.ListsAddInterestInCategorydefaultResponse;
import com.konfigthis.client.model.ListsAddMemberEventRequest;
import com.konfigthis.client.model.ListsAddMemberEventResponse;
import com.konfigthis.client.model.ListsAddMemberEventdefaultResponse;
import com.konfigthis.client.model.ListsAddMemberNote200Response;
import com.konfigthis.client.model.ListsAddMemberNoteRequest;
import com.konfigthis.client.model.ListsAddMemberNoteResponse;
import com.konfigthis.client.model.ListsAddMemberNotedefaultResponse;
import com.konfigthis.client.model.ListsAddMemberTagsRequest;
import com.konfigthis.client.model.ListsAddMemberTagsResponse;
import com.konfigthis.client.model.ListsAddMemberTagsdefaultResponse;
import com.konfigthis.client.model.ListsAddMemberToList200Response;
import com.konfigthis.client.model.ListsAddMemberToListRequest;
import com.konfigthis.client.model.ListsAddMemberToListResponse;
import com.konfigthis.client.model.ListsAddMemberToListdefaultResponse;
import com.konfigthis.client.model.ListsAddMemberToSegment200Response;
import com.konfigthis.client.model.ListsAddMemberToSegmentRequest;
import com.konfigthis.client.model.ListsAddMemberToSegmentResponse;
import com.konfigthis.client.model.ListsAddMemberToSegmentdefaultResponse;
import com.konfigthis.client.model.ListsAddMergeField200Response;
import com.konfigthis.client.model.ListsAddMergeFieldRequest;
import com.konfigthis.client.model.ListsAddMergeFieldResponse;
import com.konfigthis.client.model.ListsAddMergeFielddefaultResponse;
import com.konfigthis.client.model.ListsAddNewSegment200Response;
import com.konfigthis.client.model.ListsAddNewSegmentRequest;
import com.konfigthis.client.model.ListsAddNewSegmentResponse;
import com.konfigthis.client.model.ListsAddNewSegmentdefaultResponse;
import com.konfigthis.client.model.ListsAddOrUpdateMember200Response;
import com.konfigthis.client.model.ListsAddOrUpdateMemberRequest;
import com.konfigthis.client.model.ListsAddOrUpdateMemberResponse;
import com.konfigthis.client.model.ListsAddOrUpdateMemberdefaultResponse;
import com.konfigthis.client.model.ListsArchiveMemberResponse;
import com.konfigthis.client.model.ListsArchiveMemberdefaultResponse;
import com.konfigthis.client.model.ListsBatchAddRemoveMembers200Response;
import com.konfigthis.client.model.ListsBatchAddRemoveMembersRequest;
import com.konfigthis.client.model.ListsBatchAddRemoveMembersResponse;
import com.konfigthis.client.model.ListsBatchAddRemoveMembersdefaultResponse;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribe200Response;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribeRequest;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribeResponse;
import com.konfigthis.client.model.ListsBatchSubscribeOrUnsubscribedefaultResponse;
import com.konfigthis.client.model.ListsCreateNewList200Response;
import com.konfigthis.client.model.ListsCreateNewListRequest;
import com.konfigthis.client.model.ListsCreateNewListResponse;
import com.konfigthis.client.model.ListsCreateNewListdefaultResponse;
import com.konfigthis.client.model.ListsCreateWebhook200Response;
import com.konfigthis.client.model.ListsCreateWebhookRequest;
import com.konfigthis.client.model.ListsCreateWebhookResponse;
import com.konfigthis.client.model.ListsCreateWebhookdefaultResponse;
import com.konfigthis.client.model.ListsCustomizeSignupForm200Response;
import com.konfigthis.client.model.ListsCustomizeSignupFormRequest;
import com.konfigthis.client.model.ListsCustomizeSignupFormResponse;
import com.konfigthis.client.model.ListsCustomizeSignupFormdefaultResponse;
import com.konfigthis.client.model.ListsDeleteInterestCategoryResponse;
import com.konfigthis.client.model.ListsDeleteInterestCategorydefaultResponse;
import com.konfigthis.client.model.ListsDeleteInterestInCategoryResponse;
import com.konfigthis.client.model.ListsDeleteInterestInCategorydefaultResponse;
import com.konfigthis.client.model.ListsDeleteListResponse;
import com.konfigthis.client.model.ListsDeleteListdefaultResponse;
import com.konfigthis.client.model.ListsDeleteMergeFieldResponse;
import com.konfigthis.client.model.ListsDeleteMergeFielddefaultResponse;
import com.konfigthis.client.model.ListsDeleteNoteResponse;
import com.konfigthis.client.model.ListsDeleteNotedefaultResponse;
import com.konfigthis.client.model.ListsDeleteSegmentResponse;
import com.konfigthis.client.model.ListsDeleteSegmentdefaultResponse;
import com.konfigthis.client.model.ListsDeleteWebhookResponse;
import com.konfigthis.client.model.ListsDeleteWebhookdefaultResponse;
import com.konfigthis.client.model.ListsGetAbuseReport200Response;
import com.konfigthis.client.model.ListsGetAbuseReportResponse;
import com.konfigthis.client.model.ListsGetAbuseReportdefaultResponse;
import com.konfigthis.client.model.ListsGetAllAbuseReports200Response;
import com.konfigthis.client.model.ListsGetAllAbuseReportsResponse;
import com.konfigthis.client.model.ListsGetAllAbuseReportsdefaultResponse;
import com.konfigthis.client.model.ListsGetAllInfo200Response;
import com.konfigthis.client.model.ListsGetAllInfoResponse;
import com.konfigthis.client.model.ListsGetAllInfodefaultResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryByMonth200Response;
import com.konfigthis.client.model.ListsGetGrowthHistoryByMonthResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryByMonthdefaultResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryData200Response;
import com.konfigthis.client.model.ListsGetGrowthHistoryDataResponse;
import com.konfigthis.client.model.ListsGetGrowthHistoryDatadefaultResponse;
import com.konfigthis.client.model.ListsGetInterestCategoryInfo200Response;
import com.konfigthis.client.model.ListsGetInterestCategoryInfoResponse;
import com.konfigthis.client.model.ListsGetInterestCategoryInfodefaultResponse;
import com.konfigthis.client.model.ListsGetInterestInCategory200Response;
import com.konfigthis.client.model.ListsGetInterestInCategoryResponse;
import com.konfigthis.client.model.ListsGetInterestInCategorydefaultResponse;
import com.konfigthis.client.model.ListsGetListInfo200Response;
import com.konfigthis.client.model.ListsGetListInfoResponse;
import com.konfigthis.client.model.ListsGetListInfodefaultResponse;
import com.konfigthis.client.model.ListsGetLocations200Response;
import com.konfigthis.client.model.ListsGetLocationsResponse;
import com.konfigthis.client.model.ListsGetLocationsdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberEvents200Response;
import com.konfigthis.client.model.ListsGetMemberEventsResponse;
import com.konfigthis.client.model.ListsGetMemberEventsdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberGoals200Response;
import com.konfigthis.client.model.ListsGetMemberGoalsResponse;
import com.konfigthis.client.model.ListsGetMemberGoalsdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberInfo200Response;
import com.konfigthis.client.model.ListsGetMemberInfoResponse;
import com.konfigthis.client.model.ListsGetMemberInfodefaultResponse;
import com.konfigthis.client.model.ListsGetMemberNote200Response;
import com.konfigthis.client.model.ListsGetMemberNoteResponse;
import com.konfigthis.client.model.ListsGetMemberNotedefaultResponse;
import com.konfigthis.client.model.ListsGetMemberNotes200Response;
import com.konfigthis.client.model.ListsGetMemberNotesResponse;
import com.konfigthis.client.model.ListsGetMemberNotesdefaultResponse;
import com.konfigthis.client.model.ListsGetMemberTags200Response;
import com.konfigthis.client.model.ListsGetMemberTagsResponse;
import com.konfigthis.client.model.ListsGetMemberTagsdefaultResponse;
import com.konfigthis.client.model.ListsGetMembersInfo200Response;
import com.konfigthis.client.model.ListsGetMembersInfoResponse;
import com.konfigthis.client.model.ListsGetMembersInfodefaultResponse;
import com.konfigthis.client.model.ListsGetMergeFieldInfo200Response;
import com.konfigthis.client.model.ListsGetMergeFieldInfoResponse;
import com.konfigthis.client.model.ListsGetMergeFieldInfodefaultResponse;
import com.konfigthis.client.model.ListsGetRecentActivityStats200Response;
import com.konfigthis.client.model.ListsGetRecentActivityStatsResponse;
import com.konfigthis.client.model.ListsGetRecentActivityStatsdefaultResponse;
import com.konfigthis.client.model.ListsGetSegmentInfo200Response;
import com.konfigthis.client.model.ListsGetSegmentInfoResponse;
import com.konfigthis.client.model.ListsGetSegmentInfodefaultResponse;
import com.konfigthis.client.model.ListsGetSegmentMembers200Response;
import com.konfigthis.client.model.ListsGetSegmentMembersResponse;
import com.konfigthis.client.model.ListsGetSegmentMembersdefaultResponse;
import com.konfigthis.client.model.ListsGetSegmentsInfo200Response;
import com.konfigthis.client.model.ListsGetSegmentsInfoResponse;
import com.konfigthis.client.model.ListsGetSegmentsInfodefaultResponse;
import com.konfigthis.client.model.ListsGetSignupForms200Response;
import com.konfigthis.client.model.ListsGetSignupFormsResponse;
import com.konfigthis.client.model.ListsGetSignupFormsdefaultResponse;
import com.konfigthis.client.model.ListsGetSurveyDetailsResponse;
import com.konfigthis.client.model.ListsGetSurveyDetailsdefaultResponse;
import com.konfigthis.client.model.ListsGetSurveysInfoResponse;
import com.konfigthis.client.model.ListsGetSurveysInfodefaultResponse;
import com.konfigthis.client.model.ListsGetWebhookInfo200Response;
import com.konfigthis.client.model.ListsGetWebhookInfoResponse;
import com.konfigthis.client.model.ListsGetWebhookInfodefaultResponse;
import com.konfigthis.client.model.ListsGetWebhooksInfo200Response;
import com.konfigthis.client.model.ListsGetWebhooksInfoResponse;
import com.konfigthis.client.model.ListsGetWebhooksInfodefaultResponse;
import com.konfigthis.client.model.ListsListCategoryInterests200Response;
import com.konfigthis.client.model.ListsListCategoryInterestsResponse;
import com.konfigthis.client.model.ListsListCategoryInterestsdefaultResponse;
import com.konfigthis.client.model.ListsListInterestCategories200Response;
import com.konfigthis.client.model.ListsListInterestCategoriesResponse;
import com.konfigthis.client.model.ListsListInterestCategoriesdefaultResponse;
import com.konfigthis.client.model.ListsListMergeFields200Response;
import com.konfigthis.client.model.ListsListMergeFieldsResponse;
import com.konfigthis.client.model.ListsListMergeFieldsdefaultResponse;
import com.konfigthis.client.model.ListsListTopEmailClients200Response;
import com.konfigthis.client.model.ListsListTopEmailClientsResponse;
import com.konfigthis.client.model.ListsListTopEmailClientsdefaultResponse;
import com.konfigthis.client.model.ListsRemoveMemberFromSegmentResponse;
import com.konfigthis.client.model.ListsRemoveMemberFromSegmentdefaultResponse;
import com.konfigthis.client.model.ListsRemoveMemberPermanentResponse;
import com.konfigthis.client.model.ListsRemoveMemberPermanentdefaultResponse;
import com.konfigthis.client.model.ListsSearchTagsByName200Response;
import com.konfigthis.client.model.ListsSearchTagsByNameResponse;
import com.konfigthis.client.model.ListsSearchTagsByNamedefaultResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategory200Response;
import com.konfigthis.client.model.ListsUpdateInterestCategoryInterest200Response;
import com.konfigthis.client.model.ListsUpdateInterestCategoryInterestResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategoryInterestdefaultResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategoryResponse;
import com.konfigthis.client.model.ListsUpdateInterestCategorydefaultResponse;
import com.konfigthis.client.model.ListsUpdateMember200Response;
import com.konfigthis.client.model.ListsUpdateMemberRequest;
import com.konfigthis.client.model.ListsUpdateMemberResponse;
import com.konfigthis.client.model.ListsUpdateMemberdefaultResponse;
import com.konfigthis.client.model.ListsUpdateMergeField200Response;
import com.konfigthis.client.model.ListsUpdateMergeFieldRequest;
import com.konfigthis.client.model.ListsUpdateMergeFieldResponse;
import com.konfigthis.client.model.ListsUpdateMergeFielddefaultResponse;
import com.konfigthis.client.model.ListsUpdateNoteSpecificListMember200Response;
import com.konfigthis.client.model.ListsUpdateNoteSpecificListMemberResponse;
import com.konfigthis.client.model.ListsUpdateNoteSpecificListMemberdefaultResponse;
import com.konfigthis.client.model.ListsUpdateSegmentById200Response;
import com.konfigthis.client.model.ListsUpdateSegmentByIdRequest;
import com.konfigthis.client.model.ListsUpdateSegmentByIdResponse;
import com.konfigthis.client.model.ListsUpdateSegmentByIddefaultResponse;
import com.konfigthis.client.model.ListsUpdateSettings200Response;
import com.konfigthis.client.model.ListsUpdateSettingsRequest;
import com.konfigthis.client.model.ListsUpdateSettingsResponse;
import com.konfigthis.client.model.ListsUpdateSettingsdefaultResponse;
import com.konfigthis.client.model.ListsUpdateWebhookSettings200Response;
import com.konfigthis.client.model.ListsUpdateWebhookSettingsResponse;
import com.konfigthis.client.model.ListsUpdateWebhookSettingsdefaultResponse;
import com.konfigthis.client.model.ListsViewRecentActivity200Response;
import com.konfigthis.client.model.ListsViewRecentActivityEvents200Response;
import com.konfigthis.client.model.ListsViewRecentActivityEventsResponse;
import com.konfigthis.client.model.ListsViewRecentActivityEventsdefaultResponse;
import com.konfigthis.client.model.ListsViewRecentActivityResponse;
import com.konfigthis.client.model.ListsViewRecentActivitydefaultResponse;
import com.konfigthis.client.model.LocationProperty;
import com.konfigthis.client.model.MarketingPermission;
import com.konfigthis.client.model.MemberTag;
import com.konfigthis.client.model.MergeFieldOptionsProperty;
import com.konfigthis.client.model.MergeFieldOptionsProperty1;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SignupFormHeaderOptionsProperty;
import com.konfigthis.client.model.SourcesProperty;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListsApi
 */
@Disabled
public class ListsApiTest {

    private static ListsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ListsApi(apiClient);
    }

    /**
     * Add interest category
     *
     * Create a new interest category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addInterestCategoryTest() throws ApiException {
        String title = null;
        String type = null;
        String listId = null;
        Integer displayOrder = null;
        ListsAddInterestCategoryResponse response = api.addInterestCategory(title, type, listId)
                .displayOrder(displayOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Add interest in category
     *
     * Create a new interest or &#39;group name&#39; for a specific category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addInterestInCategoryTest() throws ApiException {
        String name = null;
        String listId = null;
        String interestCategoryId = null;
        Integer displayOrder = null;
        ListsAddInterestInCategoryResponse response = api.addInterestInCategory(name, listId, interestCategoryId)
                .displayOrder(displayOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Add event
     *
     * Add an event for a list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMemberEventTest() throws ApiException {
        String name = null;
        String listId = null;
        String subscriberHash = null;
        Map<String, String> properties = null;
        Boolean isSyncing = null;
        OffsetDateTime occurredAt = null;
        api.addMemberEvent(name, listId, subscriberHash)
                .properties(properties)
                .isSyncing(isSyncing)
                .occurredAt(occurredAt)
                .execute();
        // TODO: test validations
    }

    /**
     * Add member note
     *
     * Add a new note for a specific subscriber.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMemberNoteTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        String note = null;
        ListsAddMemberNoteResponse response = api.addMemberNote(listId, subscriberHash)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Add or remove member tags
     *
     * Add or remove tags from a list member. If a tag that does not exist is passed in and set as &#39;active&#39;, a new tag will be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMemberTagsTest() throws ApiException {
        List<MemberTag> tags = null;
        String listId = null;
        String subscriberHash = null;
        Boolean isSyncing = null;
        api.addMemberTags(tags, listId, subscriberHash)
                .isSyncing(isSyncing)
                .execute();
        // TODO: test validations
    }

    /**
     * Add member to list
     *
     * Add a new member to the list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMemberToListTest() throws ApiException {
        String emailAddress = null;
        String status = null;
        String listId = null;
        List<String> tags = null;
        String emailType = null;
        Map<String, Object> mergeFields = null;
        Map<String, Boolean> interests = null;
        String language = null;
        Boolean vip = null;
        LocationProperty location = null;
        List<MarketingPermission> marketingPermissions = null;
        String ipSignup = null;
        OffsetDateTime timestampSignup = null;
        String ipOpt = null;
        OffsetDateTime timestampOpt = null;
        Boolean skipMergeValidation = null;
        ListsAddMemberToListResponse response = api.addMemberToList(emailAddress, status, listId)
                .tags(tags)
                .emailType(emailType)
                .mergeFields(mergeFields)
                .interests(interests)
                .language(language)
                .vip(vip)
                .location(location)
                .marketingPermissions(marketingPermissions)
                .ipSignup(ipSignup)
                .timestampSignup(timestampSignup)
                .ipOpt(ipOpt)
                .timestampOpt(timestampOpt)
                .skipMergeValidation(skipMergeValidation)
                .execute();
        // TODO: test validations
    }

    /**
     * Add member to segment
     *
     * Add a member to a static segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMemberToSegmentTest() throws ApiException {
        String emailAddress = null;
        String listId = null;
        String segmentId = null;
        ListsAddMemberToSegmentResponse response = api.addMemberToSegment(emailAddress, listId, segmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add merge field
     *
     * Add a new merge field for a specific audience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMergeFieldTest() throws ApiException {
        String name = null;
        String type = null;
        String listId = null;
        String tag = null;
        Boolean required = null;
        String defaultValue = null;
        Boolean _public = null;
        Integer displayOrder = null;
        MergeFieldOptionsProperty options = null;
        String helpText = null;
        ListsAddMergeFieldResponse response = api.addMergeField(name, type, listId)
                .tag(tag)
                .required(required)
                .defaultValue(defaultValue)
                ._public(_public)
                .displayOrder(displayOrder)
                .options(options)
                .helpText(helpText)
                .execute();
        // TODO: test validations
    }

    /**
     * Add segment
     *
     * Create a new segment in a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewSegmentTest() throws ApiException {
        String name = null;
        String listId = null;
        List<String> staticSegment = null;
        ConditionsProperty options = null;
        ListsAddNewSegmentResponse response = api.addNewSegment(name, listId)
                .staticSegment(staticSegment)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Add or update list member
     *
     * Add or update a list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrUpdateMemberTest() throws ApiException {
        String emailAddress = null;
        String statusIfNew = null;
        String listId = null;
        String subscriberHash = null;
        String emailType = null;
        String status = null;
        Map<String, Object> mergeFields = null;
        Map<String, Boolean> interests = null;
        String language = null;
        Boolean vip = null;
        LocationProperty location = null;
        List<MarketingPermission> marketingPermissions = null;
        String ipSignup = null;
        OffsetDateTime timestampSignup = null;
        String ipOpt = null;
        OffsetDateTime timestampOpt = null;
        Boolean skipMergeValidation = null;
        ListsAddOrUpdateMemberResponse response = api.addOrUpdateMember(emailAddress, statusIfNew, listId, subscriberHash)
                .emailType(emailType)
                .status(status)
                .mergeFields(mergeFields)
                .interests(interests)
                .language(language)
                .vip(vip)
                .location(location)
                .marketingPermissions(marketingPermissions)
                .ipSignup(ipSignup)
                .timestampSignup(timestampSignup)
                .ipOpt(ipOpt)
                .timestampOpt(timestampOpt)
                .skipMergeValidation(skipMergeValidation)
                .execute();
        // TODO: test validations
    }

    /**
     * Archive list member
     *
     * Archive a list member. To permanently delete, use the delete-permanent action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveMemberTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        api.archiveMember(listId, subscriberHash)
                .execute();
        // TODO: test validations
    }

    /**
     * Batch add or remove members
     *
     * Batch add/remove list members to static segment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAddRemoveMembersTest() throws ApiException {
        String listId = null;
        String segmentId = null;
        List<String> membersToAdd = null;
        List<String> membersToRemove = null;
        ListsBatchAddRemoveMembersResponse response = api.batchAddRemoveMembers(listId, segmentId)
                .membersToAdd(membersToAdd)
                .membersToRemove(membersToRemove)
                .execute();
        // TODO: test validations
    }

    /**
     * Batch subscribe or unsubscribe
     *
     * Batch subscribe or unsubscribe list members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSubscribeOrUnsubscribeTest() throws ApiException {
        List<AddListMembers> members = null;
        String listId = null;
        Boolean syncTags = null;
        Boolean updateExisting = null;
        Boolean skipMergeValidation = null;
        Boolean skipDuplicateCheck = null;
        ListsBatchSubscribeOrUnsubscribeResponse response = api.batchSubscribeOrUnsubscribe(members, listId)
                .syncTags(syncTags)
                .updateExisting(updateExisting)
                .skipMergeValidation(skipMergeValidation)
                .skipDuplicateCheck(skipDuplicateCheck)
                .execute();
        // TODO: test validations
    }

    /**
     * Add list
     *
     * Create a new list in your Mailchimp account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewListTest() throws ApiException {
        String name = null;
        ListContactProperty contact = null;
        String permissionReminder = null;
        CampaignDefaultsProperty campaignDefaults = null;
        Boolean emailTypeOption = null;
        Boolean useArchiveBar = null;
        String notifyOnSubscribe = null;
        String notifyOnUnsubscribe = null;
        Boolean doubleOptin = null;
        Boolean marketingPermissions = null;
        ListsCreateNewListResponse response = api.createNewList(name, contact, permissionReminder, campaignDefaults, emailTypeOption)
                .useArchiveBar(useArchiveBar)
                .notifyOnSubscribe(notifyOnSubscribe)
                .notifyOnUnsubscribe(notifyOnUnsubscribe)
                .doubleOptin(doubleOptin)
                .marketingPermissions(marketingPermissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Add webhook
     *
     * Create a new webhook for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        String listId = null;
        String url = null;
        EventsProperty events = null;
        SourcesProperty sources = null;
        ListsCreateWebhookResponse response = api.createWebhook(listId)
                .url(url)
                .events(events)
                .sources(sources)
                .execute();
        // TODO: test validations
    }

    /**
     * Customize signup form
     *
     * Customize a list&#39;s default signup form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customizeSignupFormTest() throws ApiException {
        String listId = null;
        SignupFormHeaderOptionsProperty header = null;
        List<CollectionOfContentForListSignupForms> contents = null;
        List<CollectionOfElementStyleForListSignupForms> styles = null;
        ListsCustomizeSignupFormResponse response = api.customizeSignupForm(listId)
                .header(header)
                .contents(contents)
                .styles(styles)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete interest category
     *
     * Delete a specific interest category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInterestCategoryTest() throws ApiException {
        String listId = null;
        String interestCategoryId = null;
        api.deleteInterestCategory(listId, interestCategoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete interest in category
     *
     * Delete interests or group names in a specific category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInterestInCategoryTest() throws ApiException {
        String listId = null;
        String interestCategoryId = null;
        String interestId = null;
        api.deleteInterestInCategory(listId, interestCategoryId, interestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete list
     *
     * Delete a list from your Mailchimp account. If you delete a list, you&#39;ll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteListTest() throws ApiException {
        String listId = null;
        api.deleteList(listId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete merge field
     *
     * Delete a specific merge field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMergeFieldTest() throws ApiException {
        String listId = null;
        String mergeId = null;
        api.deleteMergeField(listId, mergeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete note
     *
     * Delete a specific note for a specific list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNoteTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        String noteId = null;
        api.deleteNote(listId, subscriberHash, noteId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete segment
     *
     * Delete a specific segment in a list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSegmentTest() throws ApiException {
        String listId = null;
        String segmentId = null;
        api.deleteSegment(listId, segmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete webhook
     *
     * Delete a specific webhook in a list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String listId = null;
        String webhookId = null;
        api.deleteWebhook(listId, webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get abuse report
     *
     * Get details about a specific abuse report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAbuseReportTest() throws ApiException {
        String listId = null;
        String reportId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ListsGetAbuseReportResponse response = api.getAbuseReport(listId, reportId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List abuse reports
     *
     * Get all abuse reports for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAbuseReportsTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ListsGetAllAbuseReportsResponse response = api.getAllAbuseReports(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get lists info
     *
     * Get information about all lists in the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInfoTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String beforeDateCreated = null;
        String sinceDateCreated = null;
        String beforeCampaignLastSent = null;
        String sinceCampaignLastSent = null;
        String email = null;
        String sortField = null;
        String sortDir = null;
        Boolean hasEcommerceStore = null;
        Boolean includeTotalContacts = null;
        ListsGetAllInfoResponse response = api.getAllInfo()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .beforeDateCreated(beforeDateCreated)
                .sinceDateCreated(sinceDateCreated)
                .beforeCampaignLastSent(beforeCampaignLastSent)
                .sinceCampaignLastSent(sinceCampaignLastSent)
                .email(email)
                .sortField(sortField)
                .sortDir(sortDir)
                .hasEcommerceStore(hasEcommerceStore)
                .includeTotalContacts(includeTotalContacts)
                .execute();
        // TODO: test validations
    }

    /**
     * Get growth history by month
     *
     * Get a summary of a specific list&#39;s growth activity for a specific month and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrowthHistoryByMonthTest() throws ApiException {
        String listId = null;
        String month = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetGrowthHistoryByMonthResponse response = api.getGrowthHistoryByMonth(listId, month)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List growth history data
     *
     * Get a month-by-month summary of a specific list&#39;s growth activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrowthHistoryDataTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;
        String sortDir = null;
        ListsGetGrowthHistoryDataResponse response = api.getGrowthHistoryData(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .sortField(sortField)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * Get interest category info
     *
     * Get information about a specific interest category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInterestCategoryInfoTest() throws ApiException {
        String listId = null;
        String interestCategoryId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetInterestCategoryInfoResponse response = api.getInterestCategoryInfo(listId, interestCategoryId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get interest in category
     *
     * Get interests or &#39;group names&#39; for a specific category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInterestInCategoryTest() throws ApiException {
        String listId = null;
        String interestCategoryId = null;
        String interestId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetInterestInCategoryResponse response = api.getInterestInCategory(listId, interestCategoryId, interestId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get list info
     *
     * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven&#39;t confirmed their subscription yet and unsubscribed or cleaned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListInfoTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Boolean includeTotalContacts = null;
        ListsGetListInfoResponse response = api.getListInfo(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .includeTotalContacts(includeTotalContacts)
                .execute();
        // TODO: test validations
    }

    /**
     * List locations
     *
     * Get the locations (countries) that the list&#39;s subscribers have been tagged to based on geocoding their IP address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationsTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetLocationsResponse response = api.getLocations(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List member events
     *
     * Get events for a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberEventsTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        Integer count = null;
        Integer offset = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetMemberEventsResponse response = api.getMemberEvents(listId, subscriberHash)
                .count(count)
                .offset(offset)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List member goal events
     *
     * Get the last 50 Goal events for a member on a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberGoalsTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetMemberGoalsResponse response = api.getMemberGoals(listId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get member info
     *
     * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberInfoTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetMemberInfoResponse response = api.getMemberInfo(listId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get member note
     *
     * Get a specific note for a specific list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberNoteTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        String noteId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetMemberNoteResponse response = api.getMemberNote(listId, subscriberHash, noteId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List recent member notes
     *
     * Get recent notes for a specific list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberNotesTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        String sortField = null;
        String sortDir = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ListsGetMemberNotesResponse response = api.getMemberNotes(listId, subscriberHash)
                .sortField(sortField)
                .sortDir(sortDir)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List member tags
     *
     * Get the tags on a list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberTagsTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ListsGetMemberTagsResponse response = api.getMemberTags(listId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List members info
     *
     * Get information about members in a specific Mailchimp list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersInfoTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String emailType = null;
        String status = null;
        String sinceTimestampOpt = null;
        String beforeTimestampOpt = null;
        String sinceLastChanged = null;
        String beforeLastChanged = null;
        String uniqueEmailId = null;
        Boolean vipOnly = null;
        String interestCategoryId = null;
        String interestIds = null;
        String interestMatch = null;
        String sortField = null;
        String sortDir = null;
        Boolean sinceLastCampaign = null;
        String unsubscribedSince = null;
        ListsGetMembersInfoResponse response = api.getMembersInfo(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .emailType(emailType)
                .status(status)
                .sinceTimestampOpt(sinceTimestampOpt)
                .beforeTimestampOpt(beforeTimestampOpt)
                .sinceLastChanged(sinceLastChanged)
                .beforeLastChanged(beforeLastChanged)
                .uniqueEmailId(uniqueEmailId)
                .vipOnly(vipOnly)
                .interestCategoryId(interestCategoryId)
                .interestIds(interestIds)
                .interestMatch(interestMatch)
                .sortField(sortField)
                .sortDir(sortDir)
                .sinceLastCampaign(sinceLastCampaign)
                .unsubscribedSince(unsubscribedSince)
                .execute();
        // TODO: test validations
    }

    /**
     * Get merge field
     *
     * Get information about a specific merge field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMergeFieldInfoTest() throws ApiException {
        String listId = null;
        String mergeId = null;
        List<String> excludeFields = null;
        List<String> fields = null;
        ListsGetMergeFieldInfoResponse response = api.getMergeFieldInfo(listId, mergeId)
                .excludeFields(excludeFields)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List recent activity
     *
     * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentActivityStatsTest() throws ApiException {
        String listId = null;
        Integer count = null;
        Integer offset = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsGetRecentActivityStatsResponse response = api.getRecentActivityStats(listId)
                .count(count)
                .offset(offset)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get segment info
     *
     * Get information about a specific segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentInfoTest() throws ApiException {
        String listId = null;
        String segmentId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Boolean includeCleaned = null;
        Boolean includeTransactional = null;
        Boolean includeUnsubscribed = null;
        ListsGetSegmentInfoResponse response = api.getSegmentInfo(listId, segmentId)
                .fields(fields)
                .excludeFields(excludeFields)
                .includeCleaned(includeCleaned)
                .includeTransactional(includeTransactional)
                .includeUnsubscribed(includeUnsubscribed)
                .execute();
        // TODO: test validations
    }

    /**
     * List members in segment
     *
     * Get information about members in a saved segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentMembersTest() throws ApiException {
        String listId = null;
        String segmentId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        Boolean includeCleaned = null;
        Boolean includeTransactional = null;
        Boolean includeUnsubscribed = null;
        ListsGetSegmentMembersResponse response = api.getSegmentMembers(listId, segmentId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .includeCleaned(includeCleaned)
                .includeTransactional(includeTransactional)
                .includeUnsubscribed(includeUnsubscribed)
                .execute();
        // TODO: test validations
    }

    /**
     * List segments
     *
     * Get information about all available segments for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentsInfoTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String sinceCreatedAt = null;
        String beforeCreatedAt = null;
        Boolean includeCleaned = null;
        Boolean includeTransactional = null;
        Boolean includeUnsubscribed = null;
        String sinceUpdatedAt = null;
        String beforeUpdatedAt = null;
        ListsGetSegmentsInfoResponse response = api.getSegmentsInfo(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .sinceCreatedAt(sinceCreatedAt)
                .beforeCreatedAt(beforeCreatedAt)
                .includeCleaned(includeCleaned)
                .includeTransactional(includeTransactional)
                .includeUnsubscribed(includeUnsubscribed)
                .sinceUpdatedAt(sinceUpdatedAt)
                .beforeUpdatedAt(beforeUpdatedAt)
                .execute();
        // TODO: test validations
    }

    /**
     * List signup forms
     *
     * Get signup forms for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSignupFormsTest() throws ApiException {
        String listId = null;
        ListsGetSignupFormsResponse response = api.getSignupForms(listId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get survey
     *
     * Get details about a specific survey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSurveyDetailsTest() throws ApiException {
        String listId = null;
        String surveyId = null;
        api.getSurveyDetails(listId, surveyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get information about all surveys for a list
     *
     * Get information about all available surveys for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSurveysInfoTest() throws ApiException {
        String listId = null;
        api.getSurveysInfo(listId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook info
     *
     * Get information about a specific webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookInfoTest() throws ApiException {
        String listId = null;
        String webhookId = null;
        ListsGetWebhookInfoResponse response = api.getWebhookInfo(listId, webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * List webhooks
     *
     * Get information about all webhooks for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksInfoTest() throws ApiException {
        String listId = null;
        ListsGetWebhooksInfoResponse response = api.getWebhooksInfo(listId)
                .execute();
        // TODO: test validations
    }

    /**
     * List interests in category
     *
     * Get a list of this category&#39;s interests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCategoryInterestsTest() throws ApiException {
        String listId = null;
        String interestCategoryId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ListsListCategoryInterestsResponse response = api.listCategoryInterests(listId, interestCategoryId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * List interest categories
     *
     * Get information about a list&#39;s interest categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInterestCategoriesTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        ListsListInterestCategoriesResponse response = api.listInterestCategories(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * List merge fields
     *
     * Get a list of all merge fields for an audience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMergeFieldsTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        Boolean required = null;
        ListsListMergeFieldsResponse response = api.listMergeFields(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .type(type)
                .required(required)
                .execute();
        // TODO: test validations
    }

    /**
     * List top email clients
     *
     * Get a list of the top email clients based on user-agent strings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopEmailClientsTest() throws ApiException {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ListsListTopEmailClientsResponse response = api.listTopEmailClients(listId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove list member from segment
     *
     * Remove a member from the specified static segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberFromSegmentTest() throws ApiException {
        String listId = null;
        String segmentId = null;
        String subscriberHash = null;
        api.removeMemberFromSegment(listId, segmentId, subscriberHash)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete list member
     *
     * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberPermanentTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        api.removeMemberPermanent(listId, subscriberHash)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for tags on a list by name.
     *
     * Search for tags on a list by name. If no name is provided, will return all tags on the list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTagsByNameTest() throws ApiException {
        String listId = null;
        String name = null;
        ListsSearchTagsByNameResponse response = api.searchTagsByName(listId)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Update interest category
     *
     * Update a specific interest category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInterestCategoryTest() throws ApiException {
        String title = null;
        String type = null;
        String listId = null;
        String interestCategoryId = null;
        Integer displayOrder = null;
        ListsUpdateInterestCategoryResponse response = api.updateInterestCategory(title, type, listId, interestCategoryId)
                .displayOrder(displayOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Update interest in category
     *
     * Update interests or &#39;group names&#39; for a specific category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInterestCategoryInterestTest() throws ApiException {
        String name = null;
        String listId = null;
        String interestCategoryId = null;
        String interestId = null;
        Integer displayOrder = null;
        ListsUpdateInterestCategoryInterestResponse response = api.updateInterestCategoryInterest(name, listId, interestCategoryId, interestId)
                .displayOrder(displayOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Update list member
     *
     * Update information for a specific list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMemberTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        String emailAddress = null;
        String emailType = null;
        String status = null;
        Map<String, Object> mergeFields = null;
        Map<String, Boolean> interests = null;
        String language = null;
        Boolean vip = null;
        LocationProperty location = null;
        List<MarketingPermission> marketingPermissions = null;
        String ipSignup = null;
        OffsetDateTime timestampSignup = null;
        String ipOpt = null;
        OffsetDateTime timestampOpt = null;
        Boolean skipMergeValidation = null;
        ListsUpdateMemberResponse response = api.updateMember(listId, subscriberHash)
                .emailAddress(emailAddress)
                .emailType(emailType)
                .status(status)
                .mergeFields(mergeFields)
                .interests(interests)
                .language(language)
                .vip(vip)
                .location(location)
                .marketingPermissions(marketingPermissions)
                .ipSignup(ipSignup)
                .timestampSignup(timestampSignup)
                .ipOpt(ipOpt)
                .timestampOpt(timestampOpt)
                .skipMergeValidation(skipMergeValidation)
                .execute();
        // TODO: test validations
    }

    /**
     * Update merge field
     *
     * Update a specific merge field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMergeFieldTest() throws ApiException {
        String name = null;
        String listId = null;
        String mergeId = null;
        String tag = null;
        Boolean required = null;
        String defaultValue = null;
        Boolean _public = null;
        Integer displayOrder = null;
        MergeFieldOptionsProperty1 options = null;
        String helpText = null;
        ListsUpdateMergeFieldResponse response = api.updateMergeField(name, listId, mergeId)
                .tag(tag)
                .required(required)
                .defaultValue(defaultValue)
                ._public(_public)
                .displayOrder(displayOrder)
                .options(options)
                .helpText(helpText)
                .execute();
        // TODO: test validations
    }

    /**
     * Update note
     *
     * Update a specific note for a specific list member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNoteSpecificListMemberTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        String noteId = null;
        String note = null;
        ListsUpdateNoteSpecificListMemberResponse response = api.updateNoteSpecificListMember(listId, subscriberHash, noteId)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Update segment
     *
     * Update a specific segment in a list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSegmentByIdTest() throws ApiException {
        String name = null;
        String listId = null;
        String segmentId = null;
        List<String> staticSegment = null;
        ConditionsProperty1 options = null;
        ListsUpdateSegmentByIdResponse response = api.updateSegmentById(name, listId, segmentId)
                .staticSegment(staticSegment)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Update lists
     *
     * Update the settings for a specific list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        String name = null;
        ListContactProperty1 contact = null;
        String permissionReminder = null;
        CampaignDefaultsProperty campaignDefaults = null;
        Boolean emailTypeOption = null;
        String listId = null;
        Boolean useArchiveBar = null;
        String notifyOnSubscribe = null;
        String notifyOnUnsubscribe = null;
        Boolean doubleOptin = null;
        Boolean marketingPermissions = null;
        ListsUpdateSettingsResponse response = api.updateSettings(name, contact, permissionReminder, campaignDefaults, emailTypeOption, listId)
                .useArchiveBar(useArchiveBar)
                .notifyOnSubscribe(notifyOnSubscribe)
                .notifyOnUnsubscribe(notifyOnUnsubscribe)
                .doubleOptin(doubleOptin)
                .marketingPermissions(marketingPermissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update webhook
     *
     * Update the settings for an existing webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookSettingsTest() throws ApiException {
        String listId = null;
        String webhookId = null;
        String url = null;
        EventsProperty events = null;
        SourcesProperty sources = null;
        ListsUpdateWebhookSettingsResponse response = api.updateWebhookSettings(listId, webhookId)
                .url(url)
                .events(events)
                .sources(sources)
                .execute();
        // TODO: test validations
    }

    /**
     * View recent activity
     *
     * Get a member&#39;s activity on a specific list, including opens, clicks, and unsubscribes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewRecentActivityTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        List<String> activityFilters = null;
        ListsViewRecentActivityResponse response = api.viewRecentActivity(listId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .activityFilters(activityFilters)
                .execute();
        // TODO: test validations
    }

    /**
     * View recent activity 50
     *
     * Get the last 50 events of a member&#39;s activity on a specific list, including opens, clicks, and unsubscribes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewRecentActivityEventsTest() throws ApiException {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        List<String> action = null;
        ListsViewRecentActivityEventsResponse response = api.viewRecentActivityEvents(listId, subscriberHash)
                .fields(fields)
                .excludeFields(excludeFields)
                .action(action)
                .execute();
        // TODO: test validations
    }

}
