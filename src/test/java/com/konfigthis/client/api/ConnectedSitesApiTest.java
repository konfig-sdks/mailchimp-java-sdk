/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSite200Response;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSiteRequest;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSiteResponse;
import com.konfigthis.client.model.ConnectedSitesCreateNewMailchimpSitedefaultResponse;
import com.konfigthis.client.model.ConnectedSitesGetInfo200Response;
import com.konfigthis.client.model.ConnectedSitesGetInfoResponse;
import com.konfigthis.client.model.ConnectedSitesGetInfodefaultResponse;
import com.konfigthis.client.model.ConnectedSitesListAll200Response;
import com.konfigthis.client.model.ConnectedSitesListAllResponse;
import com.konfigthis.client.model.ConnectedSitesListAlldefaultResponse;
import com.konfigthis.client.model.ConnectedSitesRemoveSiteResponse;
import com.konfigthis.client.model.ConnectedSitesRemoveSitedefaultResponse;
import com.konfigthis.client.model.ConnectedSitesVerifyScriptInstallationResponse;
import com.konfigthis.client.model.ConnectedSitesVerifyScriptInstallationdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectedSitesApi
 */
@Disabled
public class ConnectedSitesApiTest {

    private static ConnectedSitesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ConnectedSitesApi(apiClient);
    }

    /**
     * Add connected site
     *
     * Create a new Mailchimp connected site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewMailchimpSiteTest() throws ApiException {
        String foreignId = null;
        String domain = null;
        ConnectedSitesCreateNewMailchimpSiteResponse response = api.createNewMailchimpSite(foreignId, domain)
                .execute();
        // TODO: test validations
    }

    /**
     * Get connected site
     *
     * Get information about a specific connected site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        String connectedSiteId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        ConnectedSitesGetInfoResponse response = api.getInfo(connectedSiteId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List connected sites
     *
     * Get all connected sites in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        ConnectedSitesListAllResponse response = api.listAll()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete connected site
     *
     * Remove a connected site from your Mailchimp account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSiteTest() throws ApiException {
        String connectedSiteId = null;
        api.removeSite(connectedSiteId)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify connected site script
     *
     * Verify that the connected sites script has been installed, either via the script URL or fragment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyScriptInstallationTest() throws ApiException {
        String connectedSiteId = null;
        api.verifyScriptInstallation(connectedSiteId)
                .execute();
        // TODO: test validations
    }

}
