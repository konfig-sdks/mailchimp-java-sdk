/*
 * Mailchimp Marketing API
 * Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BatchesGetOperationStatus200Response;
import com.konfigthis.client.model.BatchesGetOperationStatusResponse;
import com.konfigthis.client.model.BatchesGetOperationStatusdefaultResponse;
import com.konfigthis.client.model.BatchesListRequestsSummary200Response;
import com.konfigthis.client.model.BatchesListRequestsSummaryResponse;
import com.konfigthis.client.model.BatchesListRequestsSummarydefaultResponse;
import com.konfigthis.client.model.BatchesStartOperationProcess200Response;
import com.konfigthis.client.model.BatchesStartOperationProcessRequest;
import com.konfigthis.client.model.BatchesStartOperationProcessResponse;
import com.konfigthis.client.model.BatchesStartOperationProcessdefaultResponse;
import com.konfigthis.client.model.BatchesStopRequestResponse;
import com.konfigthis.client.model.BatchesStopRequestdefaultResponse;
import com.konfigthis.client.model.Operations;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchesApi
 */
@Disabled
public class BatchesApiTest {

    private static BatchesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BatchesApi(apiClient);
    }

    /**
     * Get batch operation status
     *
     * Get the status of a batch request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationStatusTest() throws ApiException {
        String batchId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        BatchesGetOperationStatusResponse response = api.getOperationStatus(batchId)
                .fields(fields)
                .excludeFields(excludeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * List batch requests
     *
     * Get a summary of batch requests that have been made.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRequestsSummaryTest() throws ApiException {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        BatchesListRequestsSummaryResponse response = api.listRequestsSummary()
                .fields(fields)
                .excludeFields(excludeFields)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Start batch operation
     *
     * Begin processing a batch operations request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startOperationProcessTest() throws ApiException {
        List<Operations> operations = null;
        BatchesStartOperationProcessResponse response = api.startOperationProcess(operations)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete batch request
     *
     * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRequestTest() throws ApiException {
        String batchId = null;
        api.stopRequest(batchId)
                .execute();
        // TODO: test validations
    }

}
